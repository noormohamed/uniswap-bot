export interface ContractAddresses {
    erc20Proxy: string;
    erc721Proxy: string;
    zrxToken: string;
    etherToken: string;
    exchange: string;
    assetProxyOwner: string;
    forwarder: string;
    orderValidator: string;
    dutchAuction: string;
    coordinatorRegistry: string;
    coordinator: string;
    multiAssetProxy: string;
    staticCallProxy: string;
    erc1155Proxy: string;
    devUtils: string;
}
export declare enum NetworkId {
    Mainnet = 1,
    Ropsten = 3,
    Rinkeby = 4,
    Kovan = 42,
    Ganache = 50
}
/**
 * Used to get addresses of contracts that have been deployed to either the
 * Ethereum mainnet or a supported testnet. Throws if there are no known
 * contracts deployed on the corresponding network.
 * @param networkId The desired networkId.
 * @returns The set of addresses for contracts which have been deployed on the
 * given networkId.
 */
export declare function getContractAddressesForNetworkOrThrow(networkId: NetworkId): ContractAddresses;
/**
 * Uses a given exchange address to look up the network id that the exchange contract is deployed
 * on. Only works for Ethereum mainnet or a supported testnet. Throws if the exchange address
 * does not correspond to a known deployed exchange contract.
 * @param exchangeAddress The exchange address of concern
 * @returns The network ID on which the exchange contract is deployed
 */
export declare function getNetworkIdByExchangeAddressOrThrow(exchangeAddress: string): NetworkId;
//# sourceMappingURL=index.d.ts.map