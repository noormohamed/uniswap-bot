"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:no-consecutive-blank-lines ordered-imports align trailing-comma
// tslint:disable:whitespace no-unbound-method no-trailing-whitespace
// tslint:disable:no-unused-variable
var base_contract_1 = require("@0x/base-contract");
var json_schemas_1 = require("@0x/json-schemas");
var utils_1 = require("@0x/utils");
var web3_wrapper_1 = require("@0x/web3-wrapper");
var assert_1 = require("@0x/assert");
var ethers = require("ethers");
// tslint:enable:no-unused-variable
/* istanbul ignore next */
// tslint:disable:no-parameter-reassignment
// tslint:disable-next-line:class-name
var ForwarderContract = /** @class */ (function (_super) {
    __extends(ForwarderContract, _super);
    function ForwarderContract(address, supportedProvider, txDefaults, logDecodeDependencies) {
        var _this = _super.call(this, 'Forwarder', ForwarderContract.ABI(), address, supportedProvider, txDefaults, logDecodeDependencies) || this;
        /**
         * Attempt to purchase makerAssetFillAmount of makerAsset by selling ETH provided with transaction.
         * Any ZRX required to pay fees for primary orders will automatically be purchased by this contract.
         * Any ETH not spent will be refunded to sender.
         */
        _this.marketBuyOrdersWithEth = {
            /**
             * Sends an Ethereum transaction executing this method with the supplied parameters. This is a read/write
             * Ethereum operation and will cost gas.
             * @param orders Array of order specifications used containing desired
             *     makerAsset and WETH as takerAsset.
             * @param makerAssetFillAmount Desired amount of makerAsset to purchase.
             * @param signatures Proofs that orders have been created by makers.
             * @param feeOrders Array of order specifications containing ZRX as makerAsset
             *     and WETH as takerAsset. Used to purchase ZRX for primary order fees.
             * @param feeSignatures Proofs that feeOrders have been created by makers.
             * @param feePercentage Percentage of WETH sold that will payed as fee to
             *     forwarding contract feeRecipient.
             * @param feeRecipient Address that will receive ETH when orders are filled.
             * @param txData Additional data for transaction
             * @returns The hash of the transaction
             */
            sendTransactionAsync: function (orders, makerAssetFillAmount, signatures, feeOrders, feeSignatures, feePercentage, feeRecipient, txData) {
                return __awaiter(this, void 0, void 0, function () {
                    var self, encodedData, txDataWithDefaults, txHash;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                assert_1.assert.isArray('orders', orders);
                                assert_1.assert.isBigNumber('makerAssetFillAmount', makerAssetFillAmount);
                                assert_1.assert.isArray('signatures', signatures);
                                assert_1.assert.isArray('feeOrders', feeOrders);
                                assert_1.assert.isArray('feeSignatures', feeSignatures);
                                assert_1.assert.isBigNumber('feePercentage', feePercentage);
                                assert_1.assert.isString('feeRecipient', feeRecipient);
                                self = this;
                                encodedData = self._strictEncodeArguments('marketBuyOrdersWithEth((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256,bytes[],(address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],bytes[],uint256,address)', [
                                    orders,
                                    makerAssetFillAmount,
                                    signatures,
                                    feeOrders,
                                    feeSignatures,
                                    feePercentage,
                                    feeRecipient.toLowerCase(),
                                ]);
                                return [4 /*yield*/, base_contract_1.BaseContract._applyDefaultsToTxDataAsync(__assign({ to: self.address }, txData, { data: encodedData }), self._web3Wrapper.getContractDefaults(), self.marketBuyOrdersWithEth.estimateGasAsync.bind(self, orders, makerAssetFillAmount, signatures, feeOrders, feeSignatures, feePercentage, feeRecipient.toLowerCase()))];
                            case 1:
                                txDataWithDefaults = _a.sent();
                                if (txDataWithDefaults.from !== undefined) {
                                    txDataWithDefaults.from = txDataWithDefaults.from.toLowerCase();
                                }
                                return [4 /*yield*/, self._web3Wrapper.sendTransactionAsync(txDataWithDefaults)];
                            case 2:
                                txHash = _a.sent();
                                return [2 /*return*/, txHash];
                        }
                    });
                });
            },
            /**
             * Sends an Ethereum transaction and waits until the transaction has been successfully mined without reverting.
             * If the transaction was mined, but reverted, an error is thrown.
             * @param orders Array of order specifications used containing desired
             *     makerAsset and WETH as takerAsset.
             * @param makerAssetFillAmount Desired amount of makerAsset to purchase.
             * @param signatures Proofs that orders have been created by makers.
             * @param feeOrders Array of order specifications containing ZRX as makerAsset
             *     and WETH as takerAsset. Used to purchase ZRX for primary order fees.
             * @param feeSignatures Proofs that feeOrders have been created by makers.
             * @param feePercentage Percentage of WETH sold that will payed as fee to
             *     forwarding contract feeRecipient.
             * @param feeRecipient Address that will receive ETH when orders are filled.
             * @param txData Additional data for transaction
             * @param pollingIntervalMs Interval at which to poll for success
             * @returns A promise that resolves when the transaction is successful
             */
            awaitTransactionSuccessAsync: function (orders, makerAssetFillAmount, signatures, feeOrders, feeSignatures, feePercentage, feeRecipient, txData, pollingIntervalMs, timeoutMs) {
                var _this = this;
                assert_1.assert.isArray('orders', orders);
                assert_1.assert.isBigNumber('makerAssetFillAmount', makerAssetFillAmount);
                assert_1.assert.isArray('signatures', signatures);
                assert_1.assert.isArray('feeOrders', feeOrders);
                assert_1.assert.isArray('feeSignatures', feeSignatures);
                assert_1.assert.isBigNumber('feePercentage', feePercentage);
                assert_1.assert.isString('feeRecipient', feeRecipient);
                var self = this;
                var txHashPromise = self.marketBuyOrdersWithEth.sendTransactionAsync(orders, makerAssetFillAmount, signatures, feeOrders, feeSignatures, feePercentage, feeRecipient.toLowerCase(), txData);
                return new base_contract_1.PromiseWithTransactionHash(txHashPromise, (function () { return __awaiter(_this, void 0, void 0, function () {
                    var _a, _b;
                    return __generator(this, function (_c) {
                        switch (_c.label) {
                            case 0:
                                _b = (_a = self._web3Wrapper).awaitTransactionSuccessAsync;
                                return [4 /*yield*/, txHashPromise];
                            case 1: 
                            // When the transaction hash resolves, wait for it to be mined.
                            return [2 /*return*/, _b.apply(_a, [_c.sent(),
                                    pollingIntervalMs,
                                    timeoutMs])];
                        }
                    });
                }); })());
            },
            /**
             * Estimates the gas cost of sending an Ethereum transaction calling this method with these arguments.
             * @param orders Array of order specifications used containing desired
             *     makerAsset and WETH as takerAsset.
             * @param makerAssetFillAmount Desired amount of makerAsset to purchase.
             * @param signatures Proofs that orders have been created by makers.
             * @param feeOrders Array of order specifications containing ZRX as makerAsset
             *     and WETH as takerAsset. Used to purchase ZRX for primary order fees.
             * @param feeSignatures Proofs that feeOrders have been created by makers.
             * @param feePercentage Percentage of WETH sold that will payed as fee to
             *     forwarding contract feeRecipient.
             * @param feeRecipient Address that will receive ETH when orders are filled.
             * @param txData Additional data for transaction
             * @returns The hash of the transaction
             */
            estimateGasAsync: function (orders, makerAssetFillAmount, signatures, feeOrders, feeSignatures, feePercentage, feeRecipient, txData) {
                return __awaiter(this, void 0, void 0, function () {
                    var self, encodedData, txDataWithDefaults, gas;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                assert_1.assert.isArray('orders', orders);
                                assert_1.assert.isBigNumber('makerAssetFillAmount', makerAssetFillAmount);
                                assert_1.assert.isArray('signatures', signatures);
                                assert_1.assert.isArray('feeOrders', feeOrders);
                                assert_1.assert.isArray('feeSignatures', feeSignatures);
                                assert_1.assert.isBigNumber('feePercentage', feePercentage);
                                assert_1.assert.isString('feeRecipient', feeRecipient);
                                self = this;
                                encodedData = self._strictEncodeArguments('marketBuyOrdersWithEth((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256,bytes[],(address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],bytes[],uint256,address)', [
                                    orders,
                                    makerAssetFillAmount,
                                    signatures,
                                    feeOrders,
                                    feeSignatures,
                                    feePercentage,
                                    feeRecipient.toLowerCase(),
                                ]);
                                return [4 /*yield*/, base_contract_1.BaseContract._applyDefaultsToTxDataAsync(__assign({ to: self.address }, txData, { data: encodedData }), self._web3Wrapper.getContractDefaults())];
                            case 1:
                                txDataWithDefaults = _a.sent();
                                if (txDataWithDefaults.from !== undefined) {
                                    txDataWithDefaults.from = txDataWithDefaults.from.toLowerCase();
                                }
                                return [4 /*yield*/, self._web3Wrapper.estimateGasAsync(txDataWithDefaults)];
                            case 2:
                                gas = _a.sent();
                                return [2 /*return*/, gas];
                        }
                    });
                });
            },
            validateAndSendTransactionAsync: function (orders, makerAssetFillAmount, signatures, feeOrders, feeSignatures, feePercentage, feeRecipient, txData) {
                return __awaiter(this, void 0, void 0, function () {
                    var txHash;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this.marketBuyOrdersWithEth.callAsync(orders, makerAssetFillAmount, signatures, feeOrders, feeSignatures, feePercentage, feeRecipient, txData)];
                            case 1:
                                _a.sent();
                                return [4 /*yield*/, this.marketBuyOrdersWithEth.sendTransactionAsync(orders, makerAssetFillAmount, signatures, feeOrders, feeSignatures, feePercentage, feeRecipient, txData)];
                            case 2:
                                txHash = _a.sent();
                                return [2 /*return*/, txHash];
                        }
                    });
                });
            },
            /**
             * Sends a read-only call to the contract method. Returns the result that would happen if one were to send an
             * Ethereum transaction to this method, given the current state of the blockchain. Calls do not cost gas
             * since they don't modify state.
             * @param orders Array of order specifications used containing desired
             *     makerAsset and WETH as takerAsset.
             * @param makerAssetFillAmount Desired amount of makerAsset to purchase.
             * @param signatures Proofs that orders have been created by makers.
             * @param feeOrders Array of order specifications containing ZRX as makerAsset
             *     and WETH as takerAsset. Used to purchase ZRX for primary order fees.
             * @param feeSignatures Proofs that feeOrders have been created by makers.
             * @param feePercentage Percentage of WETH sold that will payed as fee to
             *     forwarding contract feeRecipient.
             * @param feeRecipient Address that will receive ETH when orders are filled.
             * @returns Amounts filled and fees paid by maker and taker for both sets of orders.
             */
            callAsync: function (orders, makerAssetFillAmount, signatures, feeOrders, feeSignatures, feePercentage, feeRecipient, callData, defaultBlock) {
                if (callData === void 0) { callData = {}; }
                return __awaiter(this, void 0, void 0, function () {
                    var self, encodedData, callDataWithDefaults, rawCallResult, abiEncoder, result;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                assert_1.assert.isArray('orders', orders);
                                assert_1.assert.isBigNumber('makerAssetFillAmount', makerAssetFillAmount);
                                assert_1.assert.isArray('signatures', signatures);
                                assert_1.assert.isArray('feeOrders', feeOrders);
                                assert_1.assert.isArray('feeSignatures', feeSignatures);
                                assert_1.assert.isBigNumber('feePercentage', feePercentage);
                                assert_1.assert.isString('feeRecipient', feeRecipient);
                                assert_1.assert.doesConformToSchema('callData', callData, json_schemas_1.schemas.callDataSchema, [
                                    json_schemas_1.schemas.addressSchema,
                                    json_schemas_1.schemas.numberSchema,
                                    json_schemas_1.schemas.jsNumber,
                                ]);
                                if (defaultBlock !== undefined) {
                                    assert_1.assert.isBlockParam('defaultBlock', defaultBlock);
                                }
                                self = this;
                                encodedData = self._strictEncodeArguments('marketBuyOrdersWithEth((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256,bytes[],(address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],bytes[],uint256,address)', [
                                    orders,
                                    makerAssetFillAmount,
                                    signatures,
                                    feeOrders,
                                    feeSignatures,
                                    feePercentage,
                                    feeRecipient.toLowerCase(),
                                ]);
                                return [4 /*yield*/, base_contract_1.BaseContract._applyDefaultsToTxDataAsync(__assign({ to: self.address }, callData, { data: encodedData }), self._web3Wrapper.getContractDefaults())];
                            case 1:
                                callDataWithDefaults = _a.sent();
                                callDataWithDefaults.from = callDataWithDefaults.from
                                    ? callDataWithDefaults.from.toLowerCase()
                                    : callDataWithDefaults.from;
                                return [4 /*yield*/, self._web3Wrapper.callAsync(callDataWithDefaults, defaultBlock)];
                            case 2:
                                rawCallResult = _a.sent();
                                base_contract_1.BaseContract._throwIfRevertWithReasonCallResult(rawCallResult);
                                abiEncoder = self._lookupAbiEncoder('marketBuyOrdersWithEth((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256,bytes[],(address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],bytes[],uint256,address)');
                                result = abiEncoder.strictDecodeReturnValue(rawCallResult);
                                // tslint:enable boolean-naming
                                return [2 /*return*/, result];
                        }
                    });
                });
            },
            /**
             * Returns the ABI encoded transaction data needed to send an Ethereum transaction calling this method. Before
             * sending the Ethereum tx, this encoded tx data can first be sent to a separate signing service or can be used
             * to create a 0x transaction (see protocol spec for more details).
             * @param orders Array of order specifications used containing desired
             *     makerAsset and WETH as takerAsset.
             * @param makerAssetFillAmount Desired amount of makerAsset to purchase.
             * @param signatures Proofs that orders have been created by makers.
             * @param feeOrders Array of order specifications containing ZRX as makerAsset
             *     and WETH as takerAsset. Used to purchase ZRX for primary order fees.
             * @param feeSignatures Proofs that feeOrders have been created by makers.
             * @param feePercentage Percentage of WETH sold that will payed as fee to
             *     forwarding contract feeRecipient.
             * @param feeRecipient Address that will receive ETH when orders are filled.
             * @returns The ABI encoded transaction data as a string
             */
            getABIEncodedTransactionData: function (orders, makerAssetFillAmount, signatures, feeOrders, feeSignatures, feePercentage, feeRecipient) {
                assert_1.assert.isArray('orders', orders);
                assert_1.assert.isBigNumber('makerAssetFillAmount', makerAssetFillAmount);
                assert_1.assert.isArray('signatures', signatures);
                assert_1.assert.isArray('feeOrders', feeOrders);
                assert_1.assert.isArray('feeSignatures', feeSignatures);
                assert_1.assert.isBigNumber('feePercentage', feePercentage);
                assert_1.assert.isString('feeRecipient', feeRecipient);
                var self = this;
                var abiEncodedTransactionData = self._strictEncodeArguments('marketBuyOrdersWithEth((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256,bytes[],(address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],bytes[],uint256,address)', [
                    orders,
                    makerAssetFillAmount,
                    signatures,
                    feeOrders,
                    feeSignatures,
                    feePercentage,
                    feeRecipient.toLowerCase(),
                ]);
                return abiEncodedTransactionData;
            },
            /**
             * Decode the ABI-encoded transaction data into its input arguments
             * @param callData The ABI-encoded transaction data
             * @returns An array representing the input arguments in order. Keynames of nested structs are preserved.
             */
            getABIDecodedTransactionData: function (callData) {
                var self = this;
                var abiEncoder = self._lookupAbiEncoder('marketBuyOrdersWithEth((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256,bytes[],(address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],bytes[],uint256,address)');
                // tslint:disable boolean-naming
                var abiDecodedCallData = abiEncoder.strictDecode(callData);
                return abiDecodedCallData;
            },
            /**
             * Decode the ABI-encoded return data from a transaction
             * @param returnData the data returned after transaction execution
             * @returns An array representing the output results in order.  Keynames of nested structs are preserved.
             */
            getABIDecodedReturnData: function (returnData) {
                var self = this;
                var abiEncoder = self._lookupAbiEncoder('marketBuyOrdersWithEth((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256,bytes[],(address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],bytes[],uint256,address)');
                // tslint:disable boolean-naming
                var abiDecodedReturnData = abiEncoder.strictDecodeReturnValue(returnData);
                return abiDecodedReturnData;
            },
        };
        /**
         * Withdraws assets from this contract. The contract requires a ZRX balance in order to
         * function optimally, and this function allows the ZRX to be withdrawn by owner. It may also be
         * used to withdraw assets that were accidentally sent to this contract.
         */
        _this.withdrawAsset = {
            /**
             * Sends an Ethereum transaction executing this method with the supplied parameters. This is a read/write
             * Ethereum operation and will cost gas.
             * @param assetData Byte array encoded for the respective asset proxy.
             * @param amount Amount of ERC20 token to withdraw.
             * @param txData Additional data for transaction
             * @returns The hash of the transaction
             */
            sendTransactionAsync: function (assetData, amount, txData) {
                return __awaiter(this, void 0, void 0, function () {
                    var self, encodedData, txDataWithDefaults, txHash;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                assert_1.assert.isString('assetData', assetData);
                                assert_1.assert.isBigNumber('amount', amount);
                                self = this;
                                encodedData = self._strictEncodeArguments('withdrawAsset(bytes,uint256)', [assetData, amount]);
                                return [4 /*yield*/, base_contract_1.BaseContract._applyDefaultsToTxDataAsync(__assign({ to: self.address }, txData, { data: encodedData }), self._web3Wrapper.getContractDefaults(), self.withdrawAsset.estimateGasAsync.bind(self, assetData, amount))];
                            case 1:
                                txDataWithDefaults = _a.sent();
                                if (txDataWithDefaults.from !== undefined) {
                                    txDataWithDefaults.from = txDataWithDefaults.from.toLowerCase();
                                }
                                return [4 /*yield*/, self._web3Wrapper.sendTransactionAsync(txDataWithDefaults)];
                            case 2:
                                txHash = _a.sent();
                                return [2 /*return*/, txHash];
                        }
                    });
                });
            },
            /**
             * Sends an Ethereum transaction and waits until the transaction has been successfully mined without reverting.
             * If the transaction was mined, but reverted, an error is thrown.
             * @param assetData Byte array encoded for the respective asset proxy.
             * @param amount Amount of ERC20 token to withdraw.
             * @param txData Additional data for transaction
             * @param pollingIntervalMs Interval at which to poll for success
             * @returns A promise that resolves when the transaction is successful
             */
            awaitTransactionSuccessAsync: function (assetData, amount, txData, pollingIntervalMs, timeoutMs) {
                var _this = this;
                assert_1.assert.isString('assetData', assetData);
                assert_1.assert.isBigNumber('amount', amount);
                var self = this;
                var txHashPromise = self.withdrawAsset.sendTransactionAsync(assetData, amount, txData);
                return new base_contract_1.PromiseWithTransactionHash(txHashPromise, (function () { return __awaiter(_this, void 0, void 0, function () {
                    var _a, _b;
                    return __generator(this, function (_c) {
                        switch (_c.label) {
                            case 0:
                                _b = (_a = self._web3Wrapper).awaitTransactionSuccessAsync;
                                return [4 /*yield*/, txHashPromise];
                            case 1: 
                            // When the transaction hash resolves, wait for it to be mined.
                            return [2 /*return*/, _b.apply(_a, [_c.sent(),
                                    pollingIntervalMs,
                                    timeoutMs])];
                        }
                    });
                }); })());
            },
            /**
             * Estimates the gas cost of sending an Ethereum transaction calling this method with these arguments.
             * @param assetData Byte array encoded for the respective asset proxy.
             * @param amount Amount of ERC20 token to withdraw.
             * @param txData Additional data for transaction
             * @returns The hash of the transaction
             */
            estimateGasAsync: function (assetData, amount, txData) {
                return __awaiter(this, void 0, void 0, function () {
                    var self, encodedData, txDataWithDefaults, gas;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                assert_1.assert.isString('assetData', assetData);
                                assert_1.assert.isBigNumber('amount', amount);
                                self = this;
                                encodedData = self._strictEncodeArguments('withdrawAsset(bytes,uint256)', [assetData, amount]);
                                return [4 /*yield*/, base_contract_1.BaseContract._applyDefaultsToTxDataAsync(__assign({ to: self.address }, txData, { data: encodedData }), self._web3Wrapper.getContractDefaults())];
                            case 1:
                                txDataWithDefaults = _a.sent();
                                if (txDataWithDefaults.from !== undefined) {
                                    txDataWithDefaults.from = txDataWithDefaults.from.toLowerCase();
                                }
                                return [4 /*yield*/, self._web3Wrapper.estimateGasAsync(txDataWithDefaults)];
                            case 2:
                                gas = _a.sent();
                                return [2 /*return*/, gas];
                        }
                    });
                });
            },
            validateAndSendTransactionAsync: function (assetData, amount, txData) {
                return __awaiter(this, void 0, void 0, function () {
                    var txHash;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this.withdrawAsset.callAsync(assetData, amount, txData)];
                            case 1:
                                _a.sent();
                                return [4 /*yield*/, this.withdrawAsset.sendTransactionAsync(assetData, amount, txData)];
                            case 2:
                                txHash = _a.sent();
                                return [2 /*return*/, txHash];
                        }
                    });
                });
            },
            /**
             * Sends a read-only call to the contract method. Returns the result that would happen if one were to send an
             * Ethereum transaction to this method, given the current state of the blockchain. Calls do not cost gas
             * since they don't modify state.
             * @param assetData Byte array encoded for the respective asset proxy.
             * @param amount Amount of ERC20 token to withdraw.
             */
            callAsync: function (assetData, amount, callData, defaultBlock) {
                if (callData === void 0) { callData = {}; }
                return __awaiter(this, void 0, void 0, function () {
                    var self, encodedData, callDataWithDefaults, rawCallResult, abiEncoder, result;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                assert_1.assert.isString('assetData', assetData);
                                assert_1.assert.isBigNumber('amount', amount);
                                assert_1.assert.doesConformToSchema('callData', callData, json_schemas_1.schemas.callDataSchema, [
                                    json_schemas_1.schemas.addressSchema,
                                    json_schemas_1.schemas.numberSchema,
                                    json_schemas_1.schemas.jsNumber,
                                ]);
                                if (defaultBlock !== undefined) {
                                    assert_1.assert.isBlockParam('defaultBlock', defaultBlock);
                                }
                                self = this;
                                encodedData = self._strictEncodeArguments('withdrawAsset(bytes,uint256)', [assetData, amount]);
                                return [4 /*yield*/, base_contract_1.BaseContract._applyDefaultsToTxDataAsync(__assign({ to: self.address }, callData, { data: encodedData }), self._web3Wrapper.getContractDefaults())];
                            case 1:
                                callDataWithDefaults = _a.sent();
                                callDataWithDefaults.from = callDataWithDefaults.from
                                    ? callDataWithDefaults.from.toLowerCase()
                                    : callDataWithDefaults.from;
                                return [4 /*yield*/, self._web3Wrapper.callAsync(callDataWithDefaults, defaultBlock)];
                            case 2:
                                rawCallResult = _a.sent();
                                base_contract_1.BaseContract._throwIfRevertWithReasonCallResult(rawCallResult);
                                abiEncoder = self._lookupAbiEncoder('withdrawAsset(bytes,uint256)');
                                result = abiEncoder.strictDecodeReturnValue(rawCallResult);
                                // tslint:enable boolean-naming
                                return [2 /*return*/, result];
                        }
                    });
                });
            },
            /**
             * Returns the ABI encoded transaction data needed to send an Ethereum transaction calling this method. Before
             * sending the Ethereum tx, this encoded tx data can first be sent to a separate signing service or can be used
             * to create a 0x transaction (see protocol spec for more details).
             * @param assetData Byte array encoded for the respective asset proxy.
             * @param amount Amount of ERC20 token to withdraw.
             * @returns The ABI encoded transaction data as a string
             */
            getABIEncodedTransactionData: function (assetData, amount) {
                assert_1.assert.isString('assetData', assetData);
                assert_1.assert.isBigNumber('amount', amount);
                var self = this;
                var abiEncodedTransactionData = self._strictEncodeArguments('withdrawAsset(bytes,uint256)', [
                    assetData,
                    amount,
                ]);
                return abiEncodedTransactionData;
            },
            /**
             * Decode the ABI-encoded transaction data into its input arguments
             * @param callData The ABI-encoded transaction data
             * @returns An array representing the input arguments in order. Keynames of nested structs are preserved.
             */
            getABIDecodedTransactionData: function (callData) {
                var self = this;
                var abiEncoder = self._lookupAbiEncoder('withdrawAsset(bytes,uint256)');
                // tslint:disable boolean-naming
                var abiDecodedCallData = abiEncoder.strictDecode(callData);
                return abiDecodedCallData;
            },
            /**
             * Decode the ABI-encoded return data from a transaction
             * @param returnData the data returned after transaction execution
             * @returns An array representing the output results in order.  Keynames of nested structs are preserved.
             */
            getABIDecodedReturnData: function (returnData) {
                var self = this;
                var abiEncoder = self._lookupAbiEncoder('withdrawAsset(bytes,uint256)');
                // tslint:disable boolean-naming
                var abiDecodedReturnData = abiEncoder.strictDecodeReturnValue(returnData);
                return abiDecodedReturnData;
            },
        };
        _this.owner = {
            /**
             * Sends a read-only call to the contract method. Returns the result that would happen if one were to send an
             * Ethereum transaction to this method, given the current state of the blockchain. Calls do not cost gas
             * since they don't modify state.
             */
            callAsync: function (callData, defaultBlock) {
                if (callData === void 0) { callData = {}; }
                return __awaiter(this, void 0, void 0, function () {
                    var self, encodedData, callDataWithDefaults, rawCallResult, abiEncoder, result;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                assert_1.assert.doesConformToSchema('callData', callData, json_schemas_1.schemas.callDataSchema, [
                                    json_schemas_1.schemas.addressSchema,
                                    json_schemas_1.schemas.numberSchema,
                                    json_schemas_1.schemas.jsNumber,
                                ]);
                                if (defaultBlock !== undefined) {
                                    assert_1.assert.isBlockParam('defaultBlock', defaultBlock);
                                }
                                self = this;
                                encodedData = self._strictEncodeArguments('owner()', []);
                                return [4 /*yield*/, base_contract_1.BaseContract._applyDefaultsToTxDataAsync(__assign({ to: self.address }, callData, { data: encodedData }), self._web3Wrapper.getContractDefaults())];
                            case 1:
                                callDataWithDefaults = _a.sent();
                                callDataWithDefaults.from = callDataWithDefaults.from
                                    ? callDataWithDefaults.from.toLowerCase()
                                    : callDataWithDefaults.from;
                                return [4 /*yield*/, self._web3Wrapper.callAsync(callDataWithDefaults, defaultBlock)];
                            case 2:
                                rawCallResult = _a.sent();
                                base_contract_1.BaseContract._throwIfRevertWithReasonCallResult(rawCallResult);
                                abiEncoder = self._lookupAbiEncoder('owner()');
                                result = abiEncoder.strictDecodeReturnValue(rawCallResult);
                                // tslint:enable boolean-naming
                                return [2 /*return*/, result];
                        }
                    });
                });
            },
            /**
             * Returns the ABI encoded transaction data needed to send an Ethereum transaction calling this method. Before
             * sending the Ethereum tx, this encoded tx data can first be sent to a separate signing service or can be used
             * to create a 0x transaction (see protocol spec for more details).
             * @returns The ABI encoded transaction data as a string
             */
            getABIEncodedTransactionData: function () {
                var self = this;
                var abiEncodedTransactionData = self._strictEncodeArguments('owner()', []);
                return abiEncodedTransactionData;
            },
            /**
             * Decode the ABI-encoded transaction data into its input arguments
             * @param callData The ABI-encoded transaction data
             * @returns An array representing the input arguments in order. Keynames of nested structs are preserved.
             */
            getABIDecodedTransactionData: function (callData) {
                var self = this;
                var abiEncoder = self._lookupAbiEncoder('owner()');
                // tslint:disable boolean-naming
                var abiDecodedCallData = abiEncoder.strictDecode(callData);
                return abiDecodedCallData;
            },
            /**
             * Decode the ABI-encoded return data from a transaction
             * @param returnData the data returned after transaction execution
             * @returns An array representing the output results in order.  Keynames of nested structs are preserved.
             */
            getABIDecodedReturnData: function (returnData) {
                var self = this;
                var abiEncoder = self._lookupAbiEncoder('owner()');
                // tslint:disable boolean-naming
                var abiDecodedReturnData = abiEncoder.strictDecodeReturnValue(returnData);
                return abiDecodedReturnData;
            },
        };
        /**
         * Purchases as much of orders' makerAssets as possible by selling up to 95% of transaction's ETH value.
         * Any ZRX required to pay fees for primary orders will automatically be purchased by this contract.
         * 5% of ETH value is reserved for paying fees to order feeRecipients (in ZRX) and forwarding contract feeRecipient (in ETH).
         * Any ETH not spent will be refunded to sender.
         */
        _this.marketSellOrdersWithEth = {
            /**
             * Sends an Ethereum transaction executing this method with the supplied parameters. This is a read/write
             * Ethereum operation and will cost gas.
             * @param orders Array of order specifications used containing desired
             *     makerAsset and WETH as takerAsset.
             * @param signatures Proofs that orders have been created by makers.
             * @param feeOrders Array of order specifications containing ZRX as makerAsset
             *     and WETH as takerAsset. Used to purchase ZRX for primary order fees.
             * @param feeSignatures Proofs that feeOrders have been created by makers.
             * @param feePercentage Percentage of WETH sold that will payed as fee to
             *     forwarding contract feeRecipient.
             * @param feeRecipient Address that will receive ETH when orders are filled.
             * @param txData Additional data for transaction
             * @returns The hash of the transaction
             */
            sendTransactionAsync: function (orders, signatures, feeOrders, feeSignatures, feePercentage, feeRecipient, txData) {
                return __awaiter(this, void 0, void 0, function () {
                    var self, encodedData, txDataWithDefaults, txHash;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                assert_1.assert.isArray('orders', orders);
                                assert_1.assert.isArray('signatures', signatures);
                                assert_1.assert.isArray('feeOrders', feeOrders);
                                assert_1.assert.isArray('feeSignatures', feeSignatures);
                                assert_1.assert.isBigNumber('feePercentage', feePercentage);
                                assert_1.assert.isString('feeRecipient', feeRecipient);
                                self = this;
                                encodedData = self._strictEncodeArguments('marketSellOrdersWithEth((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],bytes[],(address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],bytes[],uint256,address)', [orders, signatures, feeOrders, feeSignatures, feePercentage, feeRecipient.toLowerCase()]);
                                return [4 /*yield*/, base_contract_1.BaseContract._applyDefaultsToTxDataAsync(__assign({ to: self.address }, txData, { data: encodedData }), self._web3Wrapper.getContractDefaults(), self.marketSellOrdersWithEth.estimateGasAsync.bind(self, orders, signatures, feeOrders, feeSignatures, feePercentage, feeRecipient.toLowerCase()))];
                            case 1:
                                txDataWithDefaults = _a.sent();
                                if (txDataWithDefaults.from !== undefined) {
                                    txDataWithDefaults.from = txDataWithDefaults.from.toLowerCase();
                                }
                                return [4 /*yield*/, self._web3Wrapper.sendTransactionAsync(txDataWithDefaults)];
                            case 2:
                                txHash = _a.sent();
                                return [2 /*return*/, txHash];
                        }
                    });
                });
            },
            /**
             * Sends an Ethereum transaction and waits until the transaction has been successfully mined without reverting.
             * If the transaction was mined, but reverted, an error is thrown.
             * @param orders Array of order specifications used containing desired
             *     makerAsset and WETH as takerAsset.
             * @param signatures Proofs that orders have been created by makers.
             * @param feeOrders Array of order specifications containing ZRX as makerAsset
             *     and WETH as takerAsset. Used to purchase ZRX for primary order fees.
             * @param feeSignatures Proofs that feeOrders have been created by makers.
             * @param feePercentage Percentage of WETH sold that will payed as fee to
             *     forwarding contract feeRecipient.
             * @param feeRecipient Address that will receive ETH when orders are filled.
             * @param txData Additional data for transaction
             * @param pollingIntervalMs Interval at which to poll for success
             * @returns A promise that resolves when the transaction is successful
             */
            awaitTransactionSuccessAsync: function (orders, signatures, feeOrders, feeSignatures, feePercentage, feeRecipient, txData, pollingIntervalMs, timeoutMs) {
                var _this = this;
                assert_1.assert.isArray('orders', orders);
                assert_1.assert.isArray('signatures', signatures);
                assert_1.assert.isArray('feeOrders', feeOrders);
                assert_1.assert.isArray('feeSignatures', feeSignatures);
                assert_1.assert.isBigNumber('feePercentage', feePercentage);
                assert_1.assert.isString('feeRecipient', feeRecipient);
                var self = this;
                var txHashPromise = self.marketSellOrdersWithEth.sendTransactionAsync(orders, signatures, feeOrders, feeSignatures, feePercentage, feeRecipient.toLowerCase(), txData);
                return new base_contract_1.PromiseWithTransactionHash(txHashPromise, (function () { return __awaiter(_this, void 0, void 0, function () {
                    var _a, _b;
                    return __generator(this, function (_c) {
                        switch (_c.label) {
                            case 0:
                                _b = (_a = self._web3Wrapper).awaitTransactionSuccessAsync;
                                return [4 /*yield*/, txHashPromise];
                            case 1: 
                            // When the transaction hash resolves, wait for it to be mined.
                            return [2 /*return*/, _b.apply(_a, [_c.sent(),
                                    pollingIntervalMs,
                                    timeoutMs])];
                        }
                    });
                }); })());
            },
            /**
             * Estimates the gas cost of sending an Ethereum transaction calling this method with these arguments.
             * @param orders Array of order specifications used containing desired
             *     makerAsset and WETH as takerAsset.
             * @param signatures Proofs that orders have been created by makers.
             * @param feeOrders Array of order specifications containing ZRX as makerAsset
             *     and WETH as takerAsset. Used to purchase ZRX for primary order fees.
             * @param feeSignatures Proofs that feeOrders have been created by makers.
             * @param feePercentage Percentage of WETH sold that will payed as fee to
             *     forwarding contract feeRecipient.
             * @param feeRecipient Address that will receive ETH when orders are filled.
             * @param txData Additional data for transaction
             * @returns The hash of the transaction
             */
            estimateGasAsync: function (orders, signatures, feeOrders, feeSignatures, feePercentage, feeRecipient, txData) {
                return __awaiter(this, void 0, void 0, function () {
                    var self, encodedData, txDataWithDefaults, gas;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                assert_1.assert.isArray('orders', orders);
                                assert_1.assert.isArray('signatures', signatures);
                                assert_1.assert.isArray('feeOrders', feeOrders);
                                assert_1.assert.isArray('feeSignatures', feeSignatures);
                                assert_1.assert.isBigNumber('feePercentage', feePercentage);
                                assert_1.assert.isString('feeRecipient', feeRecipient);
                                self = this;
                                encodedData = self._strictEncodeArguments('marketSellOrdersWithEth((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],bytes[],(address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],bytes[],uint256,address)', [orders, signatures, feeOrders, feeSignatures, feePercentage, feeRecipient.toLowerCase()]);
                                return [4 /*yield*/, base_contract_1.BaseContract._applyDefaultsToTxDataAsync(__assign({ to: self.address }, txData, { data: encodedData }), self._web3Wrapper.getContractDefaults())];
                            case 1:
                                txDataWithDefaults = _a.sent();
                                if (txDataWithDefaults.from !== undefined) {
                                    txDataWithDefaults.from = txDataWithDefaults.from.toLowerCase();
                                }
                                return [4 /*yield*/, self._web3Wrapper.estimateGasAsync(txDataWithDefaults)];
                            case 2:
                                gas = _a.sent();
                                return [2 /*return*/, gas];
                        }
                    });
                });
            },
            validateAndSendTransactionAsync: function (orders, signatures, feeOrders, feeSignatures, feePercentage, feeRecipient, txData) {
                return __awaiter(this, void 0, void 0, function () {
                    var txHash;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this.marketSellOrdersWithEth.callAsync(orders, signatures, feeOrders, feeSignatures, feePercentage, feeRecipient, txData)];
                            case 1:
                                _a.sent();
                                return [4 /*yield*/, this.marketSellOrdersWithEth.sendTransactionAsync(orders, signatures, feeOrders, feeSignatures, feePercentage, feeRecipient, txData)];
                            case 2:
                                txHash = _a.sent();
                                return [2 /*return*/, txHash];
                        }
                    });
                });
            },
            /**
             * Sends a read-only call to the contract method. Returns the result that would happen if one were to send an
             * Ethereum transaction to this method, given the current state of the blockchain. Calls do not cost gas
             * since they don't modify state.
             * @param orders Array of order specifications used containing desired
             *     makerAsset and WETH as takerAsset.
             * @param signatures Proofs that orders have been created by makers.
             * @param feeOrders Array of order specifications containing ZRX as makerAsset
             *     and WETH as takerAsset. Used to purchase ZRX for primary order fees.
             * @param feeSignatures Proofs that feeOrders have been created by makers.
             * @param feePercentage Percentage of WETH sold that will payed as fee to
             *     forwarding contract feeRecipient.
             * @param feeRecipient Address that will receive ETH when orders are filled.
             * @returns Amounts filled and fees paid by maker and taker for both sets of orders.
             */
            callAsync: function (orders, signatures, feeOrders, feeSignatures, feePercentage, feeRecipient, callData, defaultBlock) {
                if (callData === void 0) { callData = {}; }
                return __awaiter(this, void 0, void 0, function () {
                    var self, encodedData, callDataWithDefaults, rawCallResult, abiEncoder, result;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                assert_1.assert.isArray('orders', orders);
                                assert_1.assert.isArray('signatures', signatures);
                                assert_1.assert.isArray('feeOrders', feeOrders);
                                assert_1.assert.isArray('feeSignatures', feeSignatures);
                                assert_1.assert.isBigNumber('feePercentage', feePercentage);
                                assert_1.assert.isString('feeRecipient', feeRecipient);
                                assert_1.assert.doesConformToSchema('callData', callData, json_schemas_1.schemas.callDataSchema, [
                                    json_schemas_1.schemas.addressSchema,
                                    json_schemas_1.schemas.numberSchema,
                                    json_schemas_1.schemas.jsNumber,
                                ]);
                                if (defaultBlock !== undefined) {
                                    assert_1.assert.isBlockParam('defaultBlock', defaultBlock);
                                }
                                self = this;
                                encodedData = self._strictEncodeArguments('marketSellOrdersWithEth((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],bytes[],(address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],bytes[],uint256,address)', [orders, signatures, feeOrders, feeSignatures, feePercentage, feeRecipient.toLowerCase()]);
                                return [4 /*yield*/, base_contract_1.BaseContract._applyDefaultsToTxDataAsync(__assign({ to: self.address }, callData, { data: encodedData }), self._web3Wrapper.getContractDefaults())];
                            case 1:
                                callDataWithDefaults = _a.sent();
                                callDataWithDefaults.from = callDataWithDefaults.from
                                    ? callDataWithDefaults.from.toLowerCase()
                                    : callDataWithDefaults.from;
                                return [4 /*yield*/, self._web3Wrapper.callAsync(callDataWithDefaults, defaultBlock)];
                            case 2:
                                rawCallResult = _a.sent();
                                base_contract_1.BaseContract._throwIfRevertWithReasonCallResult(rawCallResult);
                                abiEncoder = self._lookupAbiEncoder('marketSellOrdersWithEth((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],bytes[],(address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],bytes[],uint256,address)');
                                result = abiEncoder.strictDecodeReturnValue(rawCallResult);
                                // tslint:enable boolean-naming
                                return [2 /*return*/, result];
                        }
                    });
                });
            },
            /**
             * Returns the ABI encoded transaction data needed to send an Ethereum transaction calling this method. Before
             * sending the Ethereum tx, this encoded tx data can first be sent to a separate signing service or can be used
             * to create a 0x transaction (see protocol spec for more details).
             * @param orders Array of order specifications used containing desired
             *     makerAsset and WETH as takerAsset.
             * @param signatures Proofs that orders have been created by makers.
             * @param feeOrders Array of order specifications containing ZRX as makerAsset
             *     and WETH as takerAsset. Used to purchase ZRX for primary order fees.
             * @param feeSignatures Proofs that feeOrders have been created by makers.
             * @param feePercentage Percentage of WETH sold that will payed as fee to
             *     forwarding contract feeRecipient.
             * @param feeRecipient Address that will receive ETH when orders are filled.
             * @returns The ABI encoded transaction data as a string
             */
            getABIEncodedTransactionData: function (orders, signatures, feeOrders, feeSignatures, feePercentage, feeRecipient) {
                assert_1.assert.isArray('orders', orders);
                assert_1.assert.isArray('signatures', signatures);
                assert_1.assert.isArray('feeOrders', feeOrders);
                assert_1.assert.isArray('feeSignatures', feeSignatures);
                assert_1.assert.isBigNumber('feePercentage', feePercentage);
                assert_1.assert.isString('feeRecipient', feeRecipient);
                var self = this;
                var abiEncodedTransactionData = self._strictEncodeArguments('marketSellOrdersWithEth((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],bytes[],(address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],bytes[],uint256,address)', [orders, signatures, feeOrders, feeSignatures, feePercentage, feeRecipient.toLowerCase()]);
                return abiEncodedTransactionData;
            },
            /**
             * Decode the ABI-encoded transaction data into its input arguments
             * @param callData The ABI-encoded transaction data
             * @returns An array representing the input arguments in order. Keynames of nested structs are preserved.
             */
            getABIDecodedTransactionData: function (callData) {
                var self = this;
                var abiEncoder = self._lookupAbiEncoder('marketSellOrdersWithEth((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],bytes[],(address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],bytes[],uint256,address)');
                // tslint:disable boolean-naming
                var abiDecodedCallData = abiEncoder.strictDecode(callData);
                return abiDecodedCallData;
            },
            /**
             * Decode the ABI-encoded return data from a transaction
             * @param returnData the data returned after transaction execution
             * @returns An array representing the output results in order.  Keynames of nested structs are preserved.
             */
            getABIDecodedReturnData: function (returnData) {
                var self = this;
                var abiEncoder = self._lookupAbiEncoder('marketSellOrdersWithEth((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],bytes[],(address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],bytes[],uint256,address)');
                // tslint:disable boolean-naming
                var abiDecodedReturnData = abiEncoder.strictDecodeReturnValue(returnData);
                return abiDecodedReturnData;
            },
        };
        _this.transferOwnership = {
            /**
             * Sends an Ethereum transaction executing this method with the supplied parameters. This is a read/write
             * Ethereum operation and will cost gas.
             * @param txData Additional data for transaction
             * @returns The hash of the transaction
             */
            sendTransactionAsync: function (newOwner, txData) {
                return __awaiter(this, void 0, void 0, function () {
                    var self, encodedData, txDataWithDefaults, txHash;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                assert_1.assert.isString('newOwner', newOwner);
                                self = this;
                                encodedData = self._strictEncodeArguments('transferOwnership(address)', [newOwner.toLowerCase()]);
                                return [4 /*yield*/, base_contract_1.BaseContract._applyDefaultsToTxDataAsync(__assign({ to: self.address }, txData, { data: encodedData }), self._web3Wrapper.getContractDefaults(), self.transferOwnership.estimateGasAsync.bind(self, newOwner.toLowerCase()))];
                            case 1:
                                txDataWithDefaults = _a.sent();
                                if (txDataWithDefaults.from !== undefined) {
                                    txDataWithDefaults.from = txDataWithDefaults.from.toLowerCase();
                                }
                                return [4 /*yield*/, self._web3Wrapper.sendTransactionAsync(txDataWithDefaults)];
                            case 2:
                                txHash = _a.sent();
                                return [2 /*return*/, txHash];
                        }
                    });
                });
            },
            /**
             * Sends an Ethereum transaction and waits until the transaction has been successfully mined without reverting.
             * If the transaction was mined, but reverted, an error is thrown.
             * @param txData Additional data for transaction
             * @param pollingIntervalMs Interval at which to poll for success
             * @returns A promise that resolves when the transaction is successful
             */
            awaitTransactionSuccessAsync: function (newOwner, txData, pollingIntervalMs, timeoutMs) {
                var _this = this;
                assert_1.assert.isString('newOwner', newOwner);
                var self = this;
                var txHashPromise = self.transferOwnership.sendTransactionAsync(newOwner.toLowerCase(), txData);
                return new base_contract_1.PromiseWithTransactionHash(txHashPromise, (function () { return __awaiter(_this, void 0, void 0, function () {
                    var _a, _b;
                    return __generator(this, function (_c) {
                        switch (_c.label) {
                            case 0:
                                _b = (_a = self._web3Wrapper).awaitTransactionSuccessAsync;
                                return [4 /*yield*/, txHashPromise];
                            case 1: 
                            // When the transaction hash resolves, wait for it to be mined.
                            return [2 /*return*/, _b.apply(_a, [_c.sent(),
                                    pollingIntervalMs,
                                    timeoutMs])];
                        }
                    });
                }); })());
            },
            /**
             * Estimates the gas cost of sending an Ethereum transaction calling this method with these arguments.
             * @param txData Additional data for transaction
             * @returns The hash of the transaction
             */
            estimateGasAsync: function (newOwner, txData) {
                return __awaiter(this, void 0, void 0, function () {
                    var self, encodedData, txDataWithDefaults, gas;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                assert_1.assert.isString('newOwner', newOwner);
                                self = this;
                                encodedData = self._strictEncodeArguments('transferOwnership(address)', [newOwner.toLowerCase()]);
                                return [4 /*yield*/, base_contract_1.BaseContract._applyDefaultsToTxDataAsync(__assign({ to: self.address }, txData, { data: encodedData }), self._web3Wrapper.getContractDefaults())];
                            case 1:
                                txDataWithDefaults = _a.sent();
                                if (txDataWithDefaults.from !== undefined) {
                                    txDataWithDefaults.from = txDataWithDefaults.from.toLowerCase();
                                }
                                return [4 /*yield*/, self._web3Wrapper.estimateGasAsync(txDataWithDefaults)];
                            case 2:
                                gas = _a.sent();
                                return [2 /*return*/, gas];
                        }
                    });
                });
            },
            validateAndSendTransactionAsync: function (newOwner, txData) {
                return __awaiter(this, void 0, void 0, function () {
                    var txHash;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this.transferOwnership.callAsync(newOwner, txData)];
                            case 1:
                                _a.sent();
                                return [4 /*yield*/, this.transferOwnership.sendTransactionAsync(newOwner, txData)];
                            case 2:
                                txHash = _a.sent();
                                return [2 /*return*/, txHash];
                        }
                    });
                });
            },
            /**
             * Sends a read-only call to the contract method. Returns the result that would happen if one were to send an
             * Ethereum transaction to this method, given the current state of the blockchain. Calls do not cost gas
             * since they don't modify state.
             */
            callAsync: function (newOwner, callData, defaultBlock) {
                if (callData === void 0) { callData = {}; }
                return __awaiter(this, void 0, void 0, function () {
                    var self, encodedData, callDataWithDefaults, rawCallResult, abiEncoder, result;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                assert_1.assert.isString('newOwner', newOwner);
                                assert_1.assert.doesConformToSchema('callData', callData, json_schemas_1.schemas.callDataSchema, [
                                    json_schemas_1.schemas.addressSchema,
                                    json_schemas_1.schemas.numberSchema,
                                    json_schemas_1.schemas.jsNumber,
                                ]);
                                if (defaultBlock !== undefined) {
                                    assert_1.assert.isBlockParam('defaultBlock', defaultBlock);
                                }
                                self = this;
                                encodedData = self._strictEncodeArguments('transferOwnership(address)', [newOwner.toLowerCase()]);
                                return [4 /*yield*/, base_contract_1.BaseContract._applyDefaultsToTxDataAsync(__assign({ to: self.address }, callData, { data: encodedData }), self._web3Wrapper.getContractDefaults())];
                            case 1:
                                callDataWithDefaults = _a.sent();
                                callDataWithDefaults.from = callDataWithDefaults.from
                                    ? callDataWithDefaults.from.toLowerCase()
                                    : callDataWithDefaults.from;
                                return [4 /*yield*/, self._web3Wrapper.callAsync(callDataWithDefaults, defaultBlock)];
                            case 2:
                                rawCallResult = _a.sent();
                                base_contract_1.BaseContract._throwIfRevertWithReasonCallResult(rawCallResult);
                                abiEncoder = self._lookupAbiEncoder('transferOwnership(address)');
                                result = abiEncoder.strictDecodeReturnValue(rawCallResult);
                                // tslint:enable boolean-naming
                                return [2 /*return*/, result];
                        }
                    });
                });
            },
            /**
             * Returns the ABI encoded transaction data needed to send an Ethereum transaction calling this method. Before
             * sending the Ethereum tx, this encoded tx data can first be sent to a separate signing service or can be used
             * to create a 0x transaction (see protocol spec for more details).
             * @returns The ABI encoded transaction data as a string
             */
            getABIEncodedTransactionData: function (newOwner) {
                assert_1.assert.isString('newOwner', newOwner);
                var self = this;
                var abiEncodedTransactionData = self._strictEncodeArguments('transferOwnership(address)', [
                    newOwner.toLowerCase(),
                ]);
                return abiEncodedTransactionData;
            },
            /**
             * Decode the ABI-encoded transaction data into its input arguments
             * @param callData The ABI-encoded transaction data
             * @returns An array representing the input arguments in order. Keynames of nested structs are preserved.
             */
            getABIDecodedTransactionData: function (callData) {
                var self = this;
                var abiEncoder = self._lookupAbiEncoder('transferOwnership(address)');
                // tslint:disable boolean-naming
                var abiDecodedCallData = abiEncoder.strictDecode(callData);
                return abiDecodedCallData;
            },
            /**
             * Decode the ABI-encoded return data from a transaction
             * @param returnData the data returned after transaction execution
             * @returns An array representing the output results in order.  Keynames of nested structs are preserved.
             */
            getABIDecodedReturnData: function (returnData) {
                var self = this;
                var abiEncoder = self._lookupAbiEncoder('transferOwnership(address)');
                // tslint:disable boolean-naming
                var abiDecodedReturnData = abiEncoder.strictDecodeReturnValue(returnData);
                return abiDecodedReturnData;
            },
        };
        utils_1.classUtils.bindAll(_this, ['_abiEncoderByFunctionSignature', 'address', '_web3Wrapper']);
        return _this;
    }
    ForwarderContract.deployFrom0xArtifactAsync = function (artifact, supportedProvider, txDefaults, logDecodeDependencies, _exchange, _zrxAssetData, _wethAssetData) {
        return __awaiter(this, void 0, void 0, function () {
            var e_1, _a, provider, bytecode, abi, logDecodeDependenciesAbiOnly, _b, _c, key;
            return __generator(this, function (_d) {
                assert_1.assert.doesConformToSchema('txDefaults', txDefaults, json_schemas_1.schemas.txDataSchema, [
                    json_schemas_1.schemas.addressSchema,
                    json_schemas_1.schemas.numberSchema,
                    json_schemas_1.schemas.jsNumber,
                ]);
                if (artifact.compilerOutput === undefined) {
                    throw new Error('Compiler output not found in the artifact file');
                }
                provider = utils_1.providerUtils.standardizeOrThrow(supportedProvider);
                bytecode = artifact.compilerOutput.evm.bytecode.object;
                abi = artifact.compilerOutput.abi;
                logDecodeDependenciesAbiOnly = {};
                if (Object.keys(logDecodeDependencies) !== undefined) {
                    try {
                        for (_b = __values(Object.keys(logDecodeDependencies)), _c = _b.next(); !_c.done; _c = _b.next()) {
                            key = _c.value;
                            logDecodeDependenciesAbiOnly[key] = logDecodeDependencies[key].compilerOutput.abi;
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
                return [2 /*return*/, ForwarderContract.deployAsync(bytecode, abi, provider, txDefaults, logDecodeDependenciesAbiOnly, _exchange, _zrxAssetData, _wethAssetData)];
            });
        });
    };
    ForwarderContract.deployAsync = function (bytecode, abi, supportedProvider, txDefaults, logDecodeDependencies, _exchange, _zrxAssetData, _wethAssetData) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, provider, constructorAbi, iface, deployInfo, txData, web3Wrapper, txDataWithDefaults, txHash, txReceipt, contractInstance;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        assert_1.assert.isHexString('bytecode', bytecode);
                        assert_1.assert.doesConformToSchema('txDefaults', txDefaults, json_schemas_1.schemas.txDataSchema, [
                            json_schemas_1.schemas.addressSchema,
                            json_schemas_1.schemas.numberSchema,
                            json_schemas_1.schemas.jsNumber,
                        ]);
                        provider = utils_1.providerUtils.standardizeOrThrow(supportedProvider);
                        constructorAbi = base_contract_1.BaseContract._lookupConstructorAbi(abi);
                        _a = __read(base_contract_1.BaseContract._formatABIDataItemList(constructorAbi.inputs, [_exchange, _zrxAssetData, _wethAssetData], base_contract_1.BaseContract._bigNumberToString), 3), _exchange = _a[0], _zrxAssetData = _a[1], _wethAssetData = _a[2];
                        iface = new ethers.utils.Interface(abi);
                        deployInfo = iface.deployFunction;
                        txData = deployInfo.encode(bytecode, [_exchange, _zrxAssetData, _wethAssetData]);
                        web3Wrapper = new web3_wrapper_1.Web3Wrapper(provider);
                        return [4 /*yield*/, base_contract_1.BaseContract._applyDefaultsToTxDataAsync({ data: txData }, txDefaults, web3Wrapper.estimateGasAsync.bind(web3Wrapper))];
                    case 1:
                        txDataWithDefaults = _b.sent();
                        return [4 /*yield*/, web3Wrapper.sendTransactionAsync(txDataWithDefaults)];
                    case 2:
                        txHash = _b.sent();
                        utils_1.logUtils.log("transactionHash: " + txHash);
                        return [4 /*yield*/, web3Wrapper.awaitTransactionSuccessAsync(txHash)];
                    case 3:
                        txReceipt = _b.sent();
                        utils_1.logUtils.log("Forwarder successfully deployed at " + txReceipt.contractAddress);
                        contractInstance = new ForwarderContract(txReceipt.contractAddress, provider, txDefaults, logDecodeDependencies);
                        contractInstance.constructorArgs = [_exchange, _zrxAssetData, _wethAssetData];
                        return [2 /*return*/, contractInstance];
                }
            });
        });
    };
    /**
     * @returns      The contract ABI
     */
    ForwarderContract.ABI = function () {
        var abi = [
            {
                constant: false,
                inputs: [
                    {
                        name: 'orders',
                        type: 'tuple[]',
                        components: [
                            {
                                name: 'makerAddress',
                                type: 'address',
                            },
                            {
                                name: 'takerAddress',
                                type: 'address',
                            },
                            {
                                name: 'feeRecipientAddress',
                                type: 'address',
                            },
                            {
                                name: 'senderAddress',
                                type: 'address',
                            },
                            {
                                name: 'makerAssetAmount',
                                type: 'uint256',
                            },
                            {
                                name: 'takerAssetAmount',
                                type: 'uint256',
                            },
                            {
                                name: 'makerFee',
                                type: 'uint256',
                            },
                            {
                                name: 'takerFee',
                                type: 'uint256',
                            },
                            {
                                name: 'expirationTimeSeconds',
                                type: 'uint256',
                            },
                            {
                                name: 'salt',
                                type: 'uint256',
                            },
                            {
                                name: 'makerAssetData',
                                type: 'bytes',
                            },
                            {
                                name: 'takerAssetData',
                                type: 'bytes',
                            },
                        ],
                    },
                    {
                        name: 'makerAssetFillAmount',
                        type: 'uint256',
                    },
                    {
                        name: 'signatures',
                        type: 'bytes[]',
                    },
                    {
                        name: 'feeOrders',
                        type: 'tuple[]',
                        components: [
                            {
                                name: 'makerAddress',
                                type: 'address',
                            },
                            {
                                name: 'takerAddress',
                                type: 'address',
                            },
                            {
                                name: 'feeRecipientAddress',
                                type: 'address',
                            },
                            {
                                name: 'senderAddress',
                                type: 'address',
                            },
                            {
                                name: 'makerAssetAmount',
                                type: 'uint256',
                            },
                            {
                                name: 'takerAssetAmount',
                                type: 'uint256',
                            },
                            {
                                name: 'makerFee',
                                type: 'uint256',
                            },
                            {
                                name: 'takerFee',
                                type: 'uint256',
                            },
                            {
                                name: 'expirationTimeSeconds',
                                type: 'uint256',
                            },
                            {
                                name: 'salt',
                                type: 'uint256',
                            },
                            {
                                name: 'makerAssetData',
                                type: 'bytes',
                            },
                            {
                                name: 'takerAssetData',
                                type: 'bytes',
                            },
                        ],
                    },
                    {
                        name: 'feeSignatures',
                        type: 'bytes[]',
                    },
                    {
                        name: 'feePercentage',
                        type: 'uint256',
                    },
                    {
                        name: 'feeRecipient',
                        type: 'address',
                    },
                ],
                name: 'marketBuyOrdersWithEth',
                outputs: [
                    {
                        name: 'orderFillResults',
                        type: 'tuple',
                        components: [
                            {
                                name: 'makerAssetFilledAmount',
                                type: 'uint256',
                            },
                            {
                                name: 'takerAssetFilledAmount',
                                type: 'uint256',
                            },
                            {
                                name: 'makerFeePaid',
                                type: 'uint256',
                            },
                            {
                                name: 'takerFeePaid',
                                type: 'uint256',
                            },
                        ],
                    },
                    {
                        name: 'feeOrderFillResults',
                        type: 'tuple',
                        components: [
                            {
                                name: 'makerAssetFilledAmount',
                                type: 'uint256',
                            },
                            {
                                name: 'takerAssetFilledAmount',
                                type: 'uint256',
                            },
                            {
                                name: 'makerFeePaid',
                                type: 'uint256',
                            },
                            {
                                name: 'takerFeePaid',
                                type: 'uint256',
                            },
                        ],
                    },
                ],
                payable: true,
                stateMutability: 'payable',
                type: 'function',
            },
            {
                constant: false,
                inputs: [
                    {
                        name: 'assetData',
                        type: 'bytes',
                    },
                    {
                        name: 'amount',
                        type: 'uint256',
                    },
                ],
                name: 'withdrawAsset',
                outputs: [],
                payable: false,
                stateMutability: 'nonpayable',
                type: 'function',
            },
            {
                constant: true,
                inputs: [],
                name: 'owner',
                outputs: [
                    {
                        name: '',
                        type: 'address',
                    },
                ],
                payable: false,
                stateMutability: 'view',
                type: 'function',
            },
            {
                constant: false,
                inputs: [
                    {
                        name: 'orders',
                        type: 'tuple[]',
                        components: [
                            {
                                name: 'makerAddress',
                                type: 'address',
                            },
                            {
                                name: 'takerAddress',
                                type: 'address',
                            },
                            {
                                name: 'feeRecipientAddress',
                                type: 'address',
                            },
                            {
                                name: 'senderAddress',
                                type: 'address',
                            },
                            {
                                name: 'makerAssetAmount',
                                type: 'uint256',
                            },
                            {
                                name: 'takerAssetAmount',
                                type: 'uint256',
                            },
                            {
                                name: 'makerFee',
                                type: 'uint256',
                            },
                            {
                                name: 'takerFee',
                                type: 'uint256',
                            },
                            {
                                name: 'expirationTimeSeconds',
                                type: 'uint256',
                            },
                            {
                                name: 'salt',
                                type: 'uint256',
                            },
                            {
                                name: 'makerAssetData',
                                type: 'bytes',
                            },
                            {
                                name: 'takerAssetData',
                                type: 'bytes',
                            },
                        ],
                    },
                    {
                        name: 'signatures',
                        type: 'bytes[]',
                    },
                    {
                        name: 'feeOrders',
                        type: 'tuple[]',
                        components: [
                            {
                                name: 'makerAddress',
                                type: 'address',
                            },
                            {
                                name: 'takerAddress',
                                type: 'address',
                            },
                            {
                                name: 'feeRecipientAddress',
                                type: 'address',
                            },
                            {
                                name: 'senderAddress',
                                type: 'address',
                            },
                            {
                                name: 'makerAssetAmount',
                                type: 'uint256',
                            },
                            {
                                name: 'takerAssetAmount',
                                type: 'uint256',
                            },
                            {
                                name: 'makerFee',
                                type: 'uint256',
                            },
                            {
                                name: 'takerFee',
                                type: 'uint256',
                            },
                            {
                                name: 'expirationTimeSeconds',
                                type: 'uint256',
                            },
                            {
                                name: 'salt',
                                type: 'uint256',
                            },
                            {
                                name: 'makerAssetData',
                                type: 'bytes',
                            },
                            {
                                name: 'takerAssetData',
                                type: 'bytes',
                            },
                        ],
                    },
                    {
                        name: 'feeSignatures',
                        type: 'bytes[]',
                    },
                    {
                        name: 'feePercentage',
                        type: 'uint256',
                    },
                    {
                        name: 'feeRecipient',
                        type: 'address',
                    },
                ],
                name: 'marketSellOrdersWithEth',
                outputs: [
                    {
                        name: 'orderFillResults',
                        type: 'tuple',
                        components: [
                            {
                                name: 'makerAssetFilledAmount',
                                type: 'uint256',
                            },
                            {
                                name: 'takerAssetFilledAmount',
                                type: 'uint256',
                            },
                            {
                                name: 'makerFeePaid',
                                type: 'uint256',
                            },
                            {
                                name: 'takerFeePaid',
                                type: 'uint256',
                            },
                        ],
                    },
                    {
                        name: 'feeOrderFillResults',
                        type: 'tuple',
                        components: [
                            {
                                name: 'makerAssetFilledAmount',
                                type: 'uint256',
                            },
                            {
                                name: 'takerAssetFilledAmount',
                                type: 'uint256',
                            },
                            {
                                name: 'makerFeePaid',
                                type: 'uint256',
                            },
                            {
                                name: 'takerFeePaid',
                                type: 'uint256',
                            },
                        ],
                    },
                ],
                payable: true,
                stateMutability: 'payable',
                type: 'function',
            },
            {
                constant: false,
                inputs: [
                    {
                        name: 'newOwner',
                        type: 'address',
                    },
                ],
                name: 'transferOwnership',
                outputs: [],
                payable: false,
                stateMutability: 'nonpayable',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: '_exchange',
                        type: 'address',
                    },
                    {
                        name: '_zrxAssetData',
                        type: 'bytes',
                    },
                    {
                        name: '_wethAssetData',
                        type: 'bytes',
                    },
                ],
                outputs: [],
                payable: false,
                stateMutability: 'nonpayable',
                type: 'constructor',
            },
            {
                inputs: [],
                outputs: [],
                payable: true,
                stateMutability: 'payable',
                type: 'fallback',
            },
        ];
        return abi;
    };
    return ForwarderContract;
}(base_contract_1.BaseContract));
exports.ForwarderContract = ForwarderContract;
// tslint:disable:max-file-line-count
// tslint:enable:no-unbound-method no-parameter-reassignment no-consecutive-blank-lines ordered-imports align
// tslint:enable:trailing-comma whitespace no-trailing-whitespace
//# sourceMappingURL=forwarder.js.map