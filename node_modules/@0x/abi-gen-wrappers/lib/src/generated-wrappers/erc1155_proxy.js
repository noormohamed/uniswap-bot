"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:no-consecutive-blank-lines ordered-imports align trailing-comma
// tslint:disable:whitespace no-unbound-method no-trailing-whitespace
// tslint:disable:no-unused-variable
var base_contract_1 = require("@0x/base-contract");
var json_schemas_1 = require("@0x/json-schemas");
var utils_1 = require("@0x/utils");
var web3_wrapper_1 = require("@0x/web3-wrapper");
var assert_1 = require("@0x/assert");
var ethers = require("ethers");
var ERC1155ProxyEvents;
(function (ERC1155ProxyEvents) {
    ERC1155ProxyEvents["AuthorizedAddressAdded"] = "AuthorizedAddressAdded";
    ERC1155ProxyEvents["AuthorizedAddressRemoved"] = "AuthorizedAddressRemoved";
})(ERC1155ProxyEvents = exports.ERC1155ProxyEvents || (exports.ERC1155ProxyEvents = {}));
/* istanbul ignore next */
// tslint:disable:no-parameter-reassignment
// tslint:disable-next-line:class-name
var ERC1155ProxyContract = /** @class */ (function (_super) {
    __extends(ERC1155ProxyContract, _super);
    function ERC1155ProxyContract(address, supportedProvider, txDefaults, logDecodeDependencies) {
        var _this = _super.call(this, 'ERC1155Proxy', ERC1155ProxyContract.ABI(), address, supportedProvider, txDefaults, logDecodeDependencies) || this;
        /**
         * Authorizes an address.
         */
        _this.addAuthorizedAddress = {
            /**
             * Sends an Ethereum transaction executing this method with the supplied parameters. This is a read/write
             * Ethereum operation and will cost gas.
             * @param target Address to authorize.
             * @param txData Additional data for transaction
             * @returns The hash of the transaction
             */
            sendTransactionAsync: function (target, txData) {
                return __awaiter(this, void 0, void 0, function () {
                    var self, encodedData, txDataWithDefaults, txHash;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                assert_1.assert.isString('target', target);
                                self = this;
                                encodedData = self._strictEncodeArguments('addAuthorizedAddress(address)', [target.toLowerCase()]);
                                return [4 /*yield*/, base_contract_1.BaseContract._applyDefaultsToTxDataAsync(__assign({ to: self.address }, txData, { data: encodedData }), self._web3Wrapper.getContractDefaults(), self.addAuthorizedAddress.estimateGasAsync.bind(self, target.toLowerCase()))];
                            case 1:
                                txDataWithDefaults = _a.sent();
                                if (txDataWithDefaults.from !== undefined) {
                                    txDataWithDefaults.from = txDataWithDefaults.from.toLowerCase();
                                }
                                return [4 /*yield*/, self._web3Wrapper.sendTransactionAsync(txDataWithDefaults)];
                            case 2:
                                txHash = _a.sent();
                                return [2 /*return*/, txHash];
                        }
                    });
                });
            },
            /**
             * Sends an Ethereum transaction and waits until the transaction has been successfully mined without reverting.
             * If the transaction was mined, but reverted, an error is thrown.
             * @param target Address to authorize.
             * @param txData Additional data for transaction
             * @param pollingIntervalMs Interval at which to poll for success
             * @returns A promise that resolves when the transaction is successful
             */
            awaitTransactionSuccessAsync: function (target, txData, pollingIntervalMs, timeoutMs) {
                var _this = this;
                assert_1.assert.isString('target', target);
                var self = this;
                var txHashPromise = self.addAuthorizedAddress.sendTransactionAsync(target.toLowerCase(), txData);
                return new base_contract_1.PromiseWithTransactionHash(txHashPromise, (function () { return __awaiter(_this, void 0, void 0, function () {
                    var _a, _b;
                    return __generator(this, function (_c) {
                        switch (_c.label) {
                            case 0:
                                _b = (_a = self._web3Wrapper).awaitTransactionSuccessAsync;
                                return [4 /*yield*/, txHashPromise];
                            case 1: 
                            // When the transaction hash resolves, wait for it to be mined.
                            return [2 /*return*/, _b.apply(_a, [_c.sent(),
                                    pollingIntervalMs,
                                    timeoutMs])];
                        }
                    });
                }); })());
            },
            /**
             * Estimates the gas cost of sending an Ethereum transaction calling this method with these arguments.
             * @param target Address to authorize.
             * @param txData Additional data for transaction
             * @returns The hash of the transaction
             */
            estimateGasAsync: function (target, txData) {
                return __awaiter(this, void 0, void 0, function () {
                    var self, encodedData, txDataWithDefaults, gas;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                assert_1.assert.isString('target', target);
                                self = this;
                                encodedData = self._strictEncodeArguments('addAuthorizedAddress(address)', [target.toLowerCase()]);
                                return [4 /*yield*/, base_contract_1.BaseContract._applyDefaultsToTxDataAsync(__assign({ to: self.address }, txData, { data: encodedData }), self._web3Wrapper.getContractDefaults())];
                            case 1:
                                txDataWithDefaults = _a.sent();
                                if (txDataWithDefaults.from !== undefined) {
                                    txDataWithDefaults.from = txDataWithDefaults.from.toLowerCase();
                                }
                                return [4 /*yield*/, self._web3Wrapper.estimateGasAsync(txDataWithDefaults)];
                            case 2:
                                gas = _a.sent();
                                return [2 /*return*/, gas];
                        }
                    });
                });
            },
            validateAndSendTransactionAsync: function (target, txData) {
                return __awaiter(this, void 0, void 0, function () {
                    var txHash;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this.addAuthorizedAddress.callAsync(target, txData)];
                            case 1:
                                _a.sent();
                                return [4 /*yield*/, this.addAuthorizedAddress.sendTransactionAsync(target, txData)];
                            case 2:
                                txHash = _a.sent();
                                return [2 /*return*/, txHash];
                        }
                    });
                });
            },
            /**
             * Sends a read-only call to the contract method. Returns the result that would happen if one were to send an
             * Ethereum transaction to this method, given the current state of the blockchain. Calls do not cost gas
             * since they don't modify state.
             * @param target Address to authorize.
             */
            callAsync: function (target, callData, defaultBlock) {
                if (callData === void 0) { callData = {}; }
                return __awaiter(this, void 0, void 0, function () {
                    var self, encodedData, callDataWithDefaults, rawCallResult, abiEncoder, result;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                assert_1.assert.isString('target', target);
                                assert_1.assert.doesConformToSchema('callData', callData, json_schemas_1.schemas.callDataSchema, [
                                    json_schemas_1.schemas.addressSchema,
                                    json_schemas_1.schemas.numberSchema,
                                    json_schemas_1.schemas.jsNumber,
                                ]);
                                if (defaultBlock !== undefined) {
                                    assert_1.assert.isBlockParam('defaultBlock', defaultBlock);
                                }
                                self = this;
                                encodedData = self._strictEncodeArguments('addAuthorizedAddress(address)', [target.toLowerCase()]);
                                return [4 /*yield*/, base_contract_1.BaseContract._applyDefaultsToTxDataAsync(__assign({ to: self.address }, callData, { data: encodedData }), self._web3Wrapper.getContractDefaults())];
                            case 1:
                                callDataWithDefaults = _a.sent();
                                callDataWithDefaults.from = callDataWithDefaults.from
                                    ? callDataWithDefaults.from.toLowerCase()
                                    : callDataWithDefaults.from;
                                return [4 /*yield*/, self._web3Wrapper.callAsync(callDataWithDefaults, defaultBlock)];
                            case 2:
                                rawCallResult = _a.sent();
                                base_contract_1.BaseContract._throwIfRevertWithReasonCallResult(rawCallResult);
                                abiEncoder = self._lookupAbiEncoder('addAuthorizedAddress(address)');
                                result = abiEncoder.strictDecodeReturnValue(rawCallResult);
                                // tslint:enable boolean-naming
                                return [2 /*return*/, result];
                        }
                    });
                });
            },
            /**
             * Returns the ABI encoded transaction data needed to send an Ethereum transaction calling this method. Before
             * sending the Ethereum tx, this encoded tx data can first be sent to a separate signing service or can be used
             * to create a 0x transaction (see protocol spec for more details).
             * @param target Address to authorize.
             * @returns The ABI encoded transaction data as a string
             */
            getABIEncodedTransactionData: function (target) {
                assert_1.assert.isString('target', target);
                var self = this;
                var abiEncodedTransactionData = self._strictEncodeArguments('addAuthorizedAddress(address)', [
                    target.toLowerCase(),
                ]);
                return abiEncodedTransactionData;
            },
            /**
             * Decode the ABI-encoded transaction data into its input arguments
             * @param callData The ABI-encoded transaction data
             * @returns An array representing the input arguments in order. Keynames of nested structs are preserved.
             */
            getABIDecodedTransactionData: function (callData) {
                var self = this;
                var abiEncoder = self._lookupAbiEncoder('addAuthorizedAddress(address)');
                // tslint:disable boolean-naming
                var abiDecodedCallData = abiEncoder.strictDecode(callData);
                return abiDecodedCallData;
            },
            /**
             * Decode the ABI-encoded return data from a transaction
             * @param returnData the data returned after transaction execution
             * @returns An array representing the output results in order.  Keynames of nested structs are preserved.
             */
            getABIDecodedReturnData: function (returnData) {
                var self = this;
                var abiEncoder = self._lookupAbiEncoder('addAuthorizedAddress(address)');
                // tslint:disable boolean-naming
                var abiDecodedReturnData = abiEncoder.strictDecodeReturnValue(returnData);
                return abiDecodedReturnData;
            },
        };
        _this.authorities = {
            /**
             * Sends a read-only call to the contract method. Returns the result that would happen if one were to send an
             * Ethereum transaction to this method, given the current state of the blockchain. Calls do not cost gas
             * since they don't modify state.
             */
            callAsync: function (index_0, callData, defaultBlock) {
                if (callData === void 0) { callData = {}; }
                return __awaiter(this, void 0, void 0, function () {
                    var self, encodedData, callDataWithDefaults, rawCallResult, abiEncoder, result;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                assert_1.assert.isBigNumber('index_0', index_0);
                                assert_1.assert.doesConformToSchema('callData', callData, json_schemas_1.schemas.callDataSchema, [
                                    json_schemas_1.schemas.addressSchema,
                                    json_schemas_1.schemas.numberSchema,
                                    json_schemas_1.schemas.jsNumber,
                                ]);
                                if (defaultBlock !== undefined) {
                                    assert_1.assert.isBlockParam('defaultBlock', defaultBlock);
                                }
                                self = this;
                                encodedData = self._strictEncodeArguments('authorities(uint256)', [index_0]);
                                return [4 /*yield*/, base_contract_1.BaseContract._applyDefaultsToTxDataAsync(__assign({ to: self.address }, callData, { data: encodedData }), self._web3Wrapper.getContractDefaults())];
                            case 1:
                                callDataWithDefaults = _a.sent();
                                callDataWithDefaults.from = callDataWithDefaults.from
                                    ? callDataWithDefaults.from.toLowerCase()
                                    : callDataWithDefaults.from;
                                return [4 /*yield*/, self._web3Wrapper.callAsync(callDataWithDefaults, defaultBlock)];
                            case 2:
                                rawCallResult = _a.sent();
                                base_contract_1.BaseContract._throwIfRevertWithReasonCallResult(rawCallResult);
                                abiEncoder = self._lookupAbiEncoder('authorities(uint256)');
                                result = abiEncoder.strictDecodeReturnValue(rawCallResult);
                                // tslint:enable boolean-naming
                                return [2 /*return*/, result];
                        }
                    });
                });
            },
            /**
             * Returns the ABI encoded transaction data needed to send an Ethereum transaction calling this method. Before
             * sending the Ethereum tx, this encoded tx data can first be sent to a separate signing service or can be used
             * to create a 0x transaction (see protocol spec for more details).
             * @returns The ABI encoded transaction data as a string
             */
            getABIEncodedTransactionData: function (index_0) {
                assert_1.assert.isBigNumber('index_0', index_0);
                var self = this;
                var abiEncodedTransactionData = self._strictEncodeArguments('authorities(uint256)', [index_0]);
                return abiEncodedTransactionData;
            },
            /**
             * Decode the ABI-encoded transaction data into its input arguments
             * @param callData The ABI-encoded transaction data
             * @returns An array representing the input arguments in order. Keynames of nested structs are preserved.
             */
            getABIDecodedTransactionData: function (callData) {
                var self = this;
                var abiEncoder = self._lookupAbiEncoder('authorities(uint256)');
                // tslint:disable boolean-naming
                var abiDecodedCallData = abiEncoder.strictDecode(callData);
                return abiDecodedCallData;
            },
            /**
             * Decode the ABI-encoded return data from a transaction
             * @param returnData the data returned after transaction execution
             * @returns An array representing the output results in order.  Keynames of nested structs are preserved.
             */
            getABIDecodedReturnData: function (returnData) {
                var self = this;
                var abiEncoder = self._lookupAbiEncoder('authorities(uint256)');
                // tslint:disable boolean-naming
                var abiDecodedReturnData = abiEncoder.strictDecodeReturnValue(returnData);
                return abiDecodedReturnData;
            },
        };
        /**
         * Removes authorizion of an address.
         */
        _this.removeAuthorizedAddress = {
            /**
             * Sends an Ethereum transaction executing this method with the supplied parameters. This is a read/write
             * Ethereum operation and will cost gas.
             * @param target Address to remove authorization from.
             * @param txData Additional data for transaction
             * @returns The hash of the transaction
             */
            sendTransactionAsync: function (target, txData) {
                return __awaiter(this, void 0, void 0, function () {
                    var self, encodedData, txDataWithDefaults, txHash;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                assert_1.assert.isString('target', target);
                                self = this;
                                encodedData = self._strictEncodeArguments('removeAuthorizedAddress(address)', [target.toLowerCase()]);
                                return [4 /*yield*/, base_contract_1.BaseContract._applyDefaultsToTxDataAsync(__assign({ to: self.address }, txData, { data: encodedData }), self._web3Wrapper.getContractDefaults(), self.removeAuthorizedAddress.estimateGasAsync.bind(self, target.toLowerCase()))];
                            case 1:
                                txDataWithDefaults = _a.sent();
                                if (txDataWithDefaults.from !== undefined) {
                                    txDataWithDefaults.from = txDataWithDefaults.from.toLowerCase();
                                }
                                return [4 /*yield*/, self._web3Wrapper.sendTransactionAsync(txDataWithDefaults)];
                            case 2:
                                txHash = _a.sent();
                                return [2 /*return*/, txHash];
                        }
                    });
                });
            },
            /**
             * Sends an Ethereum transaction and waits until the transaction has been successfully mined without reverting.
             * If the transaction was mined, but reverted, an error is thrown.
             * @param target Address to remove authorization from.
             * @param txData Additional data for transaction
             * @param pollingIntervalMs Interval at which to poll for success
             * @returns A promise that resolves when the transaction is successful
             */
            awaitTransactionSuccessAsync: function (target, txData, pollingIntervalMs, timeoutMs) {
                var _this = this;
                assert_1.assert.isString('target', target);
                var self = this;
                var txHashPromise = self.removeAuthorizedAddress.sendTransactionAsync(target.toLowerCase(), txData);
                return new base_contract_1.PromiseWithTransactionHash(txHashPromise, (function () { return __awaiter(_this, void 0, void 0, function () {
                    var _a, _b;
                    return __generator(this, function (_c) {
                        switch (_c.label) {
                            case 0:
                                _b = (_a = self._web3Wrapper).awaitTransactionSuccessAsync;
                                return [4 /*yield*/, txHashPromise];
                            case 1: 
                            // When the transaction hash resolves, wait for it to be mined.
                            return [2 /*return*/, _b.apply(_a, [_c.sent(),
                                    pollingIntervalMs,
                                    timeoutMs])];
                        }
                    });
                }); })());
            },
            /**
             * Estimates the gas cost of sending an Ethereum transaction calling this method with these arguments.
             * @param target Address to remove authorization from.
             * @param txData Additional data for transaction
             * @returns The hash of the transaction
             */
            estimateGasAsync: function (target, txData) {
                return __awaiter(this, void 0, void 0, function () {
                    var self, encodedData, txDataWithDefaults, gas;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                assert_1.assert.isString('target', target);
                                self = this;
                                encodedData = self._strictEncodeArguments('removeAuthorizedAddress(address)', [target.toLowerCase()]);
                                return [4 /*yield*/, base_contract_1.BaseContract._applyDefaultsToTxDataAsync(__assign({ to: self.address }, txData, { data: encodedData }), self._web3Wrapper.getContractDefaults())];
                            case 1:
                                txDataWithDefaults = _a.sent();
                                if (txDataWithDefaults.from !== undefined) {
                                    txDataWithDefaults.from = txDataWithDefaults.from.toLowerCase();
                                }
                                return [4 /*yield*/, self._web3Wrapper.estimateGasAsync(txDataWithDefaults)];
                            case 2:
                                gas = _a.sent();
                                return [2 /*return*/, gas];
                        }
                    });
                });
            },
            validateAndSendTransactionAsync: function (target, txData) {
                return __awaiter(this, void 0, void 0, function () {
                    var txHash;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this.removeAuthorizedAddress.callAsync(target, txData)];
                            case 1:
                                _a.sent();
                                return [4 /*yield*/, this.removeAuthorizedAddress.sendTransactionAsync(target, txData)];
                            case 2:
                                txHash = _a.sent();
                                return [2 /*return*/, txHash];
                        }
                    });
                });
            },
            /**
             * Sends a read-only call to the contract method. Returns the result that would happen if one were to send an
             * Ethereum transaction to this method, given the current state of the blockchain. Calls do not cost gas
             * since they don't modify state.
             * @param target Address to remove authorization from.
             */
            callAsync: function (target, callData, defaultBlock) {
                if (callData === void 0) { callData = {}; }
                return __awaiter(this, void 0, void 0, function () {
                    var self, encodedData, callDataWithDefaults, rawCallResult, abiEncoder, result;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                assert_1.assert.isString('target', target);
                                assert_1.assert.doesConformToSchema('callData', callData, json_schemas_1.schemas.callDataSchema, [
                                    json_schemas_1.schemas.addressSchema,
                                    json_schemas_1.schemas.numberSchema,
                                    json_schemas_1.schemas.jsNumber,
                                ]);
                                if (defaultBlock !== undefined) {
                                    assert_1.assert.isBlockParam('defaultBlock', defaultBlock);
                                }
                                self = this;
                                encodedData = self._strictEncodeArguments('removeAuthorizedAddress(address)', [target.toLowerCase()]);
                                return [4 /*yield*/, base_contract_1.BaseContract._applyDefaultsToTxDataAsync(__assign({ to: self.address }, callData, { data: encodedData }), self._web3Wrapper.getContractDefaults())];
                            case 1:
                                callDataWithDefaults = _a.sent();
                                callDataWithDefaults.from = callDataWithDefaults.from
                                    ? callDataWithDefaults.from.toLowerCase()
                                    : callDataWithDefaults.from;
                                return [4 /*yield*/, self._web3Wrapper.callAsync(callDataWithDefaults, defaultBlock)];
                            case 2:
                                rawCallResult = _a.sent();
                                base_contract_1.BaseContract._throwIfRevertWithReasonCallResult(rawCallResult);
                                abiEncoder = self._lookupAbiEncoder('removeAuthorizedAddress(address)');
                                result = abiEncoder.strictDecodeReturnValue(rawCallResult);
                                // tslint:enable boolean-naming
                                return [2 /*return*/, result];
                        }
                    });
                });
            },
            /**
             * Returns the ABI encoded transaction data needed to send an Ethereum transaction calling this method. Before
             * sending the Ethereum tx, this encoded tx data can first be sent to a separate signing service or can be used
             * to create a 0x transaction (see protocol spec for more details).
             * @param target Address to remove authorization from.
             * @returns The ABI encoded transaction data as a string
             */
            getABIEncodedTransactionData: function (target) {
                assert_1.assert.isString('target', target);
                var self = this;
                var abiEncodedTransactionData = self._strictEncodeArguments('removeAuthorizedAddress(address)', [
                    target.toLowerCase(),
                ]);
                return abiEncodedTransactionData;
            },
            /**
             * Decode the ABI-encoded transaction data into its input arguments
             * @param callData The ABI-encoded transaction data
             * @returns An array representing the input arguments in order. Keynames of nested structs are preserved.
             */
            getABIDecodedTransactionData: function (callData) {
                var self = this;
                var abiEncoder = self._lookupAbiEncoder('removeAuthorizedAddress(address)');
                // tslint:disable boolean-naming
                var abiDecodedCallData = abiEncoder.strictDecode(callData);
                return abiDecodedCallData;
            },
            /**
             * Decode the ABI-encoded return data from a transaction
             * @param returnData the data returned after transaction execution
             * @returns An array representing the output results in order.  Keynames of nested structs are preserved.
             */
            getABIDecodedReturnData: function (returnData) {
                var self = this;
                var abiEncoder = self._lookupAbiEncoder('removeAuthorizedAddress(address)');
                // tslint:disable boolean-naming
                var abiDecodedReturnData = abiEncoder.strictDecodeReturnValue(returnData);
                return abiDecodedReturnData;
            },
        };
        _this.owner = {
            /**
             * Sends a read-only call to the contract method. Returns the result that would happen if one were to send an
             * Ethereum transaction to this method, given the current state of the blockchain. Calls do not cost gas
             * since they don't modify state.
             */
            callAsync: function (callData, defaultBlock) {
                if (callData === void 0) { callData = {}; }
                return __awaiter(this, void 0, void 0, function () {
                    var self, encodedData, callDataWithDefaults, rawCallResult, abiEncoder, result;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                assert_1.assert.doesConformToSchema('callData', callData, json_schemas_1.schemas.callDataSchema, [
                                    json_schemas_1.schemas.addressSchema,
                                    json_schemas_1.schemas.numberSchema,
                                    json_schemas_1.schemas.jsNumber,
                                ]);
                                if (defaultBlock !== undefined) {
                                    assert_1.assert.isBlockParam('defaultBlock', defaultBlock);
                                }
                                self = this;
                                encodedData = self._strictEncodeArguments('owner()', []);
                                return [4 /*yield*/, base_contract_1.BaseContract._applyDefaultsToTxDataAsync(__assign({ to: self.address }, callData, { data: encodedData }), self._web3Wrapper.getContractDefaults())];
                            case 1:
                                callDataWithDefaults = _a.sent();
                                callDataWithDefaults.from = callDataWithDefaults.from
                                    ? callDataWithDefaults.from.toLowerCase()
                                    : callDataWithDefaults.from;
                                return [4 /*yield*/, self._web3Wrapper.callAsync(callDataWithDefaults, defaultBlock)];
                            case 2:
                                rawCallResult = _a.sent();
                                base_contract_1.BaseContract._throwIfRevertWithReasonCallResult(rawCallResult);
                                abiEncoder = self._lookupAbiEncoder('owner()');
                                result = abiEncoder.strictDecodeReturnValue(rawCallResult);
                                // tslint:enable boolean-naming
                                return [2 /*return*/, result];
                        }
                    });
                });
            },
            /**
             * Returns the ABI encoded transaction data needed to send an Ethereum transaction calling this method. Before
             * sending the Ethereum tx, this encoded tx data can first be sent to a separate signing service or can be used
             * to create a 0x transaction (see protocol spec for more details).
             * @returns The ABI encoded transaction data as a string
             */
            getABIEncodedTransactionData: function () {
                var self = this;
                var abiEncodedTransactionData = self._strictEncodeArguments('owner()', []);
                return abiEncodedTransactionData;
            },
            /**
             * Decode the ABI-encoded transaction data into its input arguments
             * @param callData The ABI-encoded transaction data
             * @returns An array representing the input arguments in order. Keynames of nested structs are preserved.
             */
            getABIDecodedTransactionData: function (callData) {
                var self = this;
                var abiEncoder = self._lookupAbiEncoder('owner()');
                // tslint:disable boolean-naming
                var abiDecodedCallData = abiEncoder.strictDecode(callData);
                return abiDecodedCallData;
            },
            /**
             * Decode the ABI-encoded return data from a transaction
             * @param returnData the data returned after transaction execution
             * @returns An array representing the output results in order.  Keynames of nested structs are preserved.
             */
            getABIDecodedReturnData: function (returnData) {
                var self = this;
                var abiEncoder = self._lookupAbiEncoder('owner()');
                // tslint:disable boolean-naming
                var abiDecodedReturnData = abiEncoder.strictDecodeReturnValue(returnData);
                return abiDecodedReturnData;
            },
        };
        /**
         * Removes authorizion of an address.
         */
        _this.removeAuthorizedAddressAtIndex = {
            /**
             * Sends an Ethereum transaction executing this method with the supplied parameters. This is a read/write
             * Ethereum operation and will cost gas.
             * @param target Address to remove authorization from.
             * @param index Index of target in authorities array.
             * @param txData Additional data for transaction
             * @returns The hash of the transaction
             */
            sendTransactionAsync: function (target, index, txData) {
                return __awaiter(this, void 0, void 0, function () {
                    var self, encodedData, txDataWithDefaults, txHash;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                assert_1.assert.isString('target', target);
                                assert_1.assert.isBigNumber('index', index);
                                self = this;
                                encodedData = self._strictEncodeArguments('removeAuthorizedAddressAtIndex(address,uint256)', [
                                    target.toLowerCase(),
                                    index,
                                ]);
                                return [4 /*yield*/, base_contract_1.BaseContract._applyDefaultsToTxDataAsync(__assign({ to: self.address }, txData, { data: encodedData }), self._web3Wrapper.getContractDefaults(), self.removeAuthorizedAddressAtIndex.estimateGasAsync.bind(self, target.toLowerCase(), index))];
                            case 1:
                                txDataWithDefaults = _a.sent();
                                if (txDataWithDefaults.from !== undefined) {
                                    txDataWithDefaults.from = txDataWithDefaults.from.toLowerCase();
                                }
                                return [4 /*yield*/, self._web3Wrapper.sendTransactionAsync(txDataWithDefaults)];
                            case 2:
                                txHash = _a.sent();
                                return [2 /*return*/, txHash];
                        }
                    });
                });
            },
            /**
             * Sends an Ethereum transaction and waits until the transaction has been successfully mined without reverting.
             * If the transaction was mined, but reverted, an error is thrown.
             * @param target Address to remove authorization from.
             * @param index Index of target in authorities array.
             * @param txData Additional data for transaction
             * @param pollingIntervalMs Interval at which to poll for success
             * @returns A promise that resolves when the transaction is successful
             */
            awaitTransactionSuccessAsync: function (target, index, txData, pollingIntervalMs, timeoutMs) {
                var _this = this;
                assert_1.assert.isString('target', target);
                assert_1.assert.isBigNumber('index', index);
                var self = this;
                var txHashPromise = self.removeAuthorizedAddressAtIndex.sendTransactionAsync(target.toLowerCase(), index, txData);
                return new base_contract_1.PromiseWithTransactionHash(txHashPromise, (function () { return __awaiter(_this, void 0, void 0, function () {
                    var _a, _b;
                    return __generator(this, function (_c) {
                        switch (_c.label) {
                            case 0:
                                _b = (_a = self._web3Wrapper).awaitTransactionSuccessAsync;
                                return [4 /*yield*/, txHashPromise];
                            case 1: 
                            // When the transaction hash resolves, wait for it to be mined.
                            return [2 /*return*/, _b.apply(_a, [_c.sent(),
                                    pollingIntervalMs,
                                    timeoutMs])];
                        }
                    });
                }); })());
            },
            /**
             * Estimates the gas cost of sending an Ethereum transaction calling this method with these arguments.
             * @param target Address to remove authorization from.
             * @param index Index of target in authorities array.
             * @param txData Additional data for transaction
             * @returns The hash of the transaction
             */
            estimateGasAsync: function (target, index, txData) {
                return __awaiter(this, void 0, void 0, function () {
                    var self, encodedData, txDataWithDefaults, gas;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                assert_1.assert.isString('target', target);
                                assert_1.assert.isBigNumber('index', index);
                                self = this;
                                encodedData = self._strictEncodeArguments('removeAuthorizedAddressAtIndex(address,uint256)', [
                                    target.toLowerCase(),
                                    index,
                                ]);
                                return [4 /*yield*/, base_contract_1.BaseContract._applyDefaultsToTxDataAsync(__assign({ to: self.address }, txData, { data: encodedData }), self._web3Wrapper.getContractDefaults())];
                            case 1:
                                txDataWithDefaults = _a.sent();
                                if (txDataWithDefaults.from !== undefined) {
                                    txDataWithDefaults.from = txDataWithDefaults.from.toLowerCase();
                                }
                                return [4 /*yield*/, self._web3Wrapper.estimateGasAsync(txDataWithDefaults)];
                            case 2:
                                gas = _a.sent();
                                return [2 /*return*/, gas];
                        }
                    });
                });
            },
            validateAndSendTransactionAsync: function (target, index, txData) {
                return __awaiter(this, void 0, void 0, function () {
                    var txHash;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this.removeAuthorizedAddressAtIndex.callAsync(target, index, txData)];
                            case 1:
                                _a.sent();
                                return [4 /*yield*/, this.removeAuthorizedAddressAtIndex.sendTransactionAsync(target, index, txData)];
                            case 2:
                                txHash = _a.sent();
                                return [2 /*return*/, txHash];
                        }
                    });
                });
            },
            /**
             * Sends a read-only call to the contract method. Returns the result that would happen if one were to send an
             * Ethereum transaction to this method, given the current state of the blockchain. Calls do not cost gas
             * since they don't modify state.
             * @param target Address to remove authorization from.
             * @param index Index of target in authorities array.
             */
            callAsync: function (target, index, callData, defaultBlock) {
                if (callData === void 0) { callData = {}; }
                return __awaiter(this, void 0, void 0, function () {
                    var self, encodedData, callDataWithDefaults, rawCallResult, abiEncoder, result;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                assert_1.assert.isString('target', target);
                                assert_1.assert.isBigNumber('index', index);
                                assert_1.assert.doesConformToSchema('callData', callData, json_schemas_1.schemas.callDataSchema, [
                                    json_schemas_1.schemas.addressSchema,
                                    json_schemas_1.schemas.numberSchema,
                                    json_schemas_1.schemas.jsNumber,
                                ]);
                                if (defaultBlock !== undefined) {
                                    assert_1.assert.isBlockParam('defaultBlock', defaultBlock);
                                }
                                self = this;
                                encodedData = self._strictEncodeArguments('removeAuthorizedAddressAtIndex(address,uint256)', [
                                    target.toLowerCase(),
                                    index,
                                ]);
                                return [4 /*yield*/, base_contract_1.BaseContract._applyDefaultsToTxDataAsync(__assign({ to: self.address }, callData, { data: encodedData }), self._web3Wrapper.getContractDefaults())];
                            case 1:
                                callDataWithDefaults = _a.sent();
                                callDataWithDefaults.from = callDataWithDefaults.from
                                    ? callDataWithDefaults.from.toLowerCase()
                                    : callDataWithDefaults.from;
                                return [4 /*yield*/, self._web3Wrapper.callAsync(callDataWithDefaults, defaultBlock)];
                            case 2:
                                rawCallResult = _a.sent();
                                base_contract_1.BaseContract._throwIfRevertWithReasonCallResult(rawCallResult);
                                abiEncoder = self._lookupAbiEncoder('removeAuthorizedAddressAtIndex(address,uint256)');
                                result = abiEncoder.strictDecodeReturnValue(rawCallResult);
                                // tslint:enable boolean-naming
                                return [2 /*return*/, result];
                        }
                    });
                });
            },
            /**
             * Returns the ABI encoded transaction data needed to send an Ethereum transaction calling this method. Before
             * sending the Ethereum tx, this encoded tx data can first be sent to a separate signing service or can be used
             * to create a 0x transaction (see protocol spec for more details).
             * @param target Address to remove authorization from.
             * @param index Index of target in authorities array.
             * @returns The ABI encoded transaction data as a string
             */
            getABIEncodedTransactionData: function (target, index) {
                assert_1.assert.isString('target', target);
                assert_1.assert.isBigNumber('index', index);
                var self = this;
                var abiEncodedTransactionData = self._strictEncodeArguments('removeAuthorizedAddressAtIndex(address,uint256)', [target.toLowerCase(), index]);
                return abiEncodedTransactionData;
            },
            /**
             * Decode the ABI-encoded transaction data into its input arguments
             * @param callData The ABI-encoded transaction data
             * @returns An array representing the input arguments in order. Keynames of nested structs are preserved.
             */
            getABIDecodedTransactionData: function (callData) {
                var self = this;
                var abiEncoder = self._lookupAbiEncoder('removeAuthorizedAddressAtIndex(address,uint256)');
                // tslint:disable boolean-naming
                var abiDecodedCallData = abiEncoder.strictDecode(callData);
                return abiDecodedCallData;
            },
            /**
             * Decode the ABI-encoded return data from a transaction
             * @param returnData the data returned after transaction execution
             * @returns An array representing the output results in order.  Keynames of nested structs are preserved.
             */
            getABIDecodedReturnData: function (returnData) {
                var self = this;
                var abiEncoder = self._lookupAbiEncoder('removeAuthorizedAddressAtIndex(address,uint256)');
                // tslint:disable boolean-naming
                var abiDecodedReturnData = abiEncoder.strictDecodeReturnValue(returnData);
                return abiDecodedReturnData;
            },
        };
        /**
         * Transfers batch of ERC1155 assets. Either succeeds or throws.
         */
        _this.transferFrom = {
            /**
             * Sends an Ethereum transaction executing this method with the supplied parameters. This is a read/write
             * Ethereum operation and will cost gas.
             * @param assetData Byte array encoded with ERC1155 token address, array of
             *     ids, array of values, and callback data.
             * @param from Address to transfer assets from.
             * @param to Address to transfer assets to.
             * @param amount Amount that will be multiplied with each element of
             *     `assetData.values` to scale the        values that will be transferred.
             * @param txData Additional data for transaction
             * @returns The hash of the transaction
             */
            sendTransactionAsync: function (assetData, from, to, amount, txData) {
                return __awaiter(this, void 0, void 0, function () {
                    var self, encodedData, txDataWithDefaults, txHash;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                assert_1.assert.isString('assetData', assetData);
                                assert_1.assert.isString('from', from);
                                assert_1.assert.isString('to', to);
                                assert_1.assert.isBigNumber('amount', amount);
                                self = this;
                                encodedData = self._strictEncodeArguments('transferFrom(bytes,address,address,uint256)', [
                                    assetData,
                                    from.toLowerCase(),
                                    to.toLowerCase(),
                                    amount,
                                ]);
                                return [4 /*yield*/, base_contract_1.BaseContract._applyDefaultsToTxDataAsync(__assign({ to: self.address }, txData, { data: encodedData }), self._web3Wrapper.getContractDefaults(), self.transferFrom.estimateGasAsync.bind(self, assetData, from.toLowerCase(), to.toLowerCase(), amount))];
                            case 1:
                                txDataWithDefaults = _a.sent();
                                if (txDataWithDefaults.from !== undefined) {
                                    txDataWithDefaults.from = txDataWithDefaults.from.toLowerCase();
                                }
                                return [4 /*yield*/, self._web3Wrapper.sendTransactionAsync(txDataWithDefaults)];
                            case 2:
                                txHash = _a.sent();
                                return [2 /*return*/, txHash];
                        }
                    });
                });
            },
            /**
             * Sends an Ethereum transaction and waits until the transaction has been successfully mined without reverting.
             * If the transaction was mined, but reverted, an error is thrown.
             * @param assetData Byte array encoded with ERC1155 token address, array of
             *     ids, array of values, and callback data.
             * @param from Address to transfer assets from.
             * @param to Address to transfer assets to.
             * @param amount Amount that will be multiplied with each element of
             *     `assetData.values` to scale the        values that will be transferred.
             * @param txData Additional data for transaction
             * @param pollingIntervalMs Interval at which to poll for success
             * @returns A promise that resolves when the transaction is successful
             */
            awaitTransactionSuccessAsync: function (assetData, from, to, amount, txData, pollingIntervalMs, timeoutMs) {
                var _this = this;
                assert_1.assert.isString('assetData', assetData);
                assert_1.assert.isString('from', from);
                assert_1.assert.isString('to', to);
                assert_1.assert.isBigNumber('amount', amount);
                var self = this;
                var txHashPromise = self.transferFrom.sendTransactionAsync(assetData, from.toLowerCase(), to.toLowerCase(), amount, txData);
                return new base_contract_1.PromiseWithTransactionHash(txHashPromise, (function () { return __awaiter(_this, void 0, void 0, function () {
                    var _a, _b;
                    return __generator(this, function (_c) {
                        switch (_c.label) {
                            case 0:
                                _b = (_a = self._web3Wrapper).awaitTransactionSuccessAsync;
                                return [4 /*yield*/, txHashPromise];
                            case 1: 
                            // When the transaction hash resolves, wait for it to be mined.
                            return [2 /*return*/, _b.apply(_a, [_c.sent(),
                                    pollingIntervalMs,
                                    timeoutMs])];
                        }
                    });
                }); })());
            },
            /**
             * Estimates the gas cost of sending an Ethereum transaction calling this method with these arguments.
             * @param assetData Byte array encoded with ERC1155 token address, array of
             *     ids, array of values, and callback data.
             * @param from Address to transfer assets from.
             * @param to Address to transfer assets to.
             * @param amount Amount that will be multiplied with each element of
             *     `assetData.values` to scale the        values that will be transferred.
             * @param txData Additional data for transaction
             * @returns The hash of the transaction
             */
            estimateGasAsync: function (assetData, from, to, amount, txData) {
                return __awaiter(this, void 0, void 0, function () {
                    var self, encodedData, txDataWithDefaults, gas;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                assert_1.assert.isString('assetData', assetData);
                                assert_1.assert.isString('from', from);
                                assert_1.assert.isString('to', to);
                                assert_1.assert.isBigNumber('amount', amount);
                                self = this;
                                encodedData = self._strictEncodeArguments('transferFrom(bytes,address,address,uint256)', [
                                    assetData,
                                    from.toLowerCase(),
                                    to.toLowerCase(),
                                    amount,
                                ]);
                                return [4 /*yield*/, base_contract_1.BaseContract._applyDefaultsToTxDataAsync(__assign({ to: self.address }, txData, { data: encodedData }), self._web3Wrapper.getContractDefaults())];
                            case 1:
                                txDataWithDefaults = _a.sent();
                                if (txDataWithDefaults.from !== undefined) {
                                    txDataWithDefaults.from = txDataWithDefaults.from.toLowerCase();
                                }
                                return [4 /*yield*/, self._web3Wrapper.estimateGasAsync(txDataWithDefaults)];
                            case 2:
                                gas = _a.sent();
                                return [2 /*return*/, gas];
                        }
                    });
                });
            },
            validateAndSendTransactionAsync: function (assetData, from, to, amount, txData) {
                return __awaiter(this, void 0, void 0, function () {
                    var txHash;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this.transferFrom.callAsync(assetData, from, to, amount, txData)];
                            case 1:
                                _a.sent();
                                return [4 /*yield*/, this.transferFrom.sendTransactionAsync(assetData, from, to, amount, txData)];
                            case 2:
                                txHash = _a.sent();
                                return [2 /*return*/, txHash];
                        }
                    });
                });
            },
            /**
             * Sends a read-only call to the contract method. Returns the result that would happen if one were to send an
             * Ethereum transaction to this method, given the current state of the blockchain. Calls do not cost gas
             * since they don't modify state.
             * @param assetData Byte array encoded with ERC1155 token address, array of
             *     ids, array of values, and callback data.
             * @param from Address to transfer assets from.
             * @param to Address to transfer assets to.
             * @param amount Amount that will be multiplied with each element of
             *     `assetData.values` to scale the        values that will be transferred.
             */
            callAsync: function (assetData, from, to, amount, callData, defaultBlock) {
                if (callData === void 0) { callData = {}; }
                return __awaiter(this, void 0, void 0, function () {
                    var self, encodedData, callDataWithDefaults, rawCallResult, abiEncoder, result;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                assert_1.assert.isString('assetData', assetData);
                                assert_1.assert.isString('from', from);
                                assert_1.assert.isString('to', to);
                                assert_1.assert.isBigNumber('amount', amount);
                                assert_1.assert.doesConformToSchema('callData', callData, json_schemas_1.schemas.callDataSchema, [
                                    json_schemas_1.schemas.addressSchema,
                                    json_schemas_1.schemas.numberSchema,
                                    json_schemas_1.schemas.jsNumber,
                                ]);
                                if (defaultBlock !== undefined) {
                                    assert_1.assert.isBlockParam('defaultBlock', defaultBlock);
                                }
                                self = this;
                                encodedData = self._strictEncodeArguments('transferFrom(bytes,address,address,uint256)', [
                                    assetData,
                                    from.toLowerCase(),
                                    to.toLowerCase(),
                                    amount,
                                ]);
                                return [4 /*yield*/, base_contract_1.BaseContract._applyDefaultsToTxDataAsync(__assign({ to: self.address }, callData, { data: encodedData }), self._web3Wrapper.getContractDefaults())];
                            case 1:
                                callDataWithDefaults = _a.sent();
                                callDataWithDefaults.from = callDataWithDefaults.from
                                    ? callDataWithDefaults.from.toLowerCase()
                                    : callDataWithDefaults.from;
                                return [4 /*yield*/, self._web3Wrapper.callAsync(callDataWithDefaults, defaultBlock)];
                            case 2:
                                rawCallResult = _a.sent();
                                base_contract_1.BaseContract._throwIfRevertWithReasonCallResult(rawCallResult);
                                abiEncoder = self._lookupAbiEncoder('transferFrom(bytes,address,address,uint256)');
                                result = abiEncoder.strictDecodeReturnValue(rawCallResult);
                                // tslint:enable boolean-naming
                                return [2 /*return*/, result];
                        }
                    });
                });
            },
            /**
             * Returns the ABI encoded transaction data needed to send an Ethereum transaction calling this method. Before
             * sending the Ethereum tx, this encoded tx data can first be sent to a separate signing service or can be used
             * to create a 0x transaction (see protocol spec for more details).
             * @param assetData Byte array encoded with ERC1155 token address, array of
             *     ids, array of values, and callback data.
             * @param from Address to transfer assets from.
             * @param to Address to transfer assets to.
             * @param amount Amount that will be multiplied with each element of
             *     `assetData.values` to scale the        values that will be transferred.
             * @returns The ABI encoded transaction data as a string
             */
            getABIEncodedTransactionData: function (assetData, from, to, amount) {
                assert_1.assert.isString('assetData', assetData);
                assert_1.assert.isString('from', from);
                assert_1.assert.isString('to', to);
                assert_1.assert.isBigNumber('amount', amount);
                var self = this;
                var abiEncodedTransactionData = self._strictEncodeArguments('transferFrom(bytes,address,address,uint256)', [assetData, from.toLowerCase(), to.toLowerCase(), amount]);
                return abiEncodedTransactionData;
            },
            /**
             * Decode the ABI-encoded transaction data into its input arguments
             * @param callData The ABI-encoded transaction data
             * @returns An array representing the input arguments in order. Keynames of nested structs are preserved.
             */
            getABIDecodedTransactionData: function (callData) {
                var self = this;
                var abiEncoder = self._lookupAbiEncoder('transferFrom(bytes,address,address,uint256)');
                // tslint:disable boolean-naming
                var abiDecodedCallData = abiEncoder.strictDecode(callData);
                return abiDecodedCallData;
            },
            /**
             * Decode the ABI-encoded return data from a transaction
             * @param returnData the data returned after transaction execution
             * @returns An array representing the output results in order.  Keynames of nested structs are preserved.
             */
            getABIDecodedReturnData: function (returnData) {
                var self = this;
                var abiEncoder = self._lookupAbiEncoder('transferFrom(bytes,address,address,uint256)');
                // tslint:disable boolean-naming
                var abiDecodedReturnData = abiEncoder.strictDecodeReturnValue(returnData);
                return abiDecodedReturnData;
            },
        };
        /**
         * Gets the proxy id associated with the proxy address.
         */
        _this.getProxyId = {
            /**
             * Sends a read-only call to the contract method. Returns the result that would happen if one were to send an
             * Ethereum transaction to this method, given the current state of the blockchain. Calls do not cost gas
             * since they don't modify state.
             * @returns Proxy id.
             */
            callAsync: function (callData, defaultBlock) {
                if (callData === void 0) { callData = {}; }
                return __awaiter(this, void 0, void 0, function () {
                    var self, encodedData, encodedDataBytes, rawCallResult, abiEncoder, result;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                assert_1.assert.doesConformToSchema('callData', callData, json_schemas_1.schemas.callDataSchema, [
                                    json_schemas_1.schemas.addressSchema,
                                    json_schemas_1.schemas.numberSchema,
                                    json_schemas_1.schemas.jsNumber,
                                ]);
                                if (defaultBlock !== undefined) {
                                    assert_1.assert.isBlockParam('defaultBlock', defaultBlock);
                                }
                                self = this;
                                encodedData = self._strictEncodeArguments('getProxyId()', []);
                                encodedDataBytes = Buffer.from(encodedData.substr(2), 'hex');
                                return [4 /*yield*/, self.evmExecAsync(encodedDataBytes)];
                            case 1:
                                rawCallResult = _a.sent();
                                base_contract_1.BaseContract._throwIfRevertWithReasonCallResult(rawCallResult);
                                abiEncoder = self._lookupAbiEncoder('getProxyId()');
                                result = abiEncoder.strictDecodeReturnValue(rawCallResult);
                                // tslint:enable boolean-naming
                                return [2 /*return*/, result];
                        }
                    });
                });
            },
            /**
             * Returns the ABI encoded transaction data needed to send an Ethereum transaction calling this method. Before
             * sending the Ethereum tx, this encoded tx data can first be sent to a separate signing service or can be used
             * to create a 0x transaction (see protocol spec for more details).
             * @returns The ABI encoded transaction data as a string
             */
            getABIEncodedTransactionData: function () {
                var self = this;
                var abiEncodedTransactionData = self._strictEncodeArguments('getProxyId()', []);
                return abiEncodedTransactionData;
            },
            /**
             * Decode the ABI-encoded transaction data into its input arguments
             * @param callData The ABI-encoded transaction data
             * @returns An array representing the input arguments in order. Keynames of nested structs are preserved.
             */
            getABIDecodedTransactionData: function (callData) {
                var self = this;
                var abiEncoder = self._lookupAbiEncoder('getProxyId()');
                // tslint:disable boolean-naming
                var abiDecodedCallData = abiEncoder.strictDecode(callData);
                return abiDecodedCallData;
            },
            /**
             * Decode the ABI-encoded return data from a transaction
             * @param returnData the data returned after transaction execution
             * @returns An array representing the output results in order.  Keynames of nested structs are preserved.
             */
            getABIDecodedReturnData: function (returnData) {
                var self = this;
                var abiEncoder = self._lookupAbiEncoder('getProxyId()');
                // tslint:disable boolean-naming
                var abiDecodedReturnData = abiEncoder.strictDecodeReturnValue(returnData);
                return abiDecodedReturnData;
            },
        };
        _this.authorized = {
            /**
             * Sends a read-only call to the contract method. Returns the result that would happen if one were to send an
             * Ethereum transaction to this method, given the current state of the blockchain. Calls do not cost gas
             * since they don't modify state.
             */
            callAsync: function (index_0, callData, defaultBlock) {
                if (callData === void 0) { callData = {}; }
                return __awaiter(this, void 0, void 0, function () {
                    var self, encodedData, callDataWithDefaults, rawCallResult, abiEncoder, result;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                assert_1.assert.isString('index_0', index_0);
                                assert_1.assert.doesConformToSchema('callData', callData, json_schemas_1.schemas.callDataSchema, [
                                    json_schemas_1.schemas.addressSchema,
                                    json_schemas_1.schemas.numberSchema,
                                    json_schemas_1.schemas.jsNumber,
                                ]);
                                if (defaultBlock !== undefined) {
                                    assert_1.assert.isBlockParam('defaultBlock', defaultBlock);
                                }
                                self = this;
                                encodedData = self._strictEncodeArguments('authorized(address)', [index_0.toLowerCase()]);
                                return [4 /*yield*/, base_contract_1.BaseContract._applyDefaultsToTxDataAsync(__assign({ to: self.address }, callData, { data: encodedData }), self._web3Wrapper.getContractDefaults())];
                            case 1:
                                callDataWithDefaults = _a.sent();
                                callDataWithDefaults.from = callDataWithDefaults.from
                                    ? callDataWithDefaults.from.toLowerCase()
                                    : callDataWithDefaults.from;
                                return [4 /*yield*/, self._web3Wrapper.callAsync(callDataWithDefaults, defaultBlock)];
                            case 2:
                                rawCallResult = _a.sent();
                                base_contract_1.BaseContract._throwIfRevertWithReasonCallResult(rawCallResult);
                                abiEncoder = self._lookupAbiEncoder('authorized(address)');
                                result = abiEncoder.strictDecodeReturnValue(rawCallResult);
                                // tslint:enable boolean-naming
                                return [2 /*return*/, result];
                        }
                    });
                });
            },
            /**
             * Returns the ABI encoded transaction data needed to send an Ethereum transaction calling this method. Before
             * sending the Ethereum tx, this encoded tx data can first be sent to a separate signing service or can be used
             * to create a 0x transaction (see protocol spec for more details).
             * @returns The ABI encoded transaction data as a string
             */
            getABIEncodedTransactionData: function (index_0) {
                assert_1.assert.isString('index_0', index_0);
                var self = this;
                var abiEncodedTransactionData = self._strictEncodeArguments('authorized(address)', [
                    index_0.toLowerCase(),
                ]);
                return abiEncodedTransactionData;
            },
            /**
             * Decode the ABI-encoded transaction data into its input arguments
             * @param callData The ABI-encoded transaction data
             * @returns An array representing the input arguments in order. Keynames of nested structs are preserved.
             */
            getABIDecodedTransactionData: function (callData) {
                var self = this;
                var abiEncoder = self._lookupAbiEncoder('authorized(address)');
                // tslint:disable boolean-naming
                var abiDecodedCallData = abiEncoder.strictDecode(callData);
                return abiDecodedCallData;
            },
            /**
             * Decode the ABI-encoded return data from a transaction
             * @param returnData the data returned after transaction execution
             * @returns An array representing the output results in order.  Keynames of nested structs are preserved.
             */
            getABIDecodedReturnData: function (returnData) {
                var self = this;
                var abiEncoder = self._lookupAbiEncoder('authorized(address)');
                // tslint:disable boolean-naming
                var abiDecodedReturnData = abiEncoder.strictDecodeReturnValue(returnData);
                return abiDecodedReturnData;
            },
        };
        /**
         * Gets all authorized addresses.
         */
        _this.getAuthorizedAddresses = {
            /**
             * Sends a read-only call to the contract method. Returns the result that would happen if one were to send an
             * Ethereum transaction to this method, given the current state of the blockchain. Calls do not cost gas
             * since they don't modify state.
             * @returns Array of authorized addresses.
             */
            callAsync: function (callData, defaultBlock) {
                if (callData === void 0) { callData = {}; }
                return __awaiter(this, void 0, void 0, function () {
                    var self, encodedData, callDataWithDefaults, rawCallResult, abiEncoder, result;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                assert_1.assert.doesConformToSchema('callData', callData, json_schemas_1.schemas.callDataSchema, [
                                    json_schemas_1.schemas.addressSchema,
                                    json_schemas_1.schemas.numberSchema,
                                    json_schemas_1.schemas.jsNumber,
                                ]);
                                if (defaultBlock !== undefined) {
                                    assert_1.assert.isBlockParam('defaultBlock', defaultBlock);
                                }
                                self = this;
                                encodedData = self._strictEncodeArguments('getAuthorizedAddresses()', []);
                                return [4 /*yield*/, base_contract_1.BaseContract._applyDefaultsToTxDataAsync(__assign({ to: self.address }, callData, { data: encodedData }), self._web3Wrapper.getContractDefaults())];
                            case 1:
                                callDataWithDefaults = _a.sent();
                                callDataWithDefaults.from = callDataWithDefaults.from
                                    ? callDataWithDefaults.from.toLowerCase()
                                    : callDataWithDefaults.from;
                                return [4 /*yield*/, self._web3Wrapper.callAsync(callDataWithDefaults, defaultBlock)];
                            case 2:
                                rawCallResult = _a.sent();
                                base_contract_1.BaseContract._throwIfRevertWithReasonCallResult(rawCallResult);
                                abiEncoder = self._lookupAbiEncoder('getAuthorizedAddresses()');
                                result = abiEncoder.strictDecodeReturnValue(rawCallResult);
                                // tslint:enable boolean-naming
                                return [2 /*return*/, result];
                        }
                    });
                });
            },
            /**
             * Returns the ABI encoded transaction data needed to send an Ethereum transaction calling this method. Before
             * sending the Ethereum tx, this encoded tx data can first be sent to a separate signing service or can be used
             * to create a 0x transaction (see protocol spec for more details).
             * @returns The ABI encoded transaction data as a string
             */
            getABIEncodedTransactionData: function () {
                var self = this;
                var abiEncodedTransactionData = self._strictEncodeArguments('getAuthorizedAddresses()', []);
                return abiEncodedTransactionData;
            },
            /**
             * Decode the ABI-encoded transaction data into its input arguments
             * @param callData The ABI-encoded transaction data
             * @returns An array representing the input arguments in order. Keynames of nested structs are preserved.
             */
            getABIDecodedTransactionData: function (callData) {
                var self = this;
                var abiEncoder = self._lookupAbiEncoder('getAuthorizedAddresses()');
                // tslint:disable boolean-naming
                var abiDecodedCallData = abiEncoder.strictDecode(callData);
                return abiDecodedCallData;
            },
            /**
             * Decode the ABI-encoded return data from a transaction
             * @param returnData the data returned after transaction execution
             * @returns An array representing the output results in order.  Keynames of nested structs are preserved.
             */
            getABIDecodedReturnData: function (returnData) {
                var self = this;
                var abiEncoder = self._lookupAbiEncoder('getAuthorizedAddresses()');
                // tslint:disable boolean-naming
                var abiDecodedReturnData = abiEncoder.strictDecodeReturnValue(returnData);
                return abiDecodedReturnData;
            },
        };
        _this.transferOwnership = {
            /**
             * Sends an Ethereum transaction executing this method with the supplied parameters. This is a read/write
             * Ethereum operation and will cost gas.
             * @param txData Additional data for transaction
             * @returns The hash of the transaction
             */
            sendTransactionAsync: function (newOwner, txData) {
                return __awaiter(this, void 0, void 0, function () {
                    var self, encodedData, txDataWithDefaults, txHash;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                assert_1.assert.isString('newOwner', newOwner);
                                self = this;
                                encodedData = self._strictEncodeArguments('transferOwnership(address)', [newOwner.toLowerCase()]);
                                return [4 /*yield*/, base_contract_1.BaseContract._applyDefaultsToTxDataAsync(__assign({ to: self.address }, txData, { data: encodedData }), self._web3Wrapper.getContractDefaults(), self.transferOwnership.estimateGasAsync.bind(self, newOwner.toLowerCase()))];
                            case 1:
                                txDataWithDefaults = _a.sent();
                                if (txDataWithDefaults.from !== undefined) {
                                    txDataWithDefaults.from = txDataWithDefaults.from.toLowerCase();
                                }
                                return [4 /*yield*/, self._web3Wrapper.sendTransactionAsync(txDataWithDefaults)];
                            case 2:
                                txHash = _a.sent();
                                return [2 /*return*/, txHash];
                        }
                    });
                });
            },
            /**
             * Sends an Ethereum transaction and waits until the transaction has been successfully mined without reverting.
             * If the transaction was mined, but reverted, an error is thrown.
             * @param txData Additional data for transaction
             * @param pollingIntervalMs Interval at which to poll for success
             * @returns A promise that resolves when the transaction is successful
             */
            awaitTransactionSuccessAsync: function (newOwner, txData, pollingIntervalMs, timeoutMs) {
                var _this = this;
                assert_1.assert.isString('newOwner', newOwner);
                var self = this;
                var txHashPromise = self.transferOwnership.sendTransactionAsync(newOwner.toLowerCase(), txData);
                return new base_contract_1.PromiseWithTransactionHash(txHashPromise, (function () { return __awaiter(_this, void 0, void 0, function () {
                    var _a, _b;
                    return __generator(this, function (_c) {
                        switch (_c.label) {
                            case 0:
                                _b = (_a = self._web3Wrapper).awaitTransactionSuccessAsync;
                                return [4 /*yield*/, txHashPromise];
                            case 1: 
                            // When the transaction hash resolves, wait for it to be mined.
                            return [2 /*return*/, _b.apply(_a, [_c.sent(),
                                    pollingIntervalMs,
                                    timeoutMs])];
                        }
                    });
                }); })());
            },
            /**
             * Estimates the gas cost of sending an Ethereum transaction calling this method with these arguments.
             * @param txData Additional data for transaction
             * @returns The hash of the transaction
             */
            estimateGasAsync: function (newOwner, txData) {
                return __awaiter(this, void 0, void 0, function () {
                    var self, encodedData, txDataWithDefaults, gas;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                assert_1.assert.isString('newOwner', newOwner);
                                self = this;
                                encodedData = self._strictEncodeArguments('transferOwnership(address)', [newOwner.toLowerCase()]);
                                return [4 /*yield*/, base_contract_1.BaseContract._applyDefaultsToTxDataAsync(__assign({ to: self.address }, txData, { data: encodedData }), self._web3Wrapper.getContractDefaults())];
                            case 1:
                                txDataWithDefaults = _a.sent();
                                if (txDataWithDefaults.from !== undefined) {
                                    txDataWithDefaults.from = txDataWithDefaults.from.toLowerCase();
                                }
                                return [4 /*yield*/, self._web3Wrapper.estimateGasAsync(txDataWithDefaults)];
                            case 2:
                                gas = _a.sent();
                                return [2 /*return*/, gas];
                        }
                    });
                });
            },
            validateAndSendTransactionAsync: function (newOwner, txData) {
                return __awaiter(this, void 0, void 0, function () {
                    var txHash;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this.transferOwnership.callAsync(newOwner, txData)];
                            case 1:
                                _a.sent();
                                return [4 /*yield*/, this.transferOwnership.sendTransactionAsync(newOwner, txData)];
                            case 2:
                                txHash = _a.sent();
                                return [2 /*return*/, txHash];
                        }
                    });
                });
            },
            /**
             * Sends a read-only call to the contract method. Returns the result that would happen if one were to send an
             * Ethereum transaction to this method, given the current state of the blockchain. Calls do not cost gas
             * since they don't modify state.
             */
            callAsync: function (newOwner, callData, defaultBlock) {
                if (callData === void 0) { callData = {}; }
                return __awaiter(this, void 0, void 0, function () {
                    var self, encodedData, callDataWithDefaults, rawCallResult, abiEncoder, result;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                assert_1.assert.isString('newOwner', newOwner);
                                assert_1.assert.doesConformToSchema('callData', callData, json_schemas_1.schemas.callDataSchema, [
                                    json_schemas_1.schemas.addressSchema,
                                    json_schemas_1.schemas.numberSchema,
                                    json_schemas_1.schemas.jsNumber,
                                ]);
                                if (defaultBlock !== undefined) {
                                    assert_1.assert.isBlockParam('defaultBlock', defaultBlock);
                                }
                                self = this;
                                encodedData = self._strictEncodeArguments('transferOwnership(address)', [newOwner.toLowerCase()]);
                                return [4 /*yield*/, base_contract_1.BaseContract._applyDefaultsToTxDataAsync(__assign({ to: self.address }, callData, { data: encodedData }), self._web3Wrapper.getContractDefaults())];
                            case 1:
                                callDataWithDefaults = _a.sent();
                                callDataWithDefaults.from = callDataWithDefaults.from
                                    ? callDataWithDefaults.from.toLowerCase()
                                    : callDataWithDefaults.from;
                                return [4 /*yield*/, self._web3Wrapper.callAsync(callDataWithDefaults, defaultBlock)];
                            case 2:
                                rawCallResult = _a.sent();
                                base_contract_1.BaseContract._throwIfRevertWithReasonCallResult(rawCallResult);
                                abiEncoder = self._lookupAbiEncoder('transferOwnership(address)');
                                result = abiEncoder.strictDecodeReturnValue(rawCallResult);
                                // tslint:enable boolean-naming
                                return [2 /*return*/, result];
                        }
                    });
                });
            },
            /**
             * Returns the ABI encoded transaction data needed to send an Ethereum transaction calling this method. Before
             * sending the Ethereum tx, this encoded tx data can first be sent to a separate signing service or can be used
             * to create a 0x transaction (see protocol spec for more details).
             * @returns The ABI encoded transaction data as a string
             */
            getABIEncodedTransactionData: function (newOwner) {
                assert_1.assert.isString('newOwner', newOwner);
                var self = this;
                var abiEncodedTransactionData = self._strictEncodeArguments('transferOwnership(address)', [
                    newOwner.toLowerCase(),
                ]);
                return abiEncodedTransactionData;
            },
            /**
             * Decode the ABI-encoded transaction data into its input arguments
             * @param callData The ABI-encoded transaction data
             * @returns An array representing the input arguments in order. Keynames of nested structs are preserved.
             */
            getABIDecodedTransactionData: function (callData) {
                var self = this;
                var abiEncoder = self._lookupAbiEncoder('transferOwnership(address)');
                // tslint:disable boolean-naming
                var abiDecodedCallData = abiEncoder.strictDecode(callData);
                return abiDecodedCallData;
            },
            /**
             * Decode the ABI-encoded return data from a transaction
             * @param returnData the data returned after transaction execution
             * @returns An array representing the output results in order.  Keynames of nested structs are preserved.
             */
            getABIDecodedReturnData: function (returnData) {
                var self = this;
                var abiEncoder = self._lookupAbiEncoder('transferOwnership(address)');
                // tslint:disable boolean-naming
                var abiDecodedReturnData = abiEncoder.strictDecodeReturnValue(returnData);
                return abiDecodedReturnData;
            },
        };
        utils_1.classUtils.bindAll(_this, ['_abiEncoderByFunctionSignature', 'address', '_web3Wrapper']);
        _this._subscriptionManager = new base_contract_1.SubscriptionManager(ERC1155ProxyContract.ABI(), _this._web3Wrapper);
        return _this;
    }
    ERC1155ProxyContract.deployFrom0xArtifactAsync = function (artifact, supportedProvider, txDefaults, logDecodeDependencies) {
        return __awaiter(this, void 0, void 0, function () {
            var e_1, _a, provider, bytecode, abi, logDecodeDependenciesAbiOnly, _b, _c, key;
            return __generator(this, function (_d) {
                assert_1.assert.doesConformToSchema('txDefaults', txDefaults, json_schemas_1.schemas.txDataSchema, [
                    json_schemas_1.schemas.addressSchema,
                    json_schemas_1.schemas.numberSchema,
                    json_schemas_1.schemas.jsNumber,
                ]);
                if (artifact.compilerOutput === undefined) {
                    throw new Error('Compiler output not found in the artifact file');
                }
                provider = utils_1.providerUtils.standardizeOrThrow(supportedProvider);
                bytecode = artifact.compilerOutput.evm.bytecode.object;
                abi = artifact.compilerOutput.abi;
                logDecodeDependenciesAbiOnly = {};
                if (Object.keys(logDecodeDependencies) !== undefined) {
                    try {
                        for (_b = __values(Object.keys(logDecodeDependencies)), _c = _b.next(); !_c.done; _c = _b.next()) {
                            key = _c.value;
                            logDecodeDependenciesAbiOnly[key] = logDecodeDependencies[key].compilerOutput.abi;
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
                return [2 /*return*/, ERC1155ProxyContract.deployAsync(bytecode, abi, provider, txDefaults, logDecodeDependenciesAbiOnly)];
            });
        });
    };
    ERC1155ProxyContract.deployAsync = function (bytecode, abi, supportedProvider, txDefaults, logDecodeDependencies) {
        return __awaiter(this, void 0, void 0, function () {
            var provider, constructorAbi, iface, deployInfo, txData, web3Wrapper, txDataWithDefaults, txHash, txReceipt, contractInstance;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        assert_1.assert.isHexString('bytecode', bytecode);
                        assert_1.assert.doesConformToSchema('txDefaults', txDefaults, json_schemas_1.schemas.txDataSchema, [
                            json_schemas_1.schemas.addressSchema,
                            json_schemas_1.schemas.numberSchema,
                            json_schemas_1.schemas.jsNumber,
                        ]);
                        provider = utils_1.providerUtils.standardizeOrThrow(supportedProvider);
                        constructorAbi = base_contract_1.BaseContract._lookupConstructorAbi(abi);
                        base_contract_1.BaseContract._formatABIDataItemList(constructorAbi.inputs, [], base_contract_1.BaseContract._bigNumberToString);
                        iface = new ethers.utils.Interface(abi);
                        deployInfo = iface.deployFunction;
                        txData = deployInfo.encode(bytecode, []);
                        web3Wrapper = new web3_wrapper_1.Web3Wrapper(provider);
                        return [4 /*yield*/, base_contract_1.BaseContract._applyDefaultsToTxDataAsync({ data: txData }, txDefaults, web3Wrapper.estimateGasAsync.bind(web3Wrapper))];
                    case 1:
                        txDataWithDefaults = _a.sent();
                        return [4 /*yield*/, web3Wrapper.sendTransactionAsync(txDataWithDefaults)];
                    case 2:
                        txHash = _a.sent();
                        utils_1.logUtils.log("transactionHash: " + txHash);
                        return [4 /*yield*/, web3Wrapper.awaitTransactionSuccessAsync(txHash)];
                    case 3:
                        txReceipt = _a.sent();
                        utils_1.logUtils.log("ERC1155Proxy successfully deployed at " + txReceipt.contractAddress);
                        contractInstance = new ERC1155ProxyContract(txReceipt.contractAddress, provider, txDefaults, logDecodeDependencies);
                        contractInstance.constructorArgs = [];
                        return [2 /*return*/, contractInstance];
                }
            });
        });
    };
    /**
     * @returns      The contract ABI
     */
    ERC1155ProxyContract.ABI = function () {
        var abi = [
            {
                constant: false,
                inputs: [
                    {
                        name: 'target',
                        type: 'address',
                    },
                ],
                name: 'addAuthorizedAddress',
                outputs: [],
                payable: false,
                stateMutability: 'nonpayable',
                type: 'function',
            },
            {
                constant: true,
                inputs: [
                    {
                        name: 'index_0',
                        type: 'uint256',
                    },
                ],
                name: 'authorities',
                outputs: [
                    {
                        name: '',
                        type: 'address',
                    },
                ],
                payable: false,
                stateMutability: 'view',
                type: 'function',
            },
            {
                constant: false,
                inputs: [
                    {
                        name: 'target',
                        type: 'address',
                    },
                ],
                name: 'removeAuthorizedAddress',
                outputs: [],
                payable: false,
                stateMutability: 'nonpayable',
                type: 'function',
            },
            {
                constant: true,
                inputs: [],
                name: 'owner',
                outputs: [
                    {
                        name: '',
                        type: 'address',
                    },
                ],
                payable: false,
                stateMutability: 'view',
                type: 'function',
            },
            {
                constant: false,
                inputs: [
                    {
                        name: 'target',
                        type: 'address',
                    },
                    {
                        name: 'index',
                        type: 'uint256',
                    },
                ],
                name: 'removeAuthorizedAddressAtIndex',
                outputs: [],
                payable: false,
                stateMutability: 'nonpayable',
                type: 'function',
            },
            {
                constant: false,
                inputs: [
                    {
                        name: 'assetData',
                        type: 'bytes',
                    },
                    {
                        name: 'from',
                        type: 'address',
                    },
                    {
                        name: 'to',
                        type: 'address',
                    },
                    {
                        name: 'amount',
                        type: 'uint256',
                    },
                ],
                name: 'transferFrom',
                outputs: [],
                payable: false,
                stateMutability: 'nonpayable',
                type: 'function',
            },
            {
                constant: true,
                inputs: [],
                name: 'getProxyId',
                outputs: [
                    {
                        name: '',
                        type: 'bytes4',
                    },
                ],
                payable: false,
                stateMutability: 'pure',
                type: 'function',
            },
            {
                constant: true,
                inputs: [
                    {
                        name: 'index_0',
                        type: 'address',
                    },
                ],
                name: 'authorized',
                outputs: [
                    {
                        name: '',
                        type: 'bool',
                    },
                ],
                payable: false,
                stateMutability: 'view',
                type: 'function',
            },
            {
                constant: true,
                inputs: [],
                name: 'getAuthorizedAddresses',
                outputs: [
                    {
                        name: '',
                        type: 'address[]',
                    },
                ],
                payable: false,
                stateMutability: 'view',
                type: 'function',
            },
            {
                constant: false,
                inputs: [
                    {
                        name: 'newOwner',
                        type: 'address',
                    },
                ],
                name: 'transferOwnership',
                outputs: [],
                payable: false,
                stateMutability: 'nonpayable',
                type: 'function',
            },
            {
                anonymous: false,
                inputs: [
                    {
                        name: 'target',
                        type: 'address',
                        indexed: true,
                    },
                    {
                        name: 'caller',
                        type: 'address',
                        indexed: true,
                    },
                ],
                name: 'AuthorizedAddressAdded',
                outputs: [],
                type: 'event',
            },
            {
                anonymous: false,
                inputs: [
                    {
                        name: 'target',
                        type: 'address',
                        indexed: true,
                    },
                    {
                        name: 'caller',
                        type: 'address',
                        indexed: true,
                    },
                ],
                name: 'AuthorizedAddressRemoved',
                outputs: [],
                type: 'event',
            },
        ];
        return abi;
    };
    /**
     * Subscribe to an event type emitted by the ERC1155Proxy contract.
     * @param eventName The ERC1155Proxy contract event you would like to subscribe to.
     * @param indexFilterValues An object where the keys are indexed args returned by the event and
     * the value is the value you are interested in. E.g `{maker: aUserAddressHex}`
     * @param callback Callback that gets called when a log is added/removed
     * @param isVerbose Enable verbose subscription warnings (e.g recoverable network issues encountered)
     * @return Subscription token used later to unsubscribe
     */
    ERC1155ProxyContract.prototype.subscribe = function (eventName, indexFilterValues, callback, isVerbose, blockPollingIntervalMs) {
        if (isVerbose === void 0) { isVerbose = false; }
        assert_1.assert.doesBelongToStringEnum('eventName', eventName, ERC1155ProxyEvents);
        assert_1.assert.doesConformToSchema('indexFilterValues', indexFilterValues, json_schemas_1.schemas.indexFilterValuesSchema);
        assert_1.assert.isFunction('callback', callback);
        var subscriptionToken = this._subscriptionManager.subscribe(this.address, eventName, indexFilterValues, ERC1155ProxyContract.ABI(), callback, isVerbose, blockPollingIntervalMs);
        return subscriptionToken;
    };
    /**
     * Cancel a subscription
     * @param subscriptionToken Subscription token returned by `subscribe()`
     */
    ERC1155ProxyContract.prototype.unsubscribe = function (subscriptionToken) {
        this._subscriptionManager.unsubscribe(subscriptionToken);
    };
    /**
     * Cancels all existing subscriptions
     */
    ERC1155ProxyContract.prototype.unsubscribeAll = function () {
        this._subscriptionManager.unsubscribeAll();
    };
    /**
     * Gets historical logs without creating a subscription
     * @param eventName The ERC1155Proxy contract event you would like to subscribe to.
     * @param blockRange Block range to get logs from.
     * @param indexFilterValues An object where the keys are indexed args returned by the event and
     * the value is the value you are interested in. E.g `{_from: aUserAddressHex}`
     * @return Array of logs that match the parameters
     */
    ERC1155ProxyContract.prototype.getLogsAsync = function (eventName, blockRange, indexFilterValues) {
        return __awaiter(this, void 0, void 0, function () {
            var logs;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        assert_1.assert.doesBelongToStringEnum('eventName', eventName, ERC1155ProxyEvents);
                        assert_1.assert.doesConformToSchema('blockRange', blockRange, json_schemas_1.schemas.blockRangeSchema);
                        assert_1.assert.doesConformToSchema('indexFilterValues', indexFilterValues, json_schemas_1.schemas.indexFilterValuesSchema);
                        return [4 /*yield*/, this._subscriptionManager.getLogsAsync(this.address, eventName, blockRange, indexFilterValues, ERC1155ProxyContract.ABI())];
                    case 1:
                        logs = _a.sent();
                        return [2 /*return*/, logs];
                }
            });
        });
    };
    return ERC1155ProxyContract;
}(base_contract_1.BaseContract));
exports.ERC1155ProxyContract = ERC1155ProxyContract;
// tslint:disable:max-file-line-count
// tslint:enable:no-unbound-method no-parameter-reassignment no-consecutive-blank-lines ordered-imports align
// tslint:enable:trailing-comma whitespace no-trailing-whitespace
//# sourceMappingURL=erc1155_proxy.js.map