import { BaseContract, PromiseWithTransactionHash } from '@0x/base-contract';
import { BlockParamLiteral, CallData, ContractAbi, ContractArtifact, TransactionReceiptWithDecodedLogs, TxData, SupportedProvider } from 'ethereum-types';
import { BigNumber } from '@0x/utils';
import { SimpleContractArtifact } from '@0x/types';
export declare class CoordinatorContract extends BaseContract {
    /**
     * Recovers the address of a signer given a hash and signature.
     */
    getSignerAddress: {
        /**
         * Sends a read-only call to the contract method. Returns the result that would happen if one were to send an
         * Ethereum transaction to this method, given the current state of the blockchain. Calls do not cost gas
         * since they don't modify state.
         * @param hash Any 32 byte hash.
         * @param signature Proof that the hash has been signed by signer.
         */
        callAsync(hash: string, signature: string, callData?: Partial<CallData>, defaultBlock?: number | BlockParamLiteral | undefined): Promise<string>;
        /**
         * Returns the ABI encoded transaction data needed to send an Ethereum transaction calling this method. Before
         * sending the Ethereum tx, this encoded tx data can first be sent to a separate signing service or can be used
         * to create a 0x transaction (see protocol spec for more details).
         * @param hash Any 32 byte hash.
         * @param signature Proof that the hash has been signed by signer.
         * @returns The ABI encoded transaction data as a string
         */
        getABIEncodedTransactionData(hash: string, signature: string): string;
        /**
         * Decode the ABI-encoded transaction data into its input arguments
         * @param callData The ABI-encoded transaction data
         * @returns An array representing the input arguments in order. Keynames of nested structs are preserved.
         */
        getABIDecodedTransactionData(callData: string): string;
        /**
         * Decode the ABI-encoded return data from a transaction
         * @param returnData the data returned after transaction execution
         * @returns An array representing the output results in order.  Keynames of nested structs are preserved.
         */
        getABIDecodedReturnData(returnData: string): string;
    };
    /**
     * Calculates the EIP712 hash of a 0x transaction using the domain separator of the Exchange contract.
     */
    getTransactionHash: {
        /**
         * Sends a read-only call to the contract method. Returns the result that would happen if one were to send an
         * Ethereum transaction to this method, given the current state of the blockchain. Calls do not cost gas
         * since they don't modify state.
         * @param transaction 0x transaction containing salt, signerAddress, and data.
         * @returns EIP712 hash of the transaction with the domain separator of this contract.
         */
        callAsync(transaction: {
            salt: BigNumber;
            signerAddress: string;
            data: string;
        }, callData?: Partial<CallData>, defaultBlock?: number | BlockParamLiteral | undefined): Promise<string>;
        /**
         * Returns the ABI encoded transaction data needed to send an Ethereum transaction calling this method. Before
         * sending the Ethereum tx, this encoded tx data can first be sent to a separate signing service or can be used
         * to create a 0x transaction (see protocol spec for more details).
         * @param transaction 0x transaction containing salt, signerAddress, and data.
         * @returns The ABI encoded transaction data as a string
         */
        getABIEncodedTransactionData(transaction: {
            salt: BigNumber;
            signerAddress: string;
            data: string;
        }): string;
        /**
         * Decode the ABI-encoded transaction data into its input arguments
         * @param callData The ABI-encoded transaction data
         * @returns An array representing the input arguments in order. Keynames of nested structs are preserved.
         */
        getABIDecodedTransactionData(callData: string): {
            salt: BigNumber;
            signerAddress: string;
            data: string;
        };
        /**
         * Decode the ABI-encoded return data from a transaction
         * @param returnData the data returned after transaction execution
         * @returns An array representing the output results in order.  Keynames of nested structs are preserved.
         */
        getABIDecodedReturnData(returnData: string): string;
    };
    /**
     * Calculated the EIP712 hash of the Coordinator approval mesasage using the domain separator of this contract.
     */
    getCoordinatorApprovalHash: {
        /**
         * Sends a read-only call to the contract method. Returns the result that would happen if one were to send an
         * Ethereum transaction to this method, given the current state of the blockchain. Calls do not cost gas
         * since they don't modify state.
         * @param approval Coordinator approval message containing the transaction
         *     hash, transaction signature, and expiration of the approval.
         * @returns EIP712 hash of the Coordinator approval message with the domain separator of this contract.
         */
        callAsync(approval: {
            txOrigin: string;
            transactionHash: string;
            transactionSignature: string;
            approvalExpirationTimeSeconds: BigNumber;
        }, callData?: Partial<CallData>, defaultBlock?: number | BlockParamLiteral | undefined): Promise<string>;
        /**
         * Returns the ABI encoded transaction data needed to send an Ethereum transaction calling this method. Before
         * sending the Ethereum tx, this encoded tx data can first be sent to a separate signing service or can be used
         * to create a 0x transaction (see protocol spec for more details).
         * @param approval Coordinator approval message containing the transaction
         *     hash, transaction signature, and expiration of the approval.
         * @returns The ABI encoded transaction data as a string
         */
        getABIEncodedTransactionData(approval: {
            txOrigin: string;
            transactionHash: string;
            transactionSignature: string;
            approvalExpirationTimeSeconds: BigNumber;
        }): string;
        /**
         * Decode the ABI-encoded transaction data into its input arguments
         * @param callData The ABI-encoded transaction data
         * @returns An array representing the input arguments in order. Keynames of nested structs are preserved.
         */
        getABIDecodedTransactionData(callData: string): {
            txOrigin: string;
            transactionHash: string;
            transactionSignature: string;
            approvalExpirationTimeSeconds: BigNumber;
        };
        /**
         * Decode the ABI-encoded return data from a transaction
         * @param returnData the data returned after transaction execution
         * @returns An array representing the output results in order.  Keynames of nested structs are preserved.
         */
        getABIDecodedReturnData(returnData: string): string;
    };
    /**
     * Executes a 0x transaction that has been signed by the feeRecipients that correspond to each order in the transaction's Exchange calldata.
     */
    executeTransaction: {
        /**
         * Sends an Ethereum transaction executing this method with the supplied parameters. This is a read/write
         * Ethereum operation and will cost gas.
         * @param transaction 0x transaction containing salt, signerAddress, and data.
         * @param txOrigin Required signer of Ethereum transaction calling this
         *     function.
         * @param transactionSignature Proof that the transaction has been signed by
         *     the signer.
         * @param approvalExpirationTimeSeconds Array of expiration times in seconds
         *     for which each corresponding approval signature expires.
         * @param approvalSignatures Array of signatures that correspond to the
         *     feeRecipients of each order in the transaction's Exchange calldata.
         * @param txData Additional data for transaction
         * @returns The hash of the transaction
         */
        sendTransactionAsync(transaction: {
            salt: BigNumber;
            signerAddress: string;
            data: string;
        }, txOrigin: string, transactionSignature: string, approvalExpirationTimeSeconds: BigNumber[], approvalSignatures: string[], txData?: Partial<TxData> | undefined): Promise<string>;
        /**
         * Sends an Ethereum transaction and waits until the transaction has been successfully mined without reverting.
         * If the transaction was mined, but reverted, an error is thrown.
         * @param transaction 0x transaction containing salt, signerAddress, and data.
         * @param txOrigin Required signer of Ethereum transaction calling this
         *     function.
         * @param transactionSignature Proof that the transaction has been signed by
         *     the signer.
         * @param approvalExpirationTimeSeconds Array of expiration times in seconds
         *     for which each corresponding approval signature expires.
         * @param approvalSignatures Array of signatures that correspond to the
         *     feeRecipients of each order in the transaction's Exchange calldata.
         * @param txData Additional data for transaction
         * @param pollingIntervalMs Interval at which to poll for success
         * @returns A promise that resolves when the transaction is successful
         */
        awaitTransactionSuccessAsync(transaction: {
            salt: BigNumber;
            signerAddress: string;
            data: string;
        }, txOrigin: string, transactionSignature: string, approvalExpirationTimeSeconds: BigNumber[], approvalSignatures: string[], txData?: Partial<TxData> | undefined, pollingIntervalMs?: number | undefined, timeoutMs?: number | undefined): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs>;
        /**
         * Estimates the gas cost of sending an Ethereum transaction calling this method with these arguments.
         * @param transaction 0x transaction containing salt, signerAddress, and data.
         * @param txOrigin Required signer of Ethereum transaction calling this
         *     function.
         * @param transactionSignature Proof that the transaction has been signed by
         *     the signer.
         * @param approvalExpirationTimeSeconds Array of expiration times in seconds
         *     for which each corresponding approval signature expires.
         * @param approvalSignatures Array of signatures that correspond to the
         *     feeRecipients of each order in the transaction's Exchange calldata.
         * @param txData Additional data for transaction
         * @returns The hash of the transaction
         */
        estimateGasAsync(transaction: {
            salt: BigNumber;
            signerAddress: string;
            data: string;
        }, txOrigin: string, transactionSignature: string, approvalExpirationTimeSeconds: BigNumber[], approvalSignatures: string[], txData?: Partial<TxData> | undefined): Promise<number>;
        validateAndSendTransactionAsync(transaction: {
            salt: BigNumber;
            signerAddress: string;
            data: string;
        }, txOrigin: string, transactionSignature: string, approvalExpirationTimeSeconds: BigNumber[], approvalSignatures: string[], txData?: Partial<TxData> | undefined): Promise<string>;
        /**
         * Sends a read-only call to the contract method. Returns the result that would happen if one were to send an
         * Ethereum transaction to this method, given the current state of the blockchain. Calls do not cost gas
         * since they don't modify state.
         * @param transaction 0x transaction containing salt, signerAddress, and data.
         * @param txOrigin Required signer of Ethereum transaction calling this
         *     function.
         * @param transactionSignature Proof that the transaction has been signed by
         *     the signer.
         * @param approvalExpirationTimeSeconds Array of expiration times in seconds
         *     for which each corresponding approval signature expires.
         * @param approvalSignatures Array of signatures that correspond to the
         *     feeRecipients of each order in the transaction's Exchange calldata.
         */
        callAsync(transaction: {
            salt: BigNumber;
            signerAddress: string;
            data: string;
        }, txOrigin: string, transactionSignature: string, approvalExpirationTimeSeconds: BigNumber[], approvalSignatures: string[], callData?: Partial<CallData>, defaultBlock?: number | BlockParamLiteral | undefined): Promise<void>;
        /**
         * Returns the ABI encoded transaction data needed to send an Ethereum transaction calling this method. Before
         * sending the Ethereum tx, this encoded tx data can first be sent to a separate signing service or can be used
         * to create a 0x transaction (see protocol spec for more details).
         * @param transaction 0x transaction containing salt, signerAddress, and data.
         * @param txOrigin Required signer of Ethereum transaction calling this
         *     function.
         * @param transactionSignature Proof that the transaction has been signed by
         *     the signer.
         * @param approvalExpirationTimeSeconds Array of expiration times in seconds
         *     for which each corresponding approval signature expires.
         * @param approvalSignatures Array of signatures that correspond to the
         *     feeRecipients of each order in the transaction's Exchange calldata.
         * @returns The ABI encoded transaction data as a string
         */
        getABIEncodedTransactionData(transaction: {
            salt: BigNumber;
            signerAddress: string;
            data: string;
        }, txOrigin: string, transactionSignature: string, approvalExpirationTimeSeconds: BigNumber[], approvalSignatures: string[]): string;
        /**
         * Decode the ABI-encoded transaction data into its input arguments
         * @param callData The ABI-encoded transaction data
         * @returns An array representing the input arguments in order. Keynames of nested structs are preserved.
         */
        getABIDecodedTransactionData(callData: string): [{
            salt: BigNumber;
            signerAddress: string;
            data: string;
        }, string, string, BigNumber[], string[]];
        /**
         * Decode the ABI-encoded return data from a transaction
         * @param returnData the data returned after transaction execution
         * @returns An array representing the output results in order.  Keynames of nested structs are preserved.
         */
        getABIDecodedReturnData(returnData: string): void;
    };
    EIP712_EXCHANGE_DOMAIN_HASH: {
        /**
         * Sends a read-only call to the contract method. Returns the result that would happen if one were to send an
         * Ethereum transaction to this method, given the current state of the blockchain. Calls do not cost gas
         * since they don't modify state.
         */
        callAsync(callData?: Partial<CallData>, defaultBlock?: number | BlockParamLiteral | undefined): Promise<string>;
        /**
         * Returns the ABI encoded transaction data needed to send an Ethereum transaction calling this method. Before
         * sending the Ethereum tx, this encoded tx data can first be sent to a separate signing service or can be used
         * to create a 0x transaction (see protocol spec for more details).
         * @returns The ABI encoded transaction data as a string
         */
        getABIEncodedTransactionData(): string;
        /**
         * Decode the ABI-encoded transaction data into its input arguments
         * @param callData The ABI-encoded transaction data
         * @returns An array representing the input arguments in order. Keynames of nested structs are preserved.
         */
        getABIDecodedTransactionData(callData: string): void;
        /**
         * Decode the ABI-encoded return data from a transaction
         * @param returnData the data returned after transaction execution
         * @returns An array representing the output results in order.  Keynames of nested structs are preserved.
         */
        getABIDecodedReturnData(returnData: string): string;
    };
    /**
     * Validates that the 0x transaction has been approved by all of the feeRecipients
     * that correspond to each order in the transaction's Exchange calldata.
     */
    assertValidCoordinatorApprovals: {
        /**
         * Sends a read-only call to the contract method. Returns the result that would happen if one were to send an
         * Ethereum transaction to this method, given the current state of the blockchain. Calls do not cost gas
         * since they don't modify state.
         * @param transaction 0x transaction containing salt, signerAddress, and data.
         * @param txOrigin Required signer of Ethereum transaction calling this
         *     function.
         * @param transactionSignature Proof that the transaction has been signed by
         *     the signer.
         * @param approvalExpirationTimeSeconds Array of expiration times in seconds
         *     for which each corresponding approval signature expires.
         * @param approvalSignatures Array of signatures that correspond to the
         *     feeRecipients of each order in the transaction's Exchange calldata.
         */
        callAsync(transaction: {
            salt: BigNumber;
            signerAddress: string;
            data: string;
        }, txOrigin: string, transactionSignature: string, approvalExpirationTimeSeconds: BigNumber[], approvalSignatures: string[], callData?: Partial<CallData>, defaultBlock?: number | BlockParamLiteral | undefined): Promise<void>;
        /**
         * Returns the ABI encoded transaction data needed to send an Ethereum transaction calling this method. Before
         * sending the Ethereum tx, this encoded tx data can first be sent to a separate signing service or can be used
         * to create a 0x transaction (see protocol spec for more details).
         * @param transaction 0x transaction containing salt, signerAddress, and data.
         * @param txOrigin Required signer of Ethereum transaction calling this
         *     function.
         * @param transactionSignature Proof that the transaction has been signed by
         *     the signer.
         * @param approvalExpirationTimeSeconds Array of expiration times in seconds
         *     for which each corresponding approval signature expires.
         * @param approvalSignatures Array of signatures that correspond to the
         *     feeRecipients of each order in the transaction's Exchange calldata.
         * @returns The ABI encoded transaction data as a string
         */
        getABIEncodedTransactionData(transaction: {
            salt: BigNumber;
            signerAddress: string;
            data: string;
        }, txOrigin: string, transactionSignature: string, approvalExpirationTimeSeconds: BigNumber[], approvalSignatures: string[]): string;
        /**
         * Decode the ABI-encoded transaction data into its input arguments
         * @param callData The ABI-encoded transaction data
         * @returns An array representing the input arguments in order. Keynames of nested structs are preserved.
         */
        getABIDecodedTransactionData(callData: string): [{
            salt: BigNumber;
            signerAddress: string;
            data: string;
        }, string, string, BigNumber[], string[]];
        /**
         * Decode the ABI-encoded return data from a transaction
         * @param returnData the data returned after transaction execution
         * @returns An array representing the output results in order.  Keynames of nested structs are preserved.
         */
        getABIDecodedReturnData(returnData: string): void;
    };
    /**
     * Decodes the orders from Exchange calldata representing any fill method.
     */
    decodeOrdersFromFillData: {
        /**
         * Sends a read-only call to the contract method. Returns the result that would happen if one were to send an
         * Ethereum transaction to this method, given the current state of the blockchain. Calls do not cost gas
         * since they don't modify state.
         * @param data Exchange calldata representing a fill method.
         * @returns The orders from the Exchange calldata.
         */
        callAsync(data: string, callData?: Partial<CallData>, defaultBlock?: number | BlockParamLiteral | undefined): Promise<{
            makerAddress: string;
            takerAddress: string;
            feeRecipientAddress: string;
            senderAddress: string;
            makerAssetAmount: BigNumber;
            takerAssetAmount: BigNumber;
            makerFee: BigNumber;
            takerFee: BigNumber;
            expirationTimeSeconds: BigNumber;
            salt: BigNumber;
            makerAssetData: string;
            takerAssetData: string;
        }[]>;
        /**
         * Returns the ABI encoded transaction data needed to send an Ethereum transaction calling this method. Before
         * sending the Ethereum tx, this encoded tx data can first be sent to a separate signing service or can be used
         * to create a 0x transaction (see protocol spec for more details).
         * @param data Exchange calldata representing a fill method.
         * @returns The ABI encoded transaction data as a string
         */
        getABIEncodedTransactionData(data: string): string;
        /**
         * Decode the ABI-encoded transaction data into its input arguments
         * @param callData The ABI-encoded transaction data
         * @returns An array representing the input arguments in order. Keynames of nested structs are preserved.
         */
        getABIDecodedTransactionData(callData: string): string;
        /**
         * Decode the ABI-encoded return data from a transaction
         * @param returnData the data returned after transaction execution
         * @returns An array representing the output results in order.  Keynames of nested structs are preserved.
         */
        getABIDecodedReturnData(returnData: string): {
            makerAddress: string;
            takerAddress: string;
            feeRecipientAddress: string;
            senderAddress: string;
            makerAssetAmount: BigNumber;
            takerAssetAmount: BigNumber;
            makerFee: BigNumber;
            takerFee: BigNumber;
            expirationTimeSeconds: BigNumber;
            salt: BigNumber;
            makerAssetData: string;
            takerAssetData: string;
        }[];
    };
    EIP712_COORDINATOR_DOMAIN_HASH: {
        /**
         * Sends a read-only call to the contract method. Returns the result that would happen if one were to send an
         * Ethereum transaction to this method, given the current state of the blockchain. Calls do not cost gas
         * since they don't modify state.
         */
        callAsync(callData?: Partial<CallData>, defaultBlock?: number | BlockParamLiteral | undefined): Promise<string>;
        /**
         * Returns the ABI encoded transaction data needed to send an Ethereum transaction calling this method. Before
         * sending the Ethereum tx, this encoded tx data can first be sent to a separate signing service or can be used
         * to create a 0x transaction (see protocol spec for more details).
         * @returns The ABI encoded transaction data as a string
         */
        getABIEncodedTransactionData(): string;
        /**
         * Decode the ABI-encoded transaction data into its input arguments
         * @param callData The ABI-encoded transaction data
         * @returns An array representing the input arguments in order. Keynames of nested structs are preserved.
         */
        getABIDecodedTransactionData(callData: string): void;
        /**
         * Decode the ABI-encoded return data from a transaction
         * @param returnData the data returned after transaction execution
         * @returns An array representing the output results in order.  Keynames of nested structs are preserved.
         */
        getABIDecodedReturnData(returnData: string): string;
    };
    static deployFrom0xArtifactAsync(artifact: ContractArtifact | SimpleContractArtifact, supportedProvider: SupportedProvider, txDefaults: Partial<TxData>, logDecodeDependencies: {
        [contractName: string]: ContractArtifact | SimpleContractArtifact;
    }, _exchange: string): Promise<CoordinatorContract>;
    static deployAsync(bytecode: string, abi: ContractAbi, supportedProvider: SupportedProvider, txDefaults: Partial<TxData>, logDecodeDependencies: {
        [contractName: string]: ContractAbi;
    }, _exchange: string): Promise<CoordinatorContract>;
    /**
     * @returns      The contract ABI
     */
    static ABI(): ContractAbi;
    constructor(address: string, supportedProvider: SupportedProvider, txDefaults?: Partial<TxData>, logDecodeDependencies?: {
        [contractName: string]: ContractAbi;
    });
}
//# sourceMappingURL=coordinator.d.ts.map