"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable-next-line:completed-docs
function formatABIDataItem(abi, value, formatter) {
    var trailingArrayRegex = /\[\d*\]$/;
    if (abi.type.match(trailingArrayRegex)) {
        var arrayItemType_1 = abi.type.replace(trailingArrayRegex, '');
        return value.map(function (val) {
            var arrayItemAbi = __assign({}, abi, { type: arrayItemType_1 });
            return formatABIDataItem(arrayItemAbi, val, formatter);
        });
    }
    else if (abi.type === 'tuple') {
        var formattedTuple_1 = {};
        if (abi.components) {
            abi.components.forEach(function (componentABI) {
                formattedTuple_1[componentABI.name] = formatABIDataItem(componentABI, value[componentABI.name], formatter);
            });
        }
        return formattedTuple_1;
    }
    else {
        return formatter(abi.type, value);
    }
}
exports.formatABIDataItem = formatABIDataItem;
function dataItemsToABIString(dataItems) {
    var types = dataItems.map(function (item) {
        if (item.components) {
            return "(" + dataItemsToABIString(item.components) + ")";
        }
        else {
            return item.type;
        }
    });
    return "" + types.join(',');
}
/**
 * Takes a MethodAbi and returns a function signature for ABI encoding/decoding
 * @return a function signature as a string, e.g. 'functionName(uint256, bytes[])'
 */
function methodAbiToFunctionSignature(methodAbi) {
    var inputs = dataItemsToABIString(methodAbi.inputs);
    return methodAbi.name + "(" + inputs + ")";
}
exports.methodAbiToFunctionSignature = methodAbiToFunctionSignature;
//# sourceMappingURL=utils.js.map