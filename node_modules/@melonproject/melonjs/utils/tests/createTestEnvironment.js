"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const web3_1 = __importDefault(require("web3"));
const Environment_1 = require("../../Environment");
const web3_providers_1 = require("web3-providers");
class TestEnvironment extends Environment_1.Environment {
    constructor(client, options) {
        super(client, options);
        this.accounts = options.accounts;
    }
}
exports.TestEnvironment = TestEnvironment;
function createTestEnvironment(options) {
    return __awaiter(this, void 0, void 0, function* () {
        const port = process.env.GANACHE_PORT || 8555;
        const client = new web3_1.default(new web3_providers_1.HttpProvider(`http://localhost:${port}`), undefined, {
            transactionConfirmationBlocks: 1,
        });
        const accounts = yield client.eth.getAccounts();
        const environment = new TestEnvironment(client.eth, Object.assign(Object.assign({}, options), { accounts }));
        return environment;
    });
}
exports.createTestEnvironment = createTestEnvironment;
