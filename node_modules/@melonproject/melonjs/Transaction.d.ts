import BigNumber from 'bignumber.js';
import { SendOptions as EthSendOptions, EstimateGasOptions as EthEstimateGasOptions, Contract as EthContract } from 'web3-eth-contract';
import { PromiEvent, TransactionReceipt } from 'web3-core';
import { Address } from './Address';
import { Contract } from './Contract';
import { Environment } from './Environment';
export interface SendOptions extends Omit<Omit<Partial<EthSendOptions>, 'value'>, 'gasPrice'> {
    value?: BigNumber;
    amgu?: BigNumber;
    incentive?: BigNumber;
    gasPrice?: string | number;
}
export interface EstimateGasOptions extends Omit<EthEstimateGasOptions, 'value'> {
    value?: BigNumber;
    gasPrice?: string | number;
}
export interface ValidateEthOptions {
    from: Address;
    value: BigNumber;
    gas: number;
    gasPrice: string;
}
export declare class Transaction<T = TransactionReceipt> {
    readonly transaction: any;
    readonly environment: Environment;
    readonly from: Address;
    readonly contract?: EthContract;
    readonly method?: string;
    readonly args?: any;
    readonly value?: BigNumber;
    readonly validate: () => Promise<void>;
    protected readonly amguFn?: (gas: number) => Promise<BigNumber>;
    protected readonly incentiveFn?: (gas: number) => Promise<BigNumber>;
    readonly amguPayable: boolean;
    readonly incentivePayable: boolean;
    constructor(transaction: any, environment: Environment, from: Address, contract?: EthContract, method?: string, args?: any, value?: BigNumber, validate?: () => Promise<void>, amguFn?: (gas: number) => Promise<BigNumber>, incentiveFn?: (gas: number) => Promise<BigNumber>);
    send(options?: SendOptions): PromiEvent<T>;
    prepare(options?: EstimateGasOptions): Promise<SendOptions>;
    protected estimate(options?: EstimateGasOptions): Promise<number>;
    checkEthBalance(options: SendOptions): Promise<void>;
    protected checkSendOptions(options?: SendOptions): {
        gasPrice: string | number;
        gas: number;
        from: string;
        value: string;
    };
}
export declare class Deployment<T extends Contract> extends Transaction<T> {
    readonly clazz: typeof Contract;
    readonly environment: Environment;
    readonly transaction: any;
    readonly from: Address;
    readonly args?: any;
    constructor(clazz: typeof Contract, environment: Environment, transaction: any, from: Address, args?: any);
    send(gas?: number): PromiEvent<T>;
    send(options?: SendOptions): PromiEvent<T>;
}
