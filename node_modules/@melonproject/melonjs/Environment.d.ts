import { Eth } from 'web3-eth';
import { DeploymentOutput } from './Deployment';
import { TokenDefinition } from './utils/availableTokens';
import { ExchangeDefinition } from './utils/availableExchanges';
import { PolicyDefinition } from './utils/availablePolicies';
import { Address } from './Address';
export interface CacheHandler {
    has: (key: string) => boolean;
    get: (key: string) => any;
    set: (key: string, value: any) => any;
    reset: () => void;
}
export interface EnvironmentOptions {
    cache?: CacheHandler;
    exchanges?: ExchangeDefinition[];
    tokens?: TokenDefinition[];
    policies?: PolicyDefinition[];
}
export declare class Environment {
    readonly client: Eth;
    readonly cache?: CacheHandler;
    constructor(client: Eth, options?: EnvironmentOptions);
}
export declare class DeployedEnvironment extends Environment {
    readonly network: number;
    readonly deployment: DeploymentOutput;
    readonly tokens: TokenDefinition[];
    readonly exchanges: ExchangeDefinition[];
    readonly policies: PolicyDefinition[];
    constructor(eth: Eth, network: number, deployment: DeploymentOutput, options?: EnvironmentOptions);
    getToken(symbol: string): TokenDefinition;
    getToken(address: Address): TokenDefinition;
    getExchange(id: string): ExchangeDefinition;
    getExchange(addresses: {
        exchange: Address;
        adapter: Address;
    }): ExchangeDefinition;
}
