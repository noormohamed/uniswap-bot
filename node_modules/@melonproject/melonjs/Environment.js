"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const availableTokens_1 = require("./utils/availableTokens");
const availableExchanges_1 = require("./utils/availableExchanges");
const availablePolicies_1 = require("./utils/availablePolicies");
const sameAddress_1 = require("./utils/sameAddress");
class Environment {
    constructor(client, options) {
        this.client = client;
        this.cache = options === null || options === void 0 ? void 0 : options.cache;
    }
}
exports.Environment = Environment;
class DeployedEnvironment extends Environment {
    constructor(eth, network, deployment, options) {
        var _a, _b, _c;
        super(eth, options);
        this.network = network;
        this.deployment = deployment;
        this.policies = availablePolicies_1.availablePolicies().concat((_a = options === null || options === void 0 ? void 0 : options.policies) !== null && _a !== void 0 ? _a : []);
        this.tokens = availableTokens_1.availableTokens(deployment).concat((_b = options === null || options === void 0 ? void 0 : options.tokens) !== null && _b !== void 0 ? _b : []);
        this.exchanges = availableExchanges_1.availableExchanges(deployment).concat((_c = options === null || options === void 0 ? void 0 : options.exchanges) !== null && _c !== void 0 ? _c : []);
    }
    getToken(which) {
        const address = which.startsWith('0x');
        const token = this.tokens.find((token) => {
            if (address && sameAddress_1.sameAddress(which, token.address)) {
                return true;
            }
            if (token.symbol === which) {
                return true;
            }
            return false;
        });
        return token;
    }
    getExchange(which) {
        if (typeof which === 'object') {
            const { adapter, exchange } = which;
            if ((adapter === null || adapter === void 0 ? void 0 : adapter.startsWith('0x')) && exchange.startsWith('0x')) {
                return this.exchanges.find((item) => {
                    if (sameAddress_1.sameAddress(adapter, item.adapter) && sameAddress_1.sameAddress(exchange, item.exchange)) {
                        return true;
                    }
                    return false;
                });
            }
        }
        else {
            return this.exchanges.find((item) => {
                if (which === item.id) {
                    return true;
                }
                return false;
            });
        }
        return undefined;
    }
}
exports.DeployedEnvironment = DeployedEnvironment;
