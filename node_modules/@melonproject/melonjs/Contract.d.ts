import BigNumber from 'bignumber.js';
import { AbiItem } from 'web3-utils';
import { Contract as EthContract } from 'web3-eth-contract';
import { Environment } from './Environment';
import { Transaction, Deployment } from './Transaction';
import { Address } from './Address';
interface CreateTransactionArgs<TArgs> {
    method: string;
    from: Address;
    args?: TArgs;
    value?: BigNumber;
    validate?: () => Promise<void>;
    amgu?: (gas: number) => Promise<BigNumber>;
    incentive?: (gas: number) => Promise<BigNumber>;
}
export declare class Contract {
    readonly environment: Environment;
    static readonly abi: AbiItem[];
    readonly contract: EthContract;
    constructor(environment: Environment, contract: EthContract);
    constructor(environment: Environment, address: Address);
    constructor(environment: Environment, address: any);
    static createDeployment<TContract extends Contract, TArgs extends any[] = any[]>(environment: Environment, bytecode: string, from: Address, args?: TArgs): Deployment<TContract>;
    protected createTransaction<TArgs extends any[] = any[]>(args: CreateTransactionArgs<TArgs>): Transaction<import("web3-core").TransactionReceipt>;
    protected makeCall<TReturn = any, TArgs extends any[] = any[]>(method: string, args?: TArgs, block?: number): Promise<TReturn>;
    private doMakeCall;
    getEthBalance(block?: number): Promise<BigNumber>;
}
export {};
