"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lru_cache_1 = __importDefault(require("lru-cache"));
const web3_eth_1 = require("web3-eth");
const web3_providers_1 = require("web3-providers");
const Contract_1 = require("./Contract");
const Environment_1 = require("./Environment");
const IPriceSource_1 = require("./contracts/prices/IPriceSource");
const Hub_1 = require("./contracts/fund/hub/Hub");
const ERC20WithFields_1 = require("./contracts/dependencies/token/ERC20WithFields");
const toBigNumber_1 = require("./utils/toBigNumber");
describe('CacheHandler', () => {
    let client;
    let cache;
    beforeAll(() => {
        client = new web3_eth_1.Eth(new web3_providers_1.HttpProvider('https://mock.node'));
    });
    beforeEach(() => {
        cache = new lru_cache_1.default();
    });
    afterEach(() => {
        jest.clearAllMocks();
    });
    it('calls should be cached when using cache handler and block number', () => __awaiter(void 0, void 0, void 0, function* () {
        const environment = new Environment_1.Environment(client, {
            cache,
        });
        const source = new IPriceSource_1.IPriceSource(environment, '0x0');
        // @ts-ignore
        const spy = jest.spyOn(source, 'doMakeCall').mockReturnValue(Date.now());
        yield source.getLastUpdate(1);
        yield source.getLastUpdate(1);
        expect(spy).toHaveBeenCalledTimes(1);
    }));
    it('calls should not be cached when not using a cache handler', () => __awaiter(void 0, void 0, void 0, function* () {
        const environment = new Environment_1.Environment(client);
        const source = new IPriceSource_1.IPriceSource(environment, '0x0');
        // @ts-ignore
        const spy = jest.spyOn(source, 'doMakeCall').mockReturnValue(Date.now());
        yield source.getLastUpdate(1);
        yield source.getLastUpdate(1);
        expect(spy).toHaveBeenCalledTimes(2);
    }));
    it('cache should be missed if the block numbers do not match', () => __awaiter(void 0, void 0, void 0, function* () {
        const environment = new Environment_1.Environment(client, {
            cache,
        });
        const source = new IPriceSource_1.IPriceSource(environment, '0x0');
        // @ts-ignore
        const spy = jest.spyOn(source, 'doMakeCall').mockReturnValue(Date.now());
        yield source.getLastUpdate(1);
        yield source.getLastUpdate(2);
        expect(spy).toHaveBeenCalledTimes(2);
    }));
    it('cache should be missed if addresses do not match', () => __awaiter(void 0, void 0, void 0, function* () {
        const environment = new Environment_1.Environment(client, {
            cache,
        });
        const hubOne = new Hub_1.Hub(environment, '0x0');
        const hubTwo = new Hub_1.Hub(environment, '0x1');
        // @ts-ignore
        const spy = jest.spyOn(Contract_1.Contract.prototype, 'doMakeCall').mockReturnValue(Date.now());
        yield hubOne.getCreationTime(1);
        yield hubTwo.getCreationTime(2);
        expect(spy).toHaveBeenCalledTimes(2);
    }));
    it('cache should be missed if arguments do not match', () => __awaiter(void 0, void 0, void 0, function* () {
        const environment = new Environment_1.Environment(client, {
            cache,
        });
        const instance = new ERC20WithFields_1.ERC20WithFields(environment, '0x0');
        // @ts-ignore
        const spy = jest.spyOn(instance, 'doMakeCall').mockReturnValue(toBigNumber_1.toBigNumber(100));
        yield instance.getBalanceOf('0x0', 1);
        yield instance.getBalanceOf('0x1', 1);
        expect(spy).toHaveBeenCalledTimes(2);
    }));
    it('cache should be hit if arguments match', () => __awaiter(void 0, void 0, void 0, function* () {
        const environment = new Environment_1.Environment(client, {
            cache,
        });
        const instance = new ERC20WithFields_1.ERC20WithFields(environment, '0x0');
        // @ts-ignore
        const spy = jest.spyOn(instance, 'doMakeCall').mockReturnValue(toBigNumber_1.toBigNumber(100));
        yield instance.getBalanceOf('0x0', 1);
        yield instance.getBalanceOf('0x0', 1);
        expect(spy).toHaveBeenCalledTimes(1);
    }));
});
