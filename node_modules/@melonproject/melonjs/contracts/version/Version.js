"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Version_abi_1 = require("../../abis/Version.abi");
const Contract_1 = require("../../Contract");
const FundFactory_1 = require("../factory/FundFactory");
const applyMixins_1 = require("../../utils/applyMixins");
const sameAddress_1 = require("../../utils/sameAddress");
const ValidationError_1 = require("../../errors/ValidationError");
class OnlyManagerCanShutDownFundError extends ValidationError_1.ValidationError {
    constructor(message = 'Only the manager can shutdown their fund.') {
        super(message);
        this.name = 'OnlyManagerCanShutDownFundError';
    }
}
exports.OnlyManagerCanShutDownFundError = OnlyManagerCanShutDownFundError;
class Version extends Contract_1.Contract {
    static deploy(environment, bytecode, from, args) {
        return super.createDeployment(environment, bytecode, from, [
            args.accountingFactory,
            args.feeManagerFactory,
            args.participationFactory,
            args.sharesFactory,
            args.tradingFactory,
            args.vaultFactory,
            args.policyManagerFactory,
            args.registry,
            args.postDeployOwner,
        ]);
    }
    /**
     * Shut down a fund
     *
     * @param from The address of the sender
     * @param hub The address of the fund hub
     * @param block The block number to execute the call on.
     */
    shutDownFund(from, hub) {
        const validate = () => __awaiter(this, void 0, void 0, function* () {
            const managersToHubs = yield this.getManagersToHubs(from);
            if (!sameAddress_1.sameAddress(managersToHubs, hub)) {
                throw new OnlyManagerCanShutDownFundError();
            }
        });
        return this.createTransaction({ from, method: 'shutDownFund', args: [hub], validate });
    }
}
exports.Version = Version;
Version.abi = Version_abi_1.VersionAbi;
applyMixins_1.applyMixins(Version, [FundFactory_1.FundFactory]);
