"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const createTestEnvironment_1 = require("../../utils/tests/createTestEnvironment");
const randomAddress_1 = require("../../utils/tests/randomAddress");
const sameAddress_1 = require("../../utils/sameAddress");
const deployVersion_1 = require("../../utils/tests/deployVersion");
const deployWeth_1 = require("../../utils/tests/deployWeth");
const deployRegistry_1 = require("../../utils/tests/deployRegistry");
const range_1 = require("../../utils/range");
describe('Version', () => {
    let environment;
    let version;
    let registry;
    let weth;
    beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
        environment = yield createTestEnvironment_1.createTestEnvironment();
        weth = yield deployWeth_1.deployWeth(environment, environment.accounts[0]);
        registry = yield deployRegistry_1.deployRegistry(environment, environment.accounts[0], environment.accounts[0]);
        version = yield deployVersion_1.deployVersion(environment, environment.accounts[0], registry, weth);
    }));
    it('should return the native asset', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield registry.getNativeAsset();
        expect(sameAddress_1.sameAddress(result, weth.contract.address)).toBe(true);
    }));
    it('should return the address of the registry', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield version.getRegistry();
        expect(result.startsWith('0x')).toBe(true);
    }));
    it('should create a hub (without spokes)', () => __awaiter(void 0, void 0, void 0, function* () {
        const tx = version.beginSetup(environment.accounts[0], {
            name: 'version-test-fund',
            fees: [randomAddress_1.randomAddress(), randomAddress_1.randomAddress()],
            feeRates: [new bignumber_js_1.default(2).multipliedBy('1e16'), new bignumber_js_1.default(20).multipliedBy('1e16')],
            feePeriods: [new bignumber_js_1.default(0), new bignumber_js_1.default(90).multipliedBy(60 * 60 * 24)],
            exchanges: range_1.range(5).map(() => randomAddress_1.randomAddress()),
            adapters: range_1.range(5).map(() => randomAddress_1.randomAddress()),
            denominationAsset: weth.contract.address,
            defaultAssets: [weth.contract.address],
        });
        const txResult = yield tx.send(yield tx.prepare());
        expect(txResult.gasUsed).toBeGreaterThan(0);
    }));
});
