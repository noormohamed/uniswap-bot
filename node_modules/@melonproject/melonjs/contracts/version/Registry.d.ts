import BigNumber from 'bignumber.js';
import { Contract } from '../../Contract';
import { Address } from '../../Address';
import { Environment } from '../../Environment';
import { DSAuth } from '../dependencies/authorization/DSAuth';
export interface VersionInformation {
    exists: boolean;
    name: string;
}
export interface AssetBaseInformation {
    name: string;
    symbol: string;
    url: string;
    reserveMin: BigNumber;
    standards: number[];
    sigs: string[];
}
export interface AssetCreation extends AssetBaseInformation {
    address: Address;
}
export interface AssetInformation extends AssetBaseInformation {
    decimals: number;
    exists: boolean;
}
export interface ExchangeInformation {
    exists: boolean;
    exchangeAddress: Address;
    takesCustody: boolean;
    sigs: string[];
}
export interface RegisterExchangeAdapterArgs extends Omit<ExchangeInformation, 'exists'> {
    adapterAddress: Address;
}
export declare class Registry extends Contract {
    static readonly abi: import("web3-utils").AbiItem[];
    static deploy(environment: Environment, bytecode: string, from: Address, owner: Address): import("../..").Deployment<Registry>;
    getMaxRegisteredEntities(block?: number): Promise<BigNumber>;
    getEngine(block?: number): Promise<string>;
    /**
     * Sets the MLN token
     *
     * @param from The address of the sender
     * @param asset The address of the MLN token
     */
    setMlnToken(from: Address, token: Address): import("../..").Transaction<import("web3-core").TransactionReceipt>;
    getMlnToken(block?: number): Promise<string>;
    /**
     * Sets the native asset
     *
     * @param from The address of the sender
     * @param asset The address of the native asset
     */
    setNativeAsset(from: Address, asset: Address): import("../..").Transaction<import("web3-core").TransactionReceipt>;
    getNativeAsset(block?: number): Promise<string>;
    getEthfinexWrapperRegistry(block?: number): Promise<string>;
    getPriceSource(block?: number): Promise<string>;
    getRegisteredAssets(block?: number): Promise<string[]>;
    registerExchangeAdapter(from: Address, registerArgs: RegisterExchangeAdapterArgs): import("../..").Transaction<import("web3-core").TransactionReceipt>;
    getRegisteredExchangeAdapters(block?: number): Promise<string[]>;
    isExchangeAdapterRegistered(adapter: Address, block?: number): Promise<boolean>;
    /**
     * Register a version
     *
     * @param from The address of the sender
     * @param versionAddress The address of the version
     * @param name The name of the version
     */
    registerVersion(from: Address, versionAddress: Address, name: string): import("../..").Transaction<import("web3-core").TransactionReceipt>;
    getRegisteredVersions(block?: number): Promise<string[]>;
    registerAsset(from: Address, registerArgs: AssetCreation): import("../..").Transaction<import("web3-core").TransactionReceipt>;
    getAssetInformation(assetAddress: Address, block?: number): Promise<AssetInformation>;
    getExchangeInformation(adapterAddress: Address, block?: number): Promise<ExchangeInformation>;
    getVersionInformation(versionAddress: Address, block?: number): Promise<VersionInformation>;
    /**
     * Checks if a version name already exists
     *
     * @param name The name of the version
     * @param block The block number to execute the call on.
     */
    versionNameExists(name: string, block?: number): Promise<boolean>;
    registerFees(from: Address, feeAddresses: Address[]): import("../..").Transaction<import("web3-core").TransactionReceipt>;
    /**
     * Checks if a fee is already registered
     *
     * @param feeAddress The address of the fee contract
     * @param block The block number to execute the call on.
     */
    isFeeRegistered(feeAddress: Address, block?: number): Promise<boolean>;
    /**
     * Checks if an asset is already registered
     *
     * @param asset The address of the asset
     * @param block The block number to execute the call on.
     */
    isAssetRegistered(asset: Address, block?: number): Promise<boolean>;
    /**
     * Get the incentive amount
     *
     * @param block The block number to execute the call on.
     */
    getIncentive(block?: number): Promise<BigNumber>;
    /**
     * Checks whether a fund name is valid
     *
     * @param name The name of the fund
     * @param block The block number to execute the call on.
     */
    isValidFundName(name: string, block?: number): Promise<boolean>;
    /**
     * Checks whether a user can use a certain fund name
     *
     * @param user The address of the user
     * @param name The name of the fund
     * @param block The block number to execute the call on.
     */
    canUseFundName(user: Address, name: string, block?: number): Promise<boolean>;
    /**
     * Checks if an exchange adapter method is allowed
     *
     * @param adapter The address of the adapter
     * @param signature The encoded signature of the method
     * @param block The block number to execute the call on.
     */
    isAdapterMethodAllowed(adapter: Address, signature: string, block?: number): Promise<boolean>;
}
export interface Registry extends DSAuth {
}
