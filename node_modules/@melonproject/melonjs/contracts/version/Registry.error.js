"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ValidationError_1 = require("../../errors/ValidationError");
class ExchangeAdapterAlreadyRegisteredError extends ValidationError_1.ValidationError {
    constructor(adapter, message = 'Exchange adapter is already registered.') {
        super(message);
        this.adapter = adapter;
        this.name = 'ExchangeAdapterAlreadyRegisteredError';
    }
}
exports.ExchangeAdapterAlreadyRegisteredError = ExchangeAdapterAlreadyRegisteredError;
class ExchangeAdapterNotRegisteredError extends ValidationError_1.ValidationError {
    constructor(adapter, message = 'Exchange adapter is not registered.') {
        super(message);
        this.adapter = adapter;
        this.name = 'ExchangeAdapterNotRegisteredError';
    }
}
exports.ExchangeAdapterNotRegisteredError = ExchangeAdapterNotRegisteredError;
class ExchangeAdaptersRegisteredOutOfBoundsError extends ValidationError_1.ValidationError {
    constructor(numberOfAdapters, maxRegisteredAdapters, message = 'Number of registered exchange adapters exceeds the maximum.') {
        super(message);
        this.numberOfAdapters = numberOfAdapters;
        this.maxRegisteredAdapters = maxRegisteredAdapters;
        this.name = 'ExchangeAdaptersRegisteredOutOfBoundsError';
    }
}
exports.ExchangeAdaptersRegisteredOutOfBoundsError = ExchangeAdaptersRegisteredOutOfBoundsError;
class ExchangeAndAdapterDoNotMatchError extends ValidationError_1.ValidationError {
    constructor(exchange, adapter, message = 'Exchange and adapter do not match.') {
        super(message);
        this.exchange = exchange;
        this.adapter = adapter;
        this.name = 'ExchangeAndAdapterDoNotMatchError';
    }
}
exports.ExchangeAndAdapterDoNotMatchError = ExchangeAndAdapterDoNotMatchError;
class InvalidFundNameError extends ValidationError_1.ValidationError {
    constructor(fundName, message = 'Fund name is invalid.') {
        super(message);
        this.fundName = fundName;
        this.name = 'InvalidFundNameError';
    }
}
exports.InvalidFundNameError = InvalidFundNameError;
class CannotUseFundNameError extends ValidationError_1.ValidationError {
    constructor(fundName, message = 'Fund name cannot be used.') {
        super(message);
        this.fundName = fundName;
        this.name = 'CannotUseFundNameError';
    }
}
exports.CannotUseFundNameError = CannotUseFundNameError;
class VersionAlreadyRegisteredError extends ValidationError_1.ValidationError {
    constructor(message = 'Version is already registered.') {
        super(message);
        this.name = 'VersionAlreadyRegisteredError';
    }
}
exports.VersionAlreadyRegisteredError = VersionAlreadyRegisteredError;
class VersionNameAlreadyExistsError extends ValidationError_1.ValidationError {
    constructor(message = 'Version name already exists.') {
        super(message);
        this.name = 'VersionNameAlreadyExistsError';
    }
}
exports.VersionNameAlreadyExistsError = VersionNameAlreadyExistsError;
class AssetAlreadyRegisteredError extends ValidationError_1.ValidationError {
    constructor(message = 'Asset is already registered.') {
        super(message);
        this.name = 'AssetAlreadyRegisteredError';
    }
}
exports.AssetAlreadyRegisteredError = AssetAlreadyRegisteredError;
class AssetsRegisteredOutOfBoundsError extends ValidationError_1.ValidationError {
    constructor(numberOfAsset, maxRegisteredAssets, message = 'Number of registered assets exceeds the maximum.') {
        super(message);
        this.numberOfAsset = numberOfAsset;
        this.maxRegisteredAssets = maxRegisteredAssets;
        this.name = 'AssetsRegisteredOutOfBoundsError';
    }
}
exports.AssetsRegisteredOutOfBoundsError = AssetsRegisteredOutOfBoundsError;
class AssetNotRegisteredError extends ValidationError_1.ValidationError {
    constructor(asset, message = 'Asset is not registered.') {
        super(message);
        this.asset = asset;
        this.name = 'AssetNotRegisteredError';
    }
}
exports.AssetNotRegisteredError = AssetNotRegisteredError;
class FeeNotRegisteredError extends ValidationError_1.ValidationError {
    constructor(fee, message = 'Fees is not registered.') {
        super(message);
        this.fee = fee;
        this.name = 'FeeNotRegisteredError';
    }
}
exports.FeeNotRegisteredError = FeeNotRegisteredError;
