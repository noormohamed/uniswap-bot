import { Contract } from '../../Contract';
import { FundFactory, FundFactoryDeployArguments } from '../factory/FundFactory';
import { Address } from '../../Address';
import { Environment } from '../../Environment';
import { ValidationError } from '../../errors/ValidationError';
export interface VersionDeployArguments extends Omit<FundFactoryDeployArguments, 'version'> {
    registry: Address;
    postDeployOwner: Address;
}
export declare class OnlyManagerCanShutDownFundError extends ValidationError {
    name: string;
    constructor(message?: string);
}
export declare class Version extends Contract {
    static readonly abi: import("web3-utils").AbiItem[];
    static deploy(environment: Environment, bytecode: string, from: Address, args: VersionDeployArguments): import("../..").Deployment<Version>;
    /**
     * Shut down a fund
     *
     * @param from The address of the sender
     * @param hub The address of the fund hub
     * @param block The block number to execute the call on.
     */
    shutDownFund(from: Address, hub: Address): import("../..").Transaction<import("web3-core").TransactionReceipt>;
}
export interface Version extends FundFactory {
}
