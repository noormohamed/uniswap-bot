import { Contract } from '../../Contract';
import { IPriceSource } from './IPriceSource';
import { Address } from '../../Address';
import { ValidationError } from '../../errors/ValidationError';
export declare class OnlyRegistryOwnerOrUpdaterCanCallError extends ValidationError {
    readonly name = "OnlyRegistryOwnerOrUpdaterCanCallError";
    constructor(message?: string);
}
export declare class KyberPriceFeed extends Contract {
    static readonly abi: import("web3-utils").AbiItem[];
    /**
     * Update the price feed.
     *
     * @param from The address of the sender.
     */
    update(from: Address): import("../..").Transaction<import("web3-core").TransactionReceipt>;
    /**
     * Gets the address of the kyber network proxy contract.
     *
     * @param block The block number to execute the call on.
     */
    getKyberNetworkProxy(block?: number): Promise<string>;
    /**
     * Gets the max spread value.
     *
     * @param block The block number to execute the call on.
     */
    getMaxSpread(block?: number): Promise<string>;
    /**
     * Gets the address of the registry contract.
     *
     * @param block The block number to execute the call on.
     */
    getRegistry(block?: number): Promise<string>;
    /**
     * Gets the address of the updater.
     *
     * @param block The block number to execute the call on.
     */
    getUpdater(block?: number): Promise<string>;
}
export interface KyberPriceFeed extends IPriceSource {
}
