"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Contract_1 = require("../../Contract");
const KyberPriceFeed_abi_1 = require("../../abis/KyberPriceFeed.abi");
const applyMixins_1 = require("../../utils/applyMixins");
const IPriceSource_1 = require("./IPriceSource");
const Registry_1 = require("../version/Registry");
const sameAddress_1 = require("../../utils/sameAddress");
const ValidationError_1 = require("../../errors/ValidationError");
class OnlyRegistryOwnerOrUpdaterCanCallError extends ValidationError_1.ValidationError {
    constructor(message = 'Only registry owner or updater can call') {
        super(message);
        this.name = 'OnlyRegistryOwnerOrUpdaterCanCallError';
    }
}
exports.OnlyRegistryOwnerOrUpdaterCanCallError = OnlyRegistryOwnerOrUpdaterCanCallError;
class KyberPriceFeed extends Contract_1.Contract {
    /**
     * Update the price feed.
     *
     * @param from The address of the sender.
     */
    update(from) {
        const validate = () => __awaiter(this, void 0, void 0, function* () {
            const registry = new Registry_1.Registry(this.environment, yield this.getRegistry());
            if (!(sameAddress_1.sameAddress(from, yield registry.getOwner()) || sameAddress_1.sameAddress(from, yield this.getUpdater()))) {
                throw new OnlyRegistryOwnerOrUpdaterCanCallError();
            }
        });
        return this.createTransaction({ from, method: 'update', validate });
    }
    /**
     * Gets the address of the kyber network proxy contract.
     *
     * @param block The block number to execute the call on.
     */
    getKyberNetworkProxy(block) {
        return this.makeCall('KYBER_NETWORK_PROXY', undefined, block);
    }
    /**
     * Gets the max spread value.
     *
     * @param block The block number to execute the call on.
     */
    getMaxSpread(block) {
        return this.makeCall('MAX_SPREAD', undefined, block);
    }
    /**
     * Gets the address of the registry contract.
     *
     * @param block The block number to execute the call on.
     */
    getRegistry(block) {
        return this.makeCall('REGISTRY', undefined, block);
    }
    /**
     * Gets the address of the updater.
     *
     * @param block The block number to execute the call on.
     */
    getUpdater(block) {
        return this.makeCall('UPDATER', undefined, block);
    }
}
exports.KyberPriceFeed = KyberPriceFeed;
KyberPriceFeed.abi = KyberPriceFeed_abi_1.KyberPriceFeedAbi;
applyMixins_1.applyMixins(KyberPriceFeed, [IPriceSource_1.IPriceSource]);
