"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const web3_eth_1 = require("web3-eth");
const web3_providers_1 = require("web3-providers");
const Environment_1 = require("../../Environment");
const sameAddress_1 = require("../../utils/sameAddress");
const KyberPriceFeed_1 = require("./KyberPriceFeed");
describe('KyberPriceFeed', () => {
    let environment;
    let source;
    beforeAll(() => {
        // TODO: This should be replaced with a local ganache test environment using proper test fixtures.
        const client = new web3_eth_1.Eth(new web3_providers_1.HttpProvider('https://mainnet.melonport.com'));
        environment = new Environment_1.Environment(client);
        source = new KyberPriceFeed_1.KyberPriceFeed(environment, '0x4559DDD9E0a567bD8AB071ac106C1bC2d0C0b6Ef');
    });
    xit('should return the last price feed update as date object', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield source.getLastUpdate();
        expect(result).toBeInstanceOf(Date);
        // We can't actually check the correctness of the concrete value because
        // currently we are not using a local test fixture setup based on ganache
        // but the actual mainnet deployment.
        //
        // NOTE: For other calls like e.g. Hub.name() we can actually check for
        // correctness because we can assume that the name of a fund at a given
        // address does not change.
        expect(result.getTime()).toBeLessThan(Date.now());
    }));
    xit('should return the quote token', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield source.getQuoteAsset();
        const weth = '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2';
        expect(sameAddress_1.sameAddress(weth, result)).toBe(true);
    }));
    xit('should return the price of a token pair', () => __awaiter(void 0, void 0, void 0, function* () {
        const zrx = '0xe41d2489571d322189246dafa5ebde1f4699f498';
        const result = yield source.getPrice(zrx);
        expect(result.price.isGreaterThanOrEqualTo(0)).toBe(true);
    }));
    xit('should return the prices of token pairs', () => __awaiter(void 0, void 0, void 0, function* () {
        const zrx = '0xe41d2489571d322189246dafa5ebde1f4699f498';
        const mln = '0xec67005c4e498ec7f55e092bd1d35cbc47c91892';
        const result = yield source.getPrices([zrx, mln]);
        expect(Object.keys(result).length).toBe(2);
    }));
    xit('should return whether the price of a token is valid', () => __awaiter(void 0, void 0, void 0, function* () {
        const zrx = '0xe41d2489571d322189246dafa5ebde1f4699f498';
        const result = yield source.hasValidPrice(zrx);
        expect(result === true || result === false).toBe(true);
    }));
});
