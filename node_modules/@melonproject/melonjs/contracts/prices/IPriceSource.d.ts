import BigNumber from 'bignumber.js';
import { Contract } from '../../Contract';
import { Address } from '../../Address';
import { CallError } from '../../errors/CallError';
export interface PriceInfo {
    price: BigNumber;
    timestamp: Date;
    decimals: number;
}
export interface PricesInfo {
    [index: number]: {
        price: BigNumber;
        timestamp: Date;
    };
}
export declare class InvalidPriceError extends CallError {
    readonly token: Address;
    name: string;
    constructor(token: Address, message?: string);
}
export declare class IPriceSource extends Contract {
    static readonly abi: import("web3-utils").AbiItem[];
    /**
     * Gets the quote asset of the price feed.
     *
     * @param block The block number to execute the call on.
     */
    getQuoteAsset(block?: number): Promise<string>;
    /**
     * Gets the last update of the price feed.
     *
     * @param block The block number to execute the call on.
     */
    getLastUpdate(block?: number): Promise<Date>;
    /**
     * Checks if the price of a token is valid.
     *
     * @param tokenAddress The address of the token.
     * @param block The block number to execute the call on.
     */
    hasValidPrice(tokenAddress: Address, block?: number): Promise<boolean>;
    /**
     * Checks if the prices of an array of tokens is valid.
     *
     * @param tokenAddresses The addresses of the tokens.
     * @param block The block number to execute the call on.
     */
    hasValidPrices(tokenAddresses: Address[], block?: number): Promise<boolean>;
    /**
     * Gets the price of a token.
     *
     * @param token The address of the base token.
     * @param block The block number to execute the call on.
     */
    getPrice(token: Address, block?: number): Promise<Omit<PriceInfo, 'decimals'>>;
    /**
     * Gets the prices of multiple tokens.
     *
     * @param tokens The addresses of the base tokens.
     * @param block The block number to execute the call on.
     */
    getPrices(tokens: Address[], block?: number): Promise<PriceInfo[]>;
    /**
     * Gets the price info of a token
     *
     * @param token The addresses of the base tokens.
     * @param block The block number to execute the call on.
     */
    getPriceInfo(token: Address, block?: number): Promise<Pick<PriceInfo, "price" | "decimals">>;
    /**
     * Gets the inverted price info of a token
     *
     * @param token The addresses of the base tokens.
     * @param block The block number to execute the call on.
     */
    getInvertedPriceInfo(token: Address, block?: number): Promise<Pick<PriceInfo, "price" | "decimals">>;
    /**
     * Gets the reference price information
     *
     * @param base The address of the base token.
     * @param quote The address of the quote token
     * @param block The block number to execute the call on.
     */
    getReferencePriceInfo(base: Address, quote: Address, block?: number): Promise<Pick<PriceInfo, "price" | "decimals">>;
    /**
     * Gets the order price information
     *
     * @param sellAsset The address of the sell asset.
     * @param sellQuantity The quantity of the sell asset
     * @param buyQuantity The quantity of the buy asset
     * @param block The block number to execute the call on.
     */
    getOrderPriceInfo(sellAsset: Address, sellQuantity: BigNumber, buyQuantity: BigNumber, block?: number): Promise<BigNumber>;
    /**
     * Checks whether a price exists on an asset pair
     *
     * @param sellAsset The address of the sell asset.
     * @param buyAsset The address of the buy asset
     * @param block The block number to execute the call on.
     */
    existsPriceOnAssetPair(sellAsset: Address, buyAsset: Address, block?: number): Promise<boolean>;
    /**
     * Checks whether a price exists on an asset pair
     *
     * @param sellAsset The address of the sell asset.
     * @param buyAsset The address of the buy asset
     * @param block The block number to execute the call on.
     */
    convertQuantity(fromAssetQuantity: BigNumber, fromAsset: Address, toAsset: Address, block?: number): Promise<BigNumber>;
}
