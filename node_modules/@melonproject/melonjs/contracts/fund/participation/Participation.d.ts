import BigNumber from 'bignumber.js';
import { Contract } from '../../../Contract';
import { Environment } from '../../../Environment';
import { Address } from '../../../Address';
import { Spoke } from '../hub/Spoke';
import { AmguConsumer } from '../../engine/AmguConsumer';
export interface Request {
    investmentAsset: Address;
    investmentAmount: BigNumber;
    requestedShares: BigNumber;
    timestamp: Date;
}
export interface ParticipationDeployArguments {
    hub: Address;
    defaultAssets: Address[];
    registry: Address;
}
export declare class Participation extends Contract {
    static readonly abi: import("web3-utils").AbiItem[];
    static deploy(environment: Environment, bytecode: string, from: Address, args: ParticipationDeployArguments): import("../../..").Deployment<Participation>;
    /**
     * Gets a list of all historical investors.
     *
     * @param block The block number to execute the call on.
     */
    getHistoricalInvestors(block?: number): Promise<string[]>;
    /**
     * Enable investment for a list of assets
     *
     * @param from The address of the sender.
     * @param assets The addresses of the assets
     */
    enableInvestment(from: Address, assets: Address[]): import("../../..").Transaction<import("web3-core").TransactionReceipt>;
    /**
     * Disable investment for a list of assets
     *
     * @param from The address of the sender.
     * @param assets The addresses of the assets
     */
    disableInvestment(from: Address, assets: Address[]): import("../../..").Transaction<import("web3-core").TransactionReceipt>;
    /**
     * Gets the details of a request.
     *
     * @param investor The address of the investor
     * @param block The block number to execute the call on.
     */
    getRequest(investor: Address, block?: number): Promise<Request>;
    /**
     * Checks if an investor has a request.
     *
     * @param investor The address of the investor
     * @param block The block number to execute the call on.
     */
    hasRequest(investor: Address, block?: number): Promise<boolean>;
    /**
     * Checks if an investor has a valid request.
     *
     * @param investor The address of the investor
     * @param block The block number to execute the call on.
     */
    hasValidRequest(investor: Address, block?: number): Promise<boolean>;
    /**
     * Checks if an investor has an expired request.
     *
     * @param investor The address of the investor
     * @param block The block number to execute the call on.
     */
    hasExpiredRequest(investor: Address, block?: number): Promise<boolean>;
    /**
     * Checks if an investor already has invested.
     *
     * @param investor The address of the investor
     * @param block The block number to execute the call on.
     */
    hasInvested(investor: Address, block?: number): Promise<boolean>;
    /**
     * Checks if an investement into the fund with a certain asset is allowed
     *
     * @param investor The address of the investor
     * @param block The block number to execute the call on.
     */
    canInvestWithAsset(asset: Address, block?: number): Promise<boolean>;
    /**
     * Request investment.
     *
     * @param from The address of the sender.
     * @param sharesAmount The number of shares requested
     * @param investmentAmount The amount to be invested
     * @param investmentAsset The address of the investment asset
     */
    requestInvestment(from: Address, sharesAmount: BigNumber, investmentAmount: BigNumber, investmentAsset: Address): import("../../..").Transaction<import("web3-core").TransactionReceipt>;
    /**
     * Execute investment request for an investor
     *
     * @param from The address of the sender.
     * @param investor The address of the investor
     */
    executeRequestFor(from: Address, investor: Address): import("../../..").Transaction<import("web3-core").TransactionReceipt>;
    /**
     * Execute investment request
     *
     * @param from The address of the sender.
     */
    executeRequest(from: Address): import("../../..").Transaction<import("web3-core").TransactionReceipt>;
    /**
     * Check if a request can be cancelled
     *
     * @param from The address of the sender.
     */
    canCancelRequest(from: Address, block?: number): Promise<boolean>;
    /**
     * Cancel investment request for investor
     *
     * @param from The address of the sender.
     * @param investor The address of the investor
     *
     */
    cancelRequestFor(from: Address, investor: Address): import("../../..").Transaction<import("web3-core").TransactionReceipt>;
    /**
     * Cancel investment request
     *
     * @param from The address of the sender.
     *
     */
    cancelRequest(from: Address): import("../../..").Transaction<import("web3-core").TransactionReceipt>;
    /**
     * Redeem all shares
     *
     * @param from The address of the sender.
     */
    redeem(from: Address): import("../../..").Transaction<import("web3-core").TransactionReceipt>;
    /**
     * Redeem a quantity of shares
     *
     * @param from The address of the sender.
     * @param shareQuantity The quantity of shares to redeem
     */
    redeemQuantity(from: Address, shareQuantity: BigNumber): import("../../..").Transaction<import("web3-core").TransactionReceipt>;
    /**
     * Validate if a request can be cancelled
     *
     * @param investor The address of the investor.
     */
    private validateCancelRequest;
}
export interface Participation extends Spoke, AmguConsumer {
}
