"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Participation_errors_1 = require("./Participation.errors");
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const createTestEnvironment_1 = require("../../../utils/tests/createTestEnvironment");
const deployWeth_1 = require("../../../utils/tests/deployWeth");
const deployRegistry_1 = require("../../../utils/tests/deployRegistry");
const deployParticipation_1 = require("../../../utils/tests/deployParticipation");
const PermissiveAuthority_1 = require("../../dependencies/authorization/PermissiveAuthority");
const PermissiveAuthority_bin_1 = require("../../../abis/PermissiveAuthority.bin");
const randomAddress_1 = require("../../../utils/tests/randomAddress");
describe('Participation', () => {
    let environment;
    let participation;
    let registry;
    let weth;
    beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
        environment = yield createTestEnvironment_1.createTestEnvironment();
        weth = yield deployWeth_1.deployWeth(environment, environment.accounts[0]);
        registry = yield deployRegistry_1.deployRegistry(environment, environment.accounts[0], environment.accounts[0]);
        const tx = registry.registerAsset(environment.accounts[0], {
            address: weth.contract.address,
            name: 'Test Asset',
            symbol: 'TAT',
            url: 'https://tat.tat/',
            reserveMin: new bignumber_js_1.default(100000),
            standards: [1, 2, 3],
            sigs: ['0x30303030'],
        });
        yield tx.send(yield tx.prepare());
        const deployPermissiveAuthority = PermissiveAuthority_1.PermissiveAuthority.deploy(environment, PermissiveAuthority_bin_1.PermissiveAuthorityBytecode, environment.accounts[0]);
        const permissiveAuthority = yield deployPermissiveAuthority.send(yield deployPermissiveAuthority.prepare());
        participation = yield deployParticipation_1.deployParticipation(environment, environment.accounts[0], {
            hub: permissiveAuthority.contract.address,
            defaultAssets: [weth.contract.address],
            registry: registry.contract.address,
        });
    }));
    it('should return an array of investor addresses', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield participation.getHistoricalInvestors();
        expect(result.length).toBeGreaterThanOrEqual(0);
        result.forEach((investor) => {
            expect(investor.startsWith('0x')).toBe(true);
        });
    }));
    it('should return whether an investor has a request', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield participation.hasRequest('0x8a2da4fc8c6854be3f754f8dddd37a2b9d69c8c2');
        expect(result === true || result === false).toBe(true);
    }));
    it('should return whether an investor has an expired request', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield participation.hasExpiredRequest('0x8a2da4fc8c6854be3f754f8dddd37a2b9d69c8c2');
        expect(result === true || result === false).toBe(true);
    }));
    it('should return whether an investor has already invested', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield participation.hasInvested('0x8a2da4fc8c6854be3f754f8dddd37a2b9d69c8c2');
        expect(result === true || result === false).toBe(true);
    }));
    it('should return whether an investment with a certain asset is allowed', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield participation.canInvestWithAsset('0xec67005c4e498ec7f55e092bd1d35cbc47c91892');
        expect(result === true || result === false).toBe(true);
    }));
    it('should enable investment for an asset', () => __awaiter(void 0, void 0, void 0, function* () {
        const tx = participation.enableInvestment(environment.accounts[0], [weth.contract.address]);
        const txResult = yield tx.send(yield tx.prepare());
        expect(txResult.gasUsed).toBeGreaterThanOrEqual(0);
        expect(txResult.status).toBe(true);
    }));
    it('should throw an error for an asset which is not registered', () => __awaiter(void 0, void 0, void 0, function* () {
        const tx = participation.enableInvestment(environment.accounts[0], [randomAddress_1.randomAddress()]);
        yield expect(tx.validate()).rejects.toThrowError(Participation_errors_1.AssetIsNotRegisteredError);
    }));
    it('should disable investment for an asset', () => __awaiter(void 0, void 0, void 0, function* () {
        const tx = participation.disableInvestment(environment.accounts[0], [randomAddress_1.randomAddress()]);
        const txResult = yield tx.send(yield tx.prepare());
        expect(txResult.gasUsed).toBeGreaterThanOrEqual(0);
        expect(txResult.status).toBe(true);
    }));
});
