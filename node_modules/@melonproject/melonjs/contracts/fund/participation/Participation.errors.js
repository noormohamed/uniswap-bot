"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ValidationError_1 = require("../../../errors/ValidationError");
class InvestmentAssetNotAllowedError extends ValidationError_1.ValidationError {
    constructor(asset, message = 'Investment not allowed in this asset.') {
        super(message);
        this.asset = asset;
        this.name = 'InvestmentAssetNotAllowedError';
    }
}
exports.InvestmentAssetNotAllowedError = InvestmentAssetNotAllowedError;
class AssetIsNotRegisteredError extends ValidationError_1.ValidationError {
    constructor(asset, message = 'This asset is not registered with the registry.') {
        super(message);
        this.asset = asset;
        this.name = 'AssetIsNotRegisteredError';
    }
}
exports.AssetIsNotRegisteredError = AssetIsNotRegisteredError;
class InvestmentRequestExistsError extends ValidationError_1.ValidationError {
    constructor(request, message = 'Only one request can exist at a time.') {
        super(message);
        this.request = request;
        this.name = 'InvestmentRequestExistsError';
    }
}
exports.InvestmentRequestExistsError = InvestmentRequestExistsError;
class NoInvestmentRequestError extends ValidationError_1.ValidationError {
    constructor(from, message = 'No investment request found.') {
        super(message);
        this.from = from;
        this.name = 'NoInvestmentRequestError';
    }
}
exports.NoInvestmentRequestError = NoInvestmentRequestError;
class CancelConditionsNotMetError extends ValidationError_1.ValidationError {
    constructor(from, message = 'No cancellation condition was met.') {
        super(message);
        this.from = from;
        this.name = 'CancelConditionsNotMetError';
    }
}
exports.CancelConditionsNotMetError = CancelConditionsNotMetError;
class PriceNotValidError extends ValidationError_1.ValidationError {
    constructor(asset, message = 'Price not valid.') {
        super(message);
        this.asset = asset;
        this.name = 'PriceNotValidError';
    }
}
exports.PriceNotValidError = PriceNotValidError;
class InvestmentAmountTooLowError extends ValidationError_1.ValidationError {
    constructor(amount, message = 'Investment amount too low for the requested number of shares.') {
        super(message);
        this.amount = amount;
        this.name = 'InvestmentAmountTooLowError';
    }
}
exports.InvestmentAmountTooLowError = InvestmentAmountTooLowError;
class NoSharesToRedeemError extends ValidationError_1.ValidationError {
    constructor(message = 'No shares to redeem.') {
        super(message);
        this.name = 'NoSharesToRedeemError';
    }
}
exports.NoSharesToRedeemError = NoSharesToRedeemError;
class NotEnoughSharesToRedeemError extends ValidationError_1.ValidationError {
    constructor(availableShares, message = 'Not enough shares to redeem requested amount.') {
        super(message);
        this.availableShares = availableShares;
        this.name = 'NotEnoughSharesToRedeemError';
    }
}
exports.NotEnoughSharesToRedeemError = NotEnoughSharesToRedeemError;
class InvestmentPolicyValidationError extends ValidationError_1.ValidationError {
    constructor(signature, message = 'Investment cannot be executed because risk management policies or compliance policies would be violated.') {
        super(message);
        this.signature = signature;
        this.name = 'InvestmentPolicyValidationError';
    }
}
exports.InvestmentPolicyValidationError = InvestmentPolicyValidationError;
