"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const createTestEnvironment_1 = require("../../../utils/tests/createTestEnvironment");
const deployHub_1 = require("../../../utils/tests/deployHub");
const deployShares_1 = require("../../../utils/tests/deployShares");
describe('Shares', () => {
    let environment;
    let shares;
    let hub;
    beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
        environment = yield createTestEnvironment_1.createTestEnvironment();
        hub = yield deployHub_1.deployHub(environment, environment.accounts[0], {
            manager: environment.accounts[1],
            name: 'vault-test-fund',
        });
        shares = yield deployShares_1.deployShares(environment, environment.accounts[0], hub.contract.address);
    }));
    it('should return the name for shares', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield shares.getName();
        expect(result.length).toBeGreaterThanOrEqual(0);
    }));
    it('should return the symbol for shares', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield shares.getSymbol();
        expect(result).toBe('MLNF');
    }));
    it('should return the decimals for shares', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield shares.getDecimals();
        expect(result).toBeGreaterThanOrEqual(0);
    }));
});
