"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Contract_1 = require("../../../Contract");
const Spoke_1 = require("../hub/Spoke");
const applyMixins_1 = require("../../../utils/applyMixins");
const Shares_abi_1 = require("../../../abis/Shares.abi");
const web3_utils_1 = require("web3-utils");
const StandardToken_1 = require("../../dependencies/token/StandardToken");
class Shares extends Contract_1.Contract {
    static deploy(environment, bytecode, from, hub) {
        return super.createDeployment(environment, bytecode, from, [hub]);
    }
    /**
     * Gets the name of the shares.
     *
     * @param block The block number to execute the call on.
     */
    getName(block) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.makeCall('name', undefined, block);
            return web3_utils_1.hexToString(result);
        });
    }
    /**
     * Gets the symbol of the shares.
     *
     * @param block The block number to execute the call on.
     */
    getSymbol(block) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.makeCall('symbol', undefined, block);
            return result;
        });
    }
    /**
     * Gets the decimals of the shares.
     *
     * @param block The block number to execute the call on.
     */
    getDecimals(block) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.makeCall('decimals', undefined, block);
            return parseInt(result, 10);
        });
    }
}
exports.Shares = Shares;
Shares.abi = Shares_abi_1.SharesAbi;
applyMixins_1.applyMixins(Shares, [Spoke_1.Spoke, StandardToken_1.StandardToken]);
