import BigNumber from 'bignumber.js';
import { Contract } from '../../../Contract';
import { Environment } from '../../../Environment';
import { Address } from '../../../Address';
import { Spoke } from '../hub/Spoke';
export interface ExchangeInfo {
    exchange: Address;
    adapter: Address;
    takesCustody: boolean;
}
export interface OpenMakeOrder {
    id: BigNumber;
    expiresAt: Date;
    orderIndex: BigNumber;
    buyAsset: Address;
}
export interface OpenMakeOrderWithExchange extends OpenMakeOrder {
    exchange: Address;
}
export declare enum OrderUpdateType {
    make = 0,
    take = 1,
    cancel = 2
}
export interface Order {
    exchangeAddress: Address;
    orderId: number;
    updateType: OrderUpdateType;
    makerAsset: Address;
    takerAsset: Address;
    makerQuantity: BigNumber;
    takerQuantity: BigNumber;
    timestamp: Date;
    fillTakerQuantity: BigNumber;
}
export interface TradingDeployArguments {
    hub: Address;
    exchanges: Address[];
    adapters: Address[];
    registry: Address;
}
export interface CallOnExchangeArgs {
    exchangeIndex: number;
    methodSignature: string;
    orderAddresses: [Address, Address, Address, Address, Address, Address, Address, Address];
    orderValues: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
    orderData: [string, string, string, string];
    identifier: string;
    signature: string;
}
export declare class Trading extends Contract {
    static readonly abi: import("web3-utils").AbiItem[];
    static deploy(environment: Environment, bytecode: string, from: Address, args: TradingDeployArguments): import("../../..").Deployment<Trading>;
    /**
     * Checks if an adapter is already added
     *
     * @param adapter The address of the adapter
     * @param block: The block number
     */
    adapterIsAdded(adapter: Address, block?: number): Promise<boolean>;
    /**
     * Add an exchange for a fund
     *
     * @param from The address of the sender.
     * @param exchange The address of the exchange
     * @param adapter The address of the adapter
     */
    addExchange(from: Address, exchange: Address, adapter: Address): import("../../..").Transaction<import("web3-core").TransactionReceipt>;
    /**
     * Returns assets from trading to vaut.
     *
     * @param from The address of the sender.
     * @param assets The addresses of the assets to return to vault.
     */
    returnBatchToVault(from: Address, assets: Address[]): import("../../..").Transaction<import("web3-core").TransactionReceipt>;
    /**
     * Gets information on all exchanges.
     *
     * @param block The block number to execute the call on.
     */
    getExchangeInfo(block?: number): Promise<ExchangeInfo[]>;
    /**
     * Gets information for a single exchange
     *
     * @param index The index of the exchange
     * @param block The block number to execute the call on.
     */
    getExchange(index: number, block?: number): Promise<ExchangeInfo>;
    /**
     * Get the details of an open make order.
     *
     * @param exchange The address of the exchange
     * @param asset The address of the asset
     * @param block The block number to execute the call on.
     */
    getOpenMakeOrder(exchange: Address, asset: Address, block?: number): Promise<OpenMakeOrder>;
    /**
     * Get all open make orders.
     *
     * @param block The block number to execute the call on.
     */
    getOpenMakeOrders(block?: number): Promise<{
        exchange: string;
        id: BigNumber;
        expiresAt: Date;
        orderIndex: BigNumber;
        buyAsset: string;
    }[]>;
    /**
     * Get the details of an order.
     *
     * @param index The index of the order
     * @param block The block number to execute the call on.
     */
    getOrderDetails(index: BigNumber, block?: number): Promise<{
        makerAsset: string;
        takerAsset: string;
        makerQuantity: BigNumber;
        takerQuantity: BigNumber;
    }>;
    /**
     * Checks if an order is expired.
     *
     * @param exchange The address of the exchange
     * @param asset The address of the asset
     * @param block The block number to execute the call on.
     */
    isOrderExpired(exchange: Address, asset: Address, block?: number): Promise<boolean>;
    /**
     * Gets the order lifespan.
     *
     * @param block The block number to execute the call on.
     */
    getOrderLifespan(block?: number): Promise<BigNumber>;
    private validateCallOnExchange;
    /**
     * Call on exchange (all trading transactions go through this).
     *
     * @param from The address of the sender
     * @param args The arguments as [[CallOnExchangeArgs]]
     * @param validation An additional async validation function
     */
    callOnExchange(from: Address, args: CallOnExchangeArgs, validationFunction?: () => Promise<void>): import("../../..").Transaction<import("web3-core").TransactionReceipt>;
    /**
     * Update and get quantity being traded
     *
     * @param asset The address of the asset
     * @param block The block number to execute the call on.
     */
    updateAndGetQuantityBeingTraded(asset: Address, block?: number): Promise<BigNumber>;
    /**
     * Update and get quantity being traded
     *
     * @param asset The address of the asset
     * @param block The block number to execute the call on.
     */
    sendUpdateAndGetQuantityBeingTraded(from: Address, asset: Address, block?: number): import("../../..").Transaction<import("web3-core").TransactionReceipt>;
    /**
     * Update and get quantity held in exchanges
     *
     * @param asset The address of the asset
     * @param block The block number to execute the call on.
     */
    updateAndGetQuantityHeldInExchange(asset: Address, block?: number): Promise<BigNumber>;
    /**
     * Update and get quantity held in exchanges
     *
     * @param identifier The identifier of the order
     * @param block The block number to execute the call on.
     */
    getZeroExOrderDetails(identifier: BigNumber, block?: number): Promise<any>;
    /**
     * Check if there is an open make order for a certain asset
     *
     * @param asset The address of the asset
     * @param block The block number to execute the call on.
     */
    checkOpenMakeOrder(asset: Address, block?: number): Promise<boolean>;
    /**
     * Get maker asset cooldown time
     *
     * @param asset The address of the asset
     * @param block The block number to execute the call on.
     */
    getMakerAssetCooldown(asset: Address, block?: number): Promise<Date | void>;
}
export interface Trading extends Spoke {
}
