"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Trading_errors_1 = require("../Trading.errors");
const bignumber_js_1 = __importDefault(require("bignumber.js"));
exports.checkCooldownReached = (trading, asset, block) => __awaiter(void 0, void 0, void 0, function* () {
    const [makerAssetCooldown, blockObject] = yield Promise.all([
        trading.getMakerAssetCooldown(asset, block),
        trading.environment.client.getBlock(block || 'latest'),
    ]);
    if (!makerAssetCooldown) {
        return;
    }
    const currentBlockTime = new bignumber_js_1.default(blockObject.timestamp).multipliedBy(1000);
    if (currentBlockTime.isLessThan(makerAssetCooldown.getTime())) {
        throw new Trading_errors_1.CooldownForMakerAssetNotReachedError(asset);
    }
});
