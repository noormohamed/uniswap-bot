"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const sameAddress_1 = require("../../../../utils/sameAddress");
const Trading_errors_1 = require("../Trading.errors");
const Contract_1 = require("../../../../Contract");
class BaseTradingAdapter extends Contract_1.Contract {
    constructor(environment, adapterAddress, trading, info, index) {
        super(environment, adapterAddress);
        this.environment = environment;
        this.adapterAddress = adapterAddress;
        this.trading = trading;
        this.info = info;
        this.index = index;
    }
    static create(environment, adapterAddress, trading) {
        return __awaiter(this, void 0, void 0, function* () {
            const info = yield trading.getExchangeInfo();
            const index = info.findIndex(exchange => sameAddress_1.sameAddress(exchange.adapter, adapterAddress));
            if (index === -1) {
                throw new Trading_errors_1.ExchangeNotRegisteredWithFundError(adapterAddress);
            }
            return new this(environment, adapterAddress, trading, info[index], index);
        });
    }
}
exports.BaseTradingAdapter = BaseTradingAdapter;
