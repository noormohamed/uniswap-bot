"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const web3_utils_1 = require("web3-utils");
const functionSignature_1 = require("../../../../utils/functionSignature");
const ExchangeAdapter_abi_1 = require("../../../../abis/ExchangeAdapter.abi");
const zeroAddress_1 = require("../../../../utils/zeroAddress");
const zeroBigNumber_1 = require("../../../../utils/zeroBigNumber");
const BaseTradingAdapter_1 = require("./BaseTradingAdapter");
const checkSufficientBalance_1 = require("../utils/checkSufficientBalance");
const checkFundIsNotShutdown_1 = require("../utils/checkFundIsNotShutdown");
const checkSenderIsFundManager_1 = require("../utils/checkSenderIsFundManager");
const checkExistingOpenMakeOrder_1 = require("../utils/checkExistingOpenMakeOrder");
const checkCooldownReached_1 = require("../utils/checkCooldownReached");
class OasisDexTradingAdapter extends BaseTradingAdapter_1.BaseTradingAdapter {
    /**
     * Cancel a make order on OasisDex
     *
     * @param from The address of the sender.
     * @param id The id of the order.
     * @param offer The order to cancel.
     */
    cancelOrder(from, id, offer) {
        const paddedZeros = web3_utils_1.padLeft('0x0', 64);
        const methodArgs = {
            exchangeIndex: this.index,
            methodSignature: functionSignature_1.functionSignature(ExchangeAdapter_abi_1.ExchangeAdapterAbi, 'cancelOrder'),
            orderAddresses: [
                this.trading.contract.address,
                zeroAddress_1.zeroAddress,
                offer.makerAsset,
                offer.takerAsset,
                zeroAddress_1.zeroAddress,
                zeroAddress_1.zeroAddress,
                zeroAddress_1.zeroAddress,
                zeroAddress_1.zeroAddress,
            ],
            orderValues: [
                zeroBigNumber_1.zeroBigNumber,
                zeroBigNumber_1.zeroBigNumber,
                zeroBigNumber_1.zeroBigNumber,
                zeroBigNumber_1.zeroBigNumber,
                zeroBigNumber_1.zeroBigNumber,
                zeroBigNumber_1.zeroBigNumber,
                zeroBigNumber_1.zeroBigNumber,
                zeroBigNumber_1.zeroBigNumber,
            ],
            orderData: [paddedZeros, paddedZeros, paddedZeros, paddedZeros],
            identifier: web3_utils_1.padLeft(web3_utils_1.numberToHex(id.toFixed(0)), 64),
            signature: paddedZeros,
        };
        const validate = () => __awaiter(this, void 0, void 0, function* () {
            const hubAddress = yield this.trading.getHub();
            yield checkSenderIsFundManager_1.checkSenderIsFundManager(this.trading.environment, from, hubAddress);
        });
        return this.trading.callOnExchange(from, methodArgs, validate);
    }
    /**
     * Create a make order on 0x.
     *
     * @param from The address of the sender.
     * @param args The arguments.
     */
    makeOrder(from, args) {
        const paddedZeros = web3_utils_1.padLeft('0x0', 64);
        const methodArgs = {
            exchangeIndex: this.index,
            methodSignature: functionSignature_1.functionSignature(ExchangeAdapter_abi_1.ExchangeAdapterAbi, 'makeOrder'),
            orderAddresses: [
                this.trading.contract.address,
                zeroAddress_1.zeroAddress,
                args.makerAsset,
                args.takerAsset,
                zeroAddress_1.zeroAddress,
                zeroAddress_1.zeroAddress,
                zeroAddress_1.zeroAddress,
                zeroAddress_1.zeroAddress,
            ],
            orderValues: [
                args.makerQuantity,
                args.takerQuantity,
                zeroBigNumber_1.zeroBigNumber,
                zeroBigNumber_1.zeroBigNumber,
                zeroBigNumber_1.zeroBigNumber,
                zeroBigNumber_1.zeroBigNumber,
                zeroBigNumber_1.zeroBigNumber,
                zeroBigNumber_1.zeroBigNumber,
            ],
            orderData: [paddedZeros, paddedZeros, paddedZeros, paddedZeros],
            identifier: paddedZeros,
            signature: paddedZeros,
        };
        const validate = () => __awaiter(this, void 0, void 0, function* () {
            const vaultAddress = (yield this.trading.getRoutes()).vault;
            const hubAddress = yield this.trading.getHub();
            yield Promise.all([
                checkSufficientBalance_1.checkSufficientBalance(this.trading.environment, args.makerAsset, args.makerQuantity, vaultAddress),
                checkFundIsNotShutdown_1.checkFundIsNotShutdown(this.trading.environment, hubAddress),
                checkSenderIsFundManager_1.checkSenderIsFundManager(this.trading.environment, from, hubAddress),
                checkExistingOpenMakeOrder_1.checkExistingOpenMakeOrder(this.trading, args.makerAsset),
                checkCooldownReached_1.checkCooldownReached(this.trading, args.makerAsset),
            ]);
        });
        return this.trading.callOnExchange(from, methodArgs, validate);
    }
    /**
     * Create a make order on 0x.
     *
     * @param from The address of the sender.
     * @param id The id of the offer.
     * @param offer The order to take.
     */
    takeOrder(from, id, offer, fillTakerQuantity) {
        const amount = fillTakerQuantity || offer.takerQuantity;
        const paddedZeros = web3_utils_1.padLeft('0x0', 64);
        const methodArgs = {
            exchangeIndex: this.index,
            methodSignature: functionSignature_1.functionSignature(ExchangeAdapter_abi_1.ExchangeAdapterAbi, 'takeOrder'),
            orderAddresses: [
                offer.owner,
                this.trading.contract.address,
                offer.makerAsset,
                offer.takerAsset,
                zeroAddress_1.zeroAddress,
                zeroAddress_1.zeroAddress,
                zeroAddress_1.zeroAddress,
                zeroAddress_1.zeroAddress,
            ],
            orderValues: [
                offer.makerQuantity,
                offer.takerQuantity,
                zeroBigNumber_1.zeroBigNumber,
                zeroBigNumber_1.zeroBigNumber,
                zeroBigNumber_1.zeroBigNumber,
                zeroBigNumber_1.zeroBigNumber,
                amount,
                zeroBigNumber_1.zeroBigNumber,
            ],
            orderData: [paddedZeros, paddedZeros, paddedZeros, paddedZeros],
            identifier: web3_utils_1.padLeft(web3_utils_1.numberToHex(id.toFixed(0)), 64),
            signature: web3_utils_1.padLeft('0x0', 64),
        };
        const validate = () => __awaiter(this, void 0, void 0, function* () {
            const vaultAddress = (yield this.trading.getRoutes()).vault;
            const hubAddress = yield this.trading.getHub();
            yield Promise.all([
                checkSufficientBalance_1.checkSufficientBalance(this.trading.environment, offer.takerAsset, amount, vaultAddress),
                checkFundIsNotShutdown_1.checkFundIsNotShutdown(this.trading.environment, hubAddress),
                checkSenderIsFundManager_1.checkSenderIsFundManager(this.trading.environment, from, hubAddress),
            ]);
        });
        return this.trading.callOnExchange(from, methodArgs, validate);
    }
}
exports.OasisDexTradingAdapter = OasisDexTradingAdapter;
