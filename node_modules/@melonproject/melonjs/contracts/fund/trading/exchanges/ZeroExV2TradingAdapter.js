"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const order_utils_v2_1 = require("@0x/order-utils-v2");
const web3_utils_1 = require("web3-utils");
const functionSignature_1 = require("../../../../utils/functionSignature");
const ExchangeAdapter_abi_1 = require("../../../../abis/ExchangeAdapter.abi");
const zeroAddress_1 = require("../../../../utils/zeroAddress");
const zeroBigNumber_1 = require("../../../../utils/zeroBigNumber");
const ValidationError_1 = require("../../../../errors/ValidationError");
const BaseTradingAdapter_1 = require("./BaseTradingAdapter");
const checkSenderIsFundManager_1 = require("../utils/checkSenderIsFundManager");
const checkSufficientBalance_1 = require("../utils/checkSufficientBalance");
const checkExistingOpenMakeOrder_1 = require("../utils/checkExistingOpenMakeOrder");
const checkCooldownReached_1 = require("../utils/checkCooldownReached");
const sameAddress_1 = require("../../../../utils/sameAddress");
const checkFundIsNotShutdown_1 = require("../utils/checkFundIsNotShutdown");
class MissingZeroExOrderHashHex extends ValidationError_1.ValidationError {
    constructor(message = 'Missing order hash hex.') {
        super(message);
        this.name = 'MissingZeroExOrderHashHex';
    }
}
exports.MissingZeroExOrderHashHex = MissingZeroExOrderHashHex;
class InvalidOrderSignatureError extends ValidationError_1.ValidationError {
    constructor(message = 'Invalid order signature.') {
        super(message);
        this.name = 'InvalidOrderSignatureError';
    }
}
exports.InvalidOrderSignatureError = InvalidOrderSignatureError;
class ZeroExV2TradingAdapter extends BaseTradingAdapter_1.BaseTradingAdapter {
    getOrderHash(order) {
        return order_utils_v2_1.orderHashUtils.getOrderHashHex(order);
    }
    /**
     * Create a make order on 0x.
     *
     * @param from The address of the sender.
     * @param args The arguments.
     */
    makeOrder(from, order) {
        const makerTokenAddress = order_utils_v2_1.assetDataUtils.decodeERC20AssetData(order.makerAssetData).tokenAddress;
        const takerTokenAddress = order_utils_v2_1.assetDataUtils.decodeERC20AssetData(order.takerAssetData).tokenAddress;
        const paddedZeros = web3_utils_1.padLeft('0x0', 64);
        const methodArgs = {
            exchangeIndex: this.index,
            methodSignature: functionSignature_1.functionSignature(ExchangeAdapter_abi_1.ExchangeAdapterAbi, 'makeOrder'),
            orderAddresses: [
                order.makerAddress,
                zeroAddress_1.zeroAddress,
                makerTokenAddress,
                takerTokenAddress,
                order.feeRecipientAddress,
                zeroAddress_1.zeroAddress,
                zeroAddress_1.zeroAddress,
                zeroAddress_1.zeroAddress,
            ],
            orderValues: [
                order.makerAssetAmount,
                order.takerAssetAmount,
                order.makerFee,
                order.takerFee,
                order.expirationTimeSeconds,
                order.salt,
                zeroBigNumber_1.zeroBigNumber,
                zeroBigNumber_1.zeroBigNumber,
            ],
            orderData: [order.makerAssetData, order.takerAssetData, paddedZeros, paddedZeros],
            identifier: web3_utils_1.randomHex(32),
            signature: order.signature,
        };
        const validate = () => __awaiter(this, void 0, void 0, function* () {
            const vaultAddress = (yield this.trading.getRoutes()).vault;
            const hubAddress = yield this.trading.getHub();
            yield Promise.all([
                checkSufficientBalance_1.checkSufficientBalance(this.trading.environment, makerTokenAddress, order.makerAssetAmount, vaultAddress),
                checkFundIsNotShutdown_1.checkFundIsNotShutdown(this.trading.environment, hubAddress),
                checkSenderIsFundManager_1.checkSenderIsFundManager(this.trading.environment, from, hubAddress),
                checkExistingOpenMakeOrder_1.checkExistingOpenMakeOrder(this.trading, makerTokenAddress),
                checkCooldownReached_1.checkCooldownReached(this.trading, makerTokenAddress),
            ]);
        });
        return this.trading.callOnExchange(from, methodArgs, validate);
    }
    /**
     * Take an order on 0x.
     *
     * @param from The address of the sender.
     * @param order The arguments.
     * @param takerAmount: The amount (overriding the takeAssetAmount of the order)
     */
    takeOrder(from, order, takerAmount) {
        const makerTokenAddress = order_utils_v2_1.assetDataUtils.decodeERC20AssetData(order.makerAssetData).tokenAddress;
        const takerTokenAddress = order_utils_v2_1.assetDataUtils.decodeERC20AssetData(order.takerAssetData).tokenAddress;
        const amount = takerAmount || order.takerAssetAmount;
        const paddedZeros = web3_utils_1.padLeft('0x0', 64);
        const methodArgs = {
            exchangeIndex: this.index,
            methodSignature: functionSignature_1.functionSignature(ExchangeAdapter_abi_1.ExchangeAdapterAbi, 'takeOrder'),
            orderAddresses: [
                order.makerAddress,
                order.takerAddress,
                makerTokenAddress,
                takerTokenAddress,
                order.feeRecipientAddress,
                zeroAddress_1.zeroAddress,
                zeroAddress_1.zeroAddress,
                zeroAddress_1.zeroAddress,
            ],
            orderValues: [
                order.makerAssetAmount,
                order.takerAssetAmount,
                order.makerFee,
                order.takerFee,
                order.expirationTimeSeconds,
                order.salt,
                amount,
                zeroBigNumber_1.zeroBigNumber,
            ],
            orderData: [order.makerAssetData, order.takerAssetData, paddedZeros, paddedZeros],
            identifier: paddedZeros,
            signature: order.signature,
        };
        const validate = () => __awaiter(this, void 0, void 0, function* () {
            const hubAddress = yield this.trading.getHub();
            const vaultAddress = (yield this.trading.getRoutes()).vault;
            yield Promise.all([
                checkSenderIsFundManager_1.checkSenderIsFundManager(this.trading.environment, from, hubAddress),
                checkSufficientBalance_1.checkSufficientBalance(this.trading.environment, takerTokenAddress, amount, vaultAddress),
            ]);
        });
        return this.trading.callOnExchange(from, methodArgs, validate);
    }
    /**
     * Cancel a make order on 0x.
     *
     * @param from The address of the sender.
     * @param args The arguments.
     */
    cancelOrder(from, args) {
        const orderHashHex = args.orderHashHex || (args.orderId && web3_utils_1.padLeft(web3_utils_1.numberToHex(args.orderId.toFixed(0)), 64));
        const paddedZeros = web3_utils_1.padLeft('0x0', 64);
        const methodArgs = {
            exchangeIndex: this.index,
            methodSignature: functionSignature_1.functionSignature(ExchangeAdapter_abi_1.ExchangeAdapterAbi, 'cancelOrder'),
            orderAddresses: [
                zeroAddress_1.zeroAddress,
                zeroAddress_1.zeroAddress,
                zeroAddress_1.zeroAddress,
                zeroAddress_1.zeroAddress,
                zeroAddress_1.zeroAddress,
                zeroAddress_1.zeroAddress,
                zeroAddress_1.zeroAddress,
                zeroAddress_1.zeroAddress,
            ],
            orderValues: [
                zeroBigNumber_1.zeroBigNumber,
                zeroBigNumber_1.zeroBigNumber,
                zeroBigNumber_1.zeroBigNumber,
                zeroBigNumber_1.zeroBigNumber,
                zeroBigNumber_1.zeroBigNumber,
                zeroBigNumber_1.zeroBigNumber,
                zeroBigNumber_1.zeroBigNumber,
                zeroBigNumber_1.zeroBigNumber,
            ],
            orderData: [paddedZeros, paddedZeros, paddedZeros, paddedZeros],
            identifier: orderHashHex,
            signature: paddedZeros,
        };
        const validate = () => __awaiter(this, void 0, void 0, function* () {
            const hubAddress = yield this.trading.getHub();
            yield checkSenderIsFundManager_1.checkSenderIsFundManager(this.trading.environment, from, hubAddress);
            if (!orderHashHex) {
                throw new MissingZeroExOrderHashHex();
            }
        });
        return this.trading.callOnExchange(from, methodArgs, validate);
    }
    createUnsignedOrder(values) {
        return __awaiter(this, void 0, void 0, function* () {
            const duration = values.duration == null ? 24 * 60 * 60 : values.duration;
            const block = yield this.trading.environment.client.getBlock('latest');
            const order = {
                exchangeAddress: this.info.exchange,
                makerAddress: this.trading.contract.address,
                takerAddress: zeroAddress_1.zeroAddress,
                senderAddress: zeroAddress_1.zeroAddress,
                feeRecipientAddress: values.feeRecipientAddress || zeroAddress_1.zeroAddress,
                expirationTimeSeconds: new bignumber_js_1.default(block.timestamp).plus(duration),
                salt: order_utils_v2_1.generatePseudoRandomSalt(),
                makerAssetAmount: values.makerAssetAmount,
                takerAssetAmount: values.takerAssetAmount,
                makerAssetData: order_utils_v2_1.assetDataUtils.encodeERC20AssetData(values.makerTokenAddress),
                takerAssetData: order_utils_v2_1.assetDataUtils.encodeERC20AssetData(values.takerTokenAddress),
                makerFee: zeroBigNumber_1.zeroBigNumber,
                takerFee: values.takerFee || zeroBigNumber_1.zeroBigNumber,
            };
            return order;
        });
    }
    signOrder(order, signer) {
        return __awaiter(this, void 0, void 0, function* () {
            const provider = this.getSubprovider();
            const signed = yield order_utils_v2_1.signatureUtils.ecSignOrderAsync(provider, order, signer);
            if (sameAddress_1.sameAddress(signed.makerAddress, signer)) {
                return signed;
            }
            return Object.assign(Object.assign({}, signed), { signature: `${signed.signature.slice(0, -1)}${order_utils_v2_1.SignatureType.PreSigned}` });
        });
    }
    getSubprovider() {
        const eth = this.trading.environment.client;
        const provider = {
            sendAsync: (payload, callback) => __awaiter(this, void 0, void 0, function* () {
                const method = payload.method;
                const params = payload.params;
                try {
                    callback(null, {
                        result: yield eth.currentProvider.send(method, params),
                        id: payload.id,
                        jsonrpc: payload.jsonrpc,
                    });
                }
                catch (error) {
                    callback(error);
                }
            }),
        };
        return provider;
    }
}
exports.ZeroExV2TradingAdapter = ZeroExV2TradingAdapter;
