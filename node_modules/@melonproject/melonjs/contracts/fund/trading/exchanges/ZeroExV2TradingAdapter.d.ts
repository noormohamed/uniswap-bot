import BigNumber from 'bignumber.js';
import { JSONRPCRequestPayload, JSONRPCErrorCallback, SignedOrder } from '@0x/order-utils-v2';
import { Address } from '../../../../Address';
import { ValidationError } from '../../../../errors/ValidationError';
import { BaseTradingAdapter } from './BaseTradingAdapter';
import { ZeroExV2Order } from '../../../exchanges/third-party/zeroex/ZeroExV2Exchange';
export interface CancelOrderZeroExV2Args {
    orderHashHex?: string;
    orderId?: BigNumber;
}
export interface CreateUnsignedOrderZeroExV2Args {
    makerTokenAddress: Address;
    takerTokenAddress: Address;
    makerAssetAmount: BigNumber;
    takerAssetAmount: BigNumber;
    takerFee?: BigNumber;
    feeRecipientAddress?: Address;
    duration?: number;
}
export declare class MissingZeroExOrderHashHex extends ValidationError {
    readonly name = "MissingZeroExOrderHashHex";
    constructor(message?: string);
}
export declare class InvalidOrderSignatureError extends ValidationError {
    readonly name = "InvalidOrderSignatureError";
    constructor(message?: string);
}
export declare class ZeroExV2TradingAdapter extends BaseTradingAdapter {
    getOrderHash(order: SignedOrder): string;
    /**
     * Create a make order on 0x.
     *
     * @param from The address of the sender.
     * @param args The arguments.
     */
    makeOrder(from: Address, order: SignedOrder): import("../../../..").Transaction<import("web3-core").TransactionReceipt>;
    /**
     * Take an order on 0x.
     *
     * @param from The address of the sender.
     * @param order The arguments.
     * @param takerAmount: The amount (overriding the takeAssetAmount of the order)
     */
    takeOrder(from: Address, order: SignedOrder, takerAmount?: BigNumber): import("../../../..").Transaction<import("web3-core").TransactionReceipt>;
    /**
     * Cancel a make order on 0x.
     *
     * @param from The address of the sender.
     * @param args The arguments.
     */
    cancelOrder(from: Address, args: CancelOrderZeroExV2Args): import("../../../..").Transaction<import("web3-core").TransactionReceipt>;
    createUnsignedOrder(values: CreateUnsignedOrderZeroExV2Args): Promise<ZeroExV2Order>;
    signOrder(order: ZeroExV2Order, signer: Address): Promise<SignedOrder>;
    protected getSubprovider(): {
        sendAsync: (payload: JSONRPCRequestPayload, callback: JSONRPCErrorCallback) => Promise<void>;
    };
}
