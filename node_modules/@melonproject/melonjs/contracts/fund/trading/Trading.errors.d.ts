import { Address } from '../../../Address';
import { ValidationError } from '../../../errors/ValidationError';
import BigNumber from 'bignumber.js';
export declare class ExchangeNotRegisteredWithFundError extends ValidationError {
    readonly kyberAddress: Address;
    readonly name = "ExchangeNotRegisteredWithFundError";
    constructor(kyberAddress: Address, message?: string);
}
export declare class FundIsShutDownError extends ValidationError {
    readonly fund: Address;
    readonly name = "FundIsShutDownError";
    constructor(fund: Address, message?: string);
}
export declare class AdapterIsAlreadyAddedError extends ValidationError {
    readonly adapter: Address;
    readonly name = "AdapterIsAlreadyAddedError";
    constructor(adapter: Address, message?: string);
}
export declare class AdapterMethodNotAllowedError extends ValidationError {
    readonly adapter: Address;
    readonly signature: string;
    readonly name = "AdapterMethodNotAllowedError";
    constructor(adapter: Address, signature: string, message?: string);
}
export declare class InsufficientBalanceError extends ValidationError {
    readonly requested: BigNumber;
    readonly actual: BigNumber;
    readonly name = "InsufficientBalanceError";
    constructor(requested: BigNumber, actual: BigNumber, message?: string);
}
export declare class InvalidExchangeIndexError extends ValidationError {
    readonly index: number;
    readonly name = "InvalidExchangeIndexError";
    constructor(index: number, message?: string);
}
export declare class SenderIsNotFundManagerError extends ValidationError {
    readonly sender: Address;
    readonly name = "SenderIsNotFundManagerError";
    constructor(sender: Address, message?: string);
}
export declare class SenderIsNotManagerOrContractError extends ValidationError {
    readonly sender: Address;
    readonly name = "SenderIsNotManagerOrContractError";
    constructor(sender: Address, message?: string);
}
export declare class TradePolicyValidationError extends ValidationError {
    readonly signature: string;
    readonly name = "TradePolicyValidationError";
    constructor(signature: string, message?: string);
}
export declare class AssetAlreadyHasOpenMakeOrderError extends ValidationError {
    readonly asset: Address;
    readonly name = "AssetAlreadyHasOpenMakeOrderError";
    constructor(asset: Address, message?: string);
}
export declare class CooldownForMakerAssetNotReachedError extends ValidationError {
    readonly asset: Address;
    readonly name = "CooldownForMakerAssetNotReachedError";
    constructor(asset: Address, message?: string);
}
