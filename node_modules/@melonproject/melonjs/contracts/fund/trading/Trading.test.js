"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const createTestEnvironment_1 = require("../../../utils/tests/createTestEnvironment");
const deployHub_1 = require("../../../utils/tests/deployHub");
const deployTrading_1 = require("../../../utils/tests/deployTrading");
const deployRegistry_1 = require("../../../utils/tests/deployRegistry");
const randomAddress_1 = require("../../../utils/tests/randomAddress");
const deployWeth_1 = require("../../../utils/tests/deployWeth");
const Trading_errors_1 = require("./Trading.errors");
const KyberTradingAdapter_1 = require("./exchanges/KyberTradingAdapter");
const ExchangeAdapter_abi_1 = require("../../../abis/ExchangeAdapter.abi");
const encodeFunctionSignature_1 = require("../../../utils/encodeFunctionSignature");
describe('Trading', () => {
    const exchangeAddress = randomAddress_1.randomAddress();
    let environment;
    let trading;
    let weth;
    let registry;
    beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
        environment = yield createTestEnvironment_1.createTestEnvironment();
        const hub = yield deployHub_1.deployHub(environment, environment.accounts[0], {
            manager: environment.accounts[1],
            name: 'trading-test-fund',
        });
        weth = yield deployWeth_1.deployWeth(environment, environment.accounts[0]);
        const adapterAddress = randomAddress_1.randomAddress();
        registry = yield deployRegistry_1.deployRegistry(environment, environment.accounts[0], environment.accounts[0]);
        {
            const tx = registry.registerExchangeAdapter(environment.accounts[0], {
                exchangeAddress,
                adapterAddress,
                takesCustody: true,
                sigs: [
                    encodeFunctionSignature_1.encodeFunctionSignature(ExchangeAdapter_abi_1.ExchangeAdapterAbi, 'makeOrder'),
                    encodeFunctionSignature_1.encodeFunctionSignature(ExchangeAdapter_abi_1.ExchangeAdapterAbi, 'takeOrder'),
                ],
            });
            yield tx.send(yield tx.prepare());
        }
        {
            const tx = yield registry.registerAsset(environment.accounts[0], {
                address: weth.contract.address,
                name: 'Test Asset',
                symbol: 'TAT',
                url: 'https://tat.tat/',
                reserveMin: new bignumber_js_1.default(100000),
                standards: [1, 2, 3],
                sigs: [
                    encodeFunctionSignature_1.encodeFunctionSignature(ExchangeAdapter_abi_1.ExchangeAdapterAbi, 'makeOrder'),
                    encodeFunctionSignature_1.encodeFunctionSignature(ExchangeAdapter_abi_1.ExchangeAdapterAbi, 'takeOrder'),
                ],
            });
            yield tx.send(yield tx.prepare());
        }
        trading = yield deployTrading_1.deployTrading(environment, environment.accounts[0], {
            hub: hub.contract.address,
            exchanges: [exchangeAddress],
            adapters: [adapterAddress],
            registry: registry.contract.address,
        });
    }));
    it('should return the correct exchange info for all exchanges', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield trading.getExchangeInfo();
        result.forEach((item) => {
            expect(typeof item.takesCustody).toBe('boolean');
            expect(item.exchange.startsWith('0x')).toBe(true);
            expect(item.adapter.startsWith('0x')).toBe(true);
        });
    }));
    it('should return the correct exchange for a single exchange', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield trading.getExchange(0);
        expect(typeof result.takesCustody).toBe('boolean');
        expect(result.exchange.startsWith('0x')).toBe(true);
        expect(result.adapter.startsWith('0x')).toBe(true);
    }));
    it('should return on open make order object', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield trading.getOpenMakeOrder(exchangeAddress, weth.contract.address);
        expect(result).toMatchObject({
            id: expect.any(bignumber_js_1.default),
            expiresAt: expect.any(Date),
            orderIndex: expect.any(bignumber_js_1.default),
            buyAsset: expect.any(String),
        });
    }));
    it('should check if an order is expired', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield trading.isOrderExpired(exchangeAddress, weth.contract.address);
        expect(result === true || result === false).toBe(true);
    }));
    it('should get the order lifespan', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield trading.getOrderLifespan();
        expect(result.isEqualTo(new bignumber_js_1.default(86400))).toBe(true);
    }));
    it('should throw when passing a wrong address for Kyber', () => __awaiter(void 0, void 0, void 0, function* () {
        yield expect(KyberTradingAdapter_1.KyberTradingAdapter.create(environment, randomAddress_1.randomAddress(), trading)).rejects.toThrowError(Trading_errors_1.ExchangeNotRegisteredWithFundError);
    }));
});
