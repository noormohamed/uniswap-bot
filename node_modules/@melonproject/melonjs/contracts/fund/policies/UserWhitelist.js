"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const UserWhitelist_abi_1 = require("../../../abis/UserWhitelist.abi");
const IPolicy_1 = require("./IPolicy");
class UserWhitelist extends IPolicy_1.IPolicy {
    static deploy(environment, bytecode, from, approved) {
        return super.createDeployment(environment, bytecode, from, [approved]);
    }
    /**
     * Add a user address to a UserWhitelist.
     *
     * @param from The address of the sender
     * @param user The address of the user to be added to the UserWhitelist
     */
    addToWhitelist(from, user) {
        return this.createTransaction({ from, method: 'addToWhitelist', args: [user] });
    }
    /**
     * Remove a user address from a UserWhitelist.
     *
     * @param from The address of the sender
     * @param user The address of the user to be removed from the UserWhitelist
     */
    removeFromWhitelist(from, user) {
        return this.createTransaction({ from, method: 'removeFromWhitelist', args: [user] });
    }
    /**
     * Add a list of user addresses to a UserWhitelist.
     *
     * @param from The address of the sender
     * @param users The addresses of the users to be added to the UserWhitelist
     */
    batchAddToWhitelist(from, users) {
        return this.createTransaction({ from, method: 'batchAddToWhitelist', args: [users] });
    }
    /**
     * Remove a list of user addresses from a UserWhitelist.
     *
     * @param from The address of the sender
     * @param users The addresses of the users to be removed from the UserWhitelist
     */
    batchRemoveFromWhitelist(from, users) {
        return this.createTransaction({ from, method: 'batchRemoveFromWhitelist', args: [users] });
    }
    /**
     * Checks if an address is whitelisted
     *
     * @param address The address to check
     * @param block The block number to execute the call on.
     */
    isWhitelisted(address, block) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.makeCall('whitelisted', [address], block);
        });
    }
}
exports.UserWhitelist = UserWhitelist;
UserWhitelist.abi = UserWhitelist_abi_1.UserWhitelistAbi;
