"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Contract_1 = require("../../../Contract");
const applyMixins_1 = require("../../../utils/applyMixins");
const IPolicy_1 = require("./IPolicy");
const AddressList_1 = require("./AddressList");
const AssetWhitelist_abi_1 = require("../../../abis/AssetWhitelist.abi");
class AssetWhitelist extends Contract_1.Contract {
    static deploy(environment, bytecode, from, members) {
        return super.createDeployment(environment, bytecode, from, [members]);
    }
    /**
     * Removes an asset from an AssetWhitelist.
     *
     * @param from The address of the sender
     * @param asset The asset address to be removed from the AssetWhitelist
     */
    removeFromWhitelist(from, asset) {
        const validate = () => __awaiter(this, void 0, void 0, function* () {
            if (!(yield this.isMember(asset))) {
                throw new AddressList_1.IsNotMemberError(asset);
            }
        });
        return this.createTransaction({ from, method: 'removeFromWhitelist', args: [asset], validate });
    }
    /**
     * Gets the index of an asset.
     *
     * @param asset The address of the asset
     * @param block The block number to execute the call on.
     */
    getAssetIndex(asset, block) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.makeCall('getAssetIndex', [asset], block);
            return parseInt(result, 10);
        });
    }
}
exports.AssetWhitelist = AssetWhitelist;
AssetWhitelist.abi = AssetWhitelist_abi_1.AssetWhitelistAbi;
applyMixins_1.applyMixins(AssetWhitelist, [IPolicy_1.IPolicy, AddressList_1.AddressList]);
