import { Environment } from '../../../Environment';
import { Address } from '../../../Address';
import { IPolicy } from './IPolicy';
export declare class UserWhitelist extends IPolicy {
    static readonly abi: import("web3-utils").AbiItem[];
    static deploy(environment: Environment, bytecode: string, from: Address, approved: Address[]): import("../../..").Deployment<UserWhitelist>;
    /**
     * Add a user address to a UserWhitelist.
     *
     * @param from The address of the sender
     * @param user The address of the user to be added to the UserWhitelist
     */
    addToWhitelist(from: Address, user: Address): import("../../..").Transaction<import("web3-core").TransactionReceipt>;
    /**
     * Remove a user address from a UserWhitelist.
     *
     * @param from The address of the sender
     * @param user The address of the user to be removed from the UserWhitelist
     */
    removeFromWhitelist(from: Address, user: Address): import("../../..").Transaction<import("web3-core").TransactionReceipt>;
    /**
     * Add a list of user addresses to a UserWhitelist.
     *
     * @param from The address of the sender
     * @param users The addresses of the users to be added to the UserWhitelist
     */
    batchAddToWhitelist(from: Address, users: Address[]): import("../../..").Transaction<import("web3-core").TransactionReceipt>;
    /**
     * Remove a list of user addresses from a UserWhitelist.
     *
     * @param from The address of the sender
     * @param users The addresses of the users to be removed from the UserWhitelist
     */
    batchRemoveFromWhitelist(from: Address, users: Address[]): import("../../..").Transaction<import("web3-core").TransactionReceipt>;
    /**
     * Checks if an address is whitelisted
     *
     * @param address The address to check
     * @param block The block number to execute the call on.
     */
    isWhitelisted(address: Address, block?: number): Promise<boolean>;
}
