"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const UserWhitelist_1 = require("./UserWhitelist");
const createTestEnvironment_1 = require("../../../utils/tests/createTestEnvironment");
const randomAddress_1 = require("../../../utils/tests/randomAddress");
const UserWhitelist_bin_1 = require("../../../abis/UserWhitelist.bin");
const range_1 = require("../../../utils/range");
describe('UserWhitelist', () => {
    let environment;
    let userWhiteList;
    const addresses = range_1.range(5).map(() => randomAddress_1.randomAddress());
    beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
        environment = yield createTestEnvironment_1.createTestEnvironment();
        const deploy = UserWhitelist_1.UserWhitelist.deploy(environment, UserWhitelist_bin_1.UserWhitelistBytecode, environment.accounts[0], addresses);
        userWhiteList = yield deploy.send(yield deploy.prepare());
    }));
    it('should check whether a user is whitelisted', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield userWhiteList.isWhitelisted(addresses[3]);
        expect(result).toBe(true);
    }));
    it('should return the correct identifier', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield userWhiteList.getIdentifier();
        expect(result).toBe('UserWhitelist');
    }));
});
