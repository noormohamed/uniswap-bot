"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const MaxConcentration_abi_1 = require("../../../abis/MaxConcentration.abi");
const IPolicy_1 = require("./IPolicy");
const toBigNumber_1 = require("../../../utils/toBigNumber");
class MaxConcentration extends IPolicy_1.IPolicy {
    static deploy(environment, bytecode, from, maxConcentration) {
        return super.createDeployment(environment, bytecode, from, [maxConcentration.toFixed(0)]);
    }
    /**
     * Gets the maximum concentration of an asset in the portfolio.
     *
     * @param block The block number to execute the call on.
     */
    getMaxConcentration(block) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.makeCall('maxConcentration', undefined, block);
            return toBigNumber_1.toBigNumber(result);
        });
    }
}
exports.MaxConcentration = MaxConcentration;
MaxConcentration.abi = MaxConcentration_abi_1.MaxConcentrationAbi;
