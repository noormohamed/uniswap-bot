"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const createTestEnvironment_1 = require("../../../utils/tests/createTestEnvironment");
const MaxPositions_1 = require("./MaxPositions");
const MaxPositions_bin_1 = require("../../../abis/MaxPositions.bin");
describe('Policy', () => {
    let environment;
    let maxPositions;
    const max = 10;
    beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
        environment = yield createTestEnvironment_1.createTestEnvironment();
        // Policy itself cannot be deployed (empty bytecode, it's really just an interface)
        const deploy = MaxPositions_1.MaxPositions.deploy(environment, MaxPositions_bin_1.MaxPositionsBytecode, environment.accounts[0], max);
        maxPositions = yield deploy.send(yield deploy.prepare());
    }));
    it('should return the identifier of a policy', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield maxPositions.getIdentifier();
        expect(result).toBe('MaxPositions');
    }));
    it('should return the position of a policy', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield maxPositions.getPosition();
        expect(result).toBe(1);
    }));
});
