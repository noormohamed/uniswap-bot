import { Contract } from '../../../Contract';
import { Address } from '../../../Address';
import { Environment } from '../../../Environment';
import { ValidationError } from '../../../errors/ValidationError';
export declare class IsNotMemberError extends ValidationError {
    readonly address: Address;
    readonly name = "IsNotMemberError";
    constructor(address: Address, message?: string);
}
export declare class IsAlreadyMemberError extends ValidationError {
    readonly address: Address;
    readonly name = "IsAlreadyMemberError";
    constructor(address: Address, message?: string);
}
export declare class AddressList extends Contract {
    static readonly abi: import("web3-utils").AbiItem[];
    static deploy(environment: Environment, bytecode: string, from: Address, members: Address[]): import("../../..").Deployment<AddressList>;
    /**
     * Checks if an address is part of an address list.
     *
     * @param address The address to check
     * @param block The block number to execute the call on.
     */
    isMember(address: Address, block?: number): Promise<boolean>;
    /**
     * Gets the number of members of an address list.
     *
     * @param address The address to check
     * @param block The block number to execute the call on.
     */
    getMemberCount(block?: number): Promise<import("bignumber.js").default>;
    /**
     * Gets all members of an address list.
     *
     * @param address The address to check
     * @param block The block number to execute the call on.
     */
    getMembers(block?: number): Promise<string[]>;
}
