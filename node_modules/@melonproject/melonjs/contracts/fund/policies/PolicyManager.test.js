"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const PolicyManager_1 = require("./PolicyManager");
const createTestEnvironment_1 = require("../../../utils/tests/createTestEnvironment");
const PolicyManager_bin_1 = require("../../../abis/PolicyManager.bin");
const MaxPositions_bin_1 = require("../../../abis/MaxPositions.bin");
const MaxPositions_1 = require("./MaxPositions");
const PermissiveAuthority_1 = require("../../dependencies/authorization/PermissiveAuthority");
const PermissiveAuthority_bin_1 = require("../../../abis/PermissiveAuthority.bin");
const MaxConcentration_1 = require("./MaxConcentration");
const MaxConcentration_bin_1 = require("../../../abis/MaxConcentration.bin");
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const availablePolicies_1 = require("../../../utils/availablePolicies");
describe('PolicyManager', () => {
    let environment;
    let policyManager;
    beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
        environment = yield createTestEnvironment_1.createTestEnvironment();
        const deployPermissiveAuthority = PermissiveAuthority_1.PermissiveAuthority.deploy(environment, PermissiveAuthority_bin_1.PermissiveAuthorityBytecode, environment.accounts[0]);
        const permissiveAuthority = yield deployPermissiveAuthority.send(yield deployPermissiveAuthority.prepare());
        const deploy = PolicyManager_1.PolicyManager.deploy(environment, PolicyManager_bin_1.PolicyManagerBytecode, environment.accounts[0], permissiveAuthority.contract.address);
        policyManager = yield deploy.send(yield deploy.prepare());
    }));
    it('should register a policy', () => __awaiter(void 0, void 0, void 0, function* () {
        const deploy = MaxPositions_1.MaxPositions.deploy(environment, MaxPositions_bin_1.MaxPositionsBytecode, environment.accounts[0], 10);
        const maxPositions = yield deploy.send(yield deploy.prepare());
        const tx = policyManager.registerPolicy(environment.accounts[0], '0x61346679', maxPositions.contract.address);
        const txResult = yield tx.send(yield tx.prepare());
        expect(txResult.gasUsed).toBeGreaterThanOrEqual(0);
    }));
    it('should return the policies by signature', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield policyManager.getPoliciesBySignature('0x61346679');
        expect(result).toMatchObject({
            pre: expect.any(Array),
            post: expect.any(Array),
        });
    }));
    it('should batch register several policies', () => __awaiter(void 0, void 0, void 0, function* () {
        const deployMaxPositions = MaxPositions_1.MaxPositions.deploy(environment, MaxPositions_bin_1.MaxPositionsBytecode, environment.accounts[0], 10);
        const maxPositions = yield deployMaxPositions.send(yield deployMaxPositions.prepare());
        const deployMaxConcentration = MaxConcentration_1.MaxConcentration.deploy(environment, MaxConcentration_bin_1.MaxConcentrationBytecode, environment.accounts[0], new bignumber_js_1.default('100000000000000000'));
        const maxConcentration = yield deployMaxConcentration.send(yield deployMaxConcentration.prepare());
        const tx = policyManager.batchRegisterPolicies(environment.accounts[0], ['0x61346679', '0x61346679'], [maxPositions.contract.address, maxConcentration.contract.address]);
        const txResult = yield tx.send(yield tx.prepare());
        expect(txResult.gasUsed).toBeGreaterThanOrEqual(0);
    }));
    it.only('should load the available policies', () => __awaiter(void 0, void 0, void 0, function* () {
        const policies = availablePolicies_1.availablePolicies();
        policies.forEach((policy) => expect(policy).toMatchObject({
            id: expect.any(String),
            name: expect.any(String),
            signatures: expect.any(Array),
            historic: expect.any(Boolean),
        }));
    }));
});
