"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Contract_1 = require("../../../Contract");
const AddressList_abi_1 = require("../../../abis/AddressList.abi");
const toBigNumber_1 = require("../../../utils/toBigNumber");
const ValidationError_1 = require("../../../errors/ValidationError");
class IsNotMemberError extends ValidationError_1.ValidationError {
    constructor(address, message = 'Address is not member of AddressList') {
        super(message);
        this.address = address;
        this.name = 'IsNotMemberError';
    }
}
exports.IsNotMemberError = IsNotMemberError;
class IsAlreadyMemberError extends ValidationError_1.ValidationError {
    constructor(address, message = 'Address is already member of AddressList') {
        super(message);
        this.address = address;
        this.name = 'IsAlreadyMemberError';
    }
}
exports.IsAlreadyMemberError = IsAlreadyMemberError;
class AddressList extends Contract_1.Contract {
    static deploy(environment, bytecode, from, members) {
        return super.createDeployment(environment, bytecode, from, [members]);
    }
    /**
     * Checks if an address is part of an address list.
     *
     * @param address The address to check
     * @param block The block number to execute the call on.
     */
    isMember(address, block) {
        return this.makeCall('isMember', [address], block);
    }
    /**
     * Gets the number of members of an address list.
     *
     * @param address The address to check
     * @param block The block number to execute the call on.
     */
    getMemberCount(block) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.makeCall('getMemberCount', undefined, block);
            return toBigNumber_1.toBigNumber(result);
        });
    }
    /**
     * Gets all members of an address list.
     *
     * @param address The address to check
     * @param block The block number to execute the call on.
     */
    getMembers(block) {
        return this.makeCall('getMembers', undefined, block);
    }
}
exports.AddressList = AddressList;
AddressList.abi = AddressList_abi_1.AddressListAbi;
