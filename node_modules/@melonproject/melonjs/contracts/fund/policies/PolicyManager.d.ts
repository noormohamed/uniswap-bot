import { Contract } from '../../../Contract';
import { Environment } from '../../../Environment';
import { Address } from '../../../Address';
import { Spoke } from '../hub/Spoke';
import { PolicyArgs } from './IPolicy';
import { ValidationError } from '../../../errors/ValidationError';
export declare type Policies = {
    pre: Address[];
    post: Address[];
};
export declare class NotAuthorizedError extends ValidationError {
    name: string;
    constructor(message?: string);
}
export declare class PolicyPositionNotPreOrPostError extends ValidationError {
    name: string;
    constructor(message?: string);
}
export declare class ArrayLenghtsNotEqualError extends ValidationError {
    readonly signatures: string[];
    readonly policyAddresses: Address[];
    name: string;
    constructor(signatures: string[], policyAddresses: Address[], message?: string);
}
export declare class PolicyManager extends Contract {
    static readonly abi: import("web3-utils").AbiItem[];
    static deploy(environment: Environment, bytecode: string, from: Address, hub: Address): import("../../..").Deployment<PolicyManager>;
    /**
     * Registers a policy.
     *
     * @param from The address of the sender
     * @param signature The signature of the policy
     * @param policyAddress The address of the policy
     */
    registerPolicy(from: Address, signature: string, policyAddress: Address): import("../../..").Transaction<import("web3-core").TransactionReceipt>;
    /**
     * Batch registers policies
     *
     * @param from The address of the sender
     * @param signatures The signatures of the policies
     * @param policyAddresss The addresses of the policies
     */
    batchRegisterPolicies(from: Address, signatures: string[], policyAddresses: Address[]): import("../../..").Transaction<import("web3-core").TransactionReceipt>;
    /**
     * Gets the policies by their signature.
     *
     * @param signature The signature of the policies
     * @param block The block number to execute the call on.
     */
    getPoliciesBySignature(signature: string, block?: number): Promise<Policies>;
    /**
     * Gets a list of policies (with parameters) that are registered for a fund
     *
     * @param block The block number to execute the call on.
     */
    getPolicies(block?: number): Promise<{
        address: string;
        identifier: string;
    }[]>;
    /**
     * Pre-validate policies (before trading)
     *
     * @param args The arguments of the policy validation function as [[PolicyValidationArgs]]
     * @param block The block number to execute the call on.
     */
    preValidate(args: PolicyArgs, block?: number): Promise<void>;
    /**
     * Post-validate policies (before trading)
     *
     * @param args The arguments of the policy validation function as [[PolicyValidationArgs]]
     * @param block The block number to execute the call on.
     */
    postValidate(args: PolicyArgs, block?: number): Promise<void>;
}
export interface PolicyManager extends Spoke {
}
