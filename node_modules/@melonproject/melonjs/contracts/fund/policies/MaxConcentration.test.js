"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const MaxConcentration_1 = require("./MaxConcentration");
const createTestEnvironment_1 = require("../../../utils/tests/createTestEnvironment");
const MaxConcentration_bin_1 = require("../../../abis/MaxConcentration.bin");
const bignumber_js_1 = __importDefault(require("bignumber.js"));
describe('MaxConcentration', () => {
    let environment;
    let maxConcentration;
    const max = new bignumber_js_1.default('100000000000000000');
    beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
        environment = yield createTestEnvironment_1.createTestEnvironment();
        const deploy = MaxConcentration_1.MaxConcentration.deploy(environment, MaxConcentration_bin_1.MaxConcentrationBytecode, environment.accounts[0], max);
        maxConcentration = yield deploy.send(yield deploy.prepare());
    }));
    it('should return the price tolerance', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield maxConcentration.getMaxConcentration();
        expect(result.isEqualTo(max)).toBe(true);
    }));
    it('should return the correct identifier', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield maxConcentration.getIdentifier();
        expect(result).toBe('MaxConcentration');
    }));
});
