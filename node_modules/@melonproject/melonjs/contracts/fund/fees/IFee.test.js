"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const createTestEnvironment_1 = require("../../../utils/tests/createTestEnvironment");
const deployManagementFee_1 = require("../../../utils/tests/deployManagementFee");
const randomAddress_1 = require("../../../utils/tests/randomAddress");
const IFee_1 = require("./IFee");
describe('FeeManager', () => {
    let environment;
    let fee;
    beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
        environment = yield createTestEnvironment_1.createTestEnvironment();
        fee = yield deployManagementFee_1.deployManagementFee(environment, environment.accounts[0]);
    }));
    it('should return the correct identifier', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield fee.identifier();
        expect(result).toBeGreaterThanOrEqual(0);
    }));
    it('should initialize the fees for a user', () => __awaiter(void 0, void 0, void 0, function* () {
        {
            const tx = fee.initializeForUser(environment.accounts[0], {
                feeRate: new bignumber_js_1.default(1000),
                feePeriod: 1000,
                denominationAsset: randomAddress_1.randomAddress(),
            });
            const txResult = yield tx.send(yield tx.prepare());
            expect(txResult.gasUsed).toBeGreaterThan(0);
        }
        {
            const tx = fee.updateState(environment.accounts[0]);
            const txResult = yield tx.send(yield tx.prepare());
            expect(txResult.gasUsed).toBeGreaterThan(0);
        }
    }));
    it('should throw FeeAlreadyInitializedError', () => __awaiter(void 0, void 0, void 0, function* () {
        const tx = fee.initializeForUser('', {
            feeRate: new bignumber_js_1.default(0),
            feePeriod: 0,
            denominationAsset: '',
        });
        jest.spyOn(fee, 'getLastPayoutTime').mockReturnValue(new Promise((resolve) => resolve(new Date(1))));
        yield expect(tx.validate()).rejects.toThrowError(IFee_1.FeeAlreadyInitializedError);
    }));
});
