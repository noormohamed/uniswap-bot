"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Contract_1 = require("../../../Contract");
const toBigNumber_1 = require("../../../utils/toBigNumber");
const IFee_abi_1 = require("../../../abis/IFee.abi");
const ValidationError_1 = require("../../../errors/ValidationError");
const toDate_1 = require("../../../utils/toDate");
class FeeAlreadyInitializedError extends ValidationError_1.ValidationError {
    constructor(message = 'Fee is already initialized for user.') {
        super(message);
        this.name = 'FeeAlreadyInitializedError';
    }
}
exports.FeeAlreadyInitializedError = FeeAlreadyInitializedError;
class IFee extends Contract_1.Contract {
    static deploy(environment, bytecode, from) {
        return super.createDeployment(environment, bytecode, from);
    }
    /**
     * Gets the identifier.
     *
     * @param block The block number to execute the call on.
     */
    identifier(block) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.makeCall('identifier', undefined, block);
            return parseInt(result, 10);
        });
    }
    /**
     * Gets the fee amount.
     *
     * @param block The block number to execute the call on.
     */
    feeAmount(block) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.makeCall('feeAmount', undefined, block);
            return toBigNumber_1.toBigNumber(result);
        });
    }
    /**
     * Gets the last payout time.
     *
     * @param feeManagerAddress The address of the fee manager contract
     * @param block The block number to execute the call on.
     */
    getLastPayoutTime(feeManagerAddress, block) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.makeCall('lastPayoutTime', [feeManagerAddress], block);
            return toDate_1.toDate(result);
        });
    }
    /**
     * Initializes a fee for a user (e.g. sets the parameters for a fund)
     *
     * @param from The sender address
     * @param fee The fee rate, period and denomination asset
     */
    initializeForUser(from, fee) {
        const args = [fee.feeRate.toFixed(0), fee.feePeriod, fee.denominationAsset];
        const validate = () => __awaiter(this, void 0, void 0, function* () {
            const lastPayoutTime = yield this.getLastPayoutTime(from);
            if (lastPayoutTime.getTime() !== 0) {
                throw new FeeAlreadyInitializedError();
            }
        });
        return this.createTransaction({ from, method: 'initializeForUser', args, validate });
    }
    /**
     * Updates the state for a fee
     */
    updateState(from) {
        return this.createTransaction({ from, method: 'updateState' });
    }
}
exports.IFee = IFee;
IFee.abi = IFee_abi_1.IFeeAbi;
