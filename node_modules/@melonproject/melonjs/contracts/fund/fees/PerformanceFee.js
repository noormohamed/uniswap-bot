"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const PerformanceFee_abi_1 = require("../../../abis/PerformanceFee.abi");
const toBigNumber_1 = require("../../../utils/toBigNumber");
const IFee_1 = require("./IFee");
const toDate_1 = require("../../../utils/toDate");
class PerformanceFee extends IFee_1.IFee {
    static deploy(environment, bytecode, from) {
        return super.createDeployment(environment, bytecode, from);
    }
    /**
     * Gets the performance fee rate.
     *
     * @param address The address of the fee manager contract
     * @param block The block number to execute the call on.
     */
    getPerformanceFeeRate(address, block) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.makeCall('performanceFeeRate', [address], block);
            return toBigNumber_1.toBigNumber(result);
        });
    }
    /**
     * Gets the performance fee period.
     *
     * @param address The address of the fee manager contract
     * @param block The block number to execute the call on.
     */
    getPerformanceFeePeriod(address, block) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.makeCall('performanceFeePeriod', [address], block);
            return parseInt(result, 10);
        });
    }
    /**
     * Gets the current high water mark
     *
     * @param address The address of the fee manager contract
     * @param block The block number to execute the call on.
     */
    getHighWaterMark(address, block) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.makeCall('highWaterMark', [address], block);
            return toBigNumber_1.toBigNumber(result);
        });
    }
    /**
     * Gets the initialize time
     *
     * @param address The address of the fee manager contract
     * @param block The block number to execute the call on.
     */
    getInitializeTime(address, block) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.makeCall('initializeTime', [address], block);
            return toDate_1.toDate(result);
        });
    }
    /**
     * Checks wether the performance fee can be updated
     *
     * @param address The address of the fee manager contract
     * @param block The block number to execute the call on.
     */
    canUpdate(address, block) {
        return this.makeCall('canUpdate', [address], block);
    }
    /**
     * Gets the divisor.
     *
     * @param block The block number to execute the call on.
     */
    getDivisor(block) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.makeCall('DIVISOR', undefined, block);
            return toBigNumber_1.toBigNumber(result);
        });
    }
}
exports.PerformanceFee = PerformanceFee;
PerformanceFee.abi = PerformanceFee_abi_1.PerformanceFeeAbi;
