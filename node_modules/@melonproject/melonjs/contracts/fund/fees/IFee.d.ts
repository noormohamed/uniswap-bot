import { Contract } from '../../../Contract';
import { Environment } from '../../../Environment';
import { Address } from '../../../Address';
import BigNumber from 'bignumber.js';
import { ValidationError } from '../../../errors/ValidationError';
export interface FeeInitializationArguments {
    feeRate: BigNumber;
    feePeriod: number;
    denominationAsset: Address;
}
export declare class FeeAlreadyInitializedError extends ValidationError {
    readonly name = "FeeAlreadyInitializedError";
    constructor(message?: string);
}
export declare class IFee extends Contract {
    static readonly abi: import("web3-utils").AbiItem[];
    static deploy(environment: Environment, bytecode: string, from: Address): import("../../..").Deployment<IFee>;
    /**
     * Gets the identifier.
     *
     * @param block The block number to execute the call on.
     */
    identifier(block?: number): Promise<number>;
    /**
     * Gets the fee amount.
     *
     * @param block The block number to execute the call on.
     */
    feeAmount(block?: number): Promise<BigNumber>;
    /**
     * Gets the last payout time.
     *
     * @param feeManagerAddress The address of the fee manager contract
     * @param block The block number to execute the call on.
     */
    getLastPayoutTime(feeManagerAddress: Address, block?: number): Promise<Date>;
    /**
     * Initializes a fee for a user (e.g. sets the parameters for a fund)
     *
     * @param from The sender address
     * @param fee The fee rate, period and denomination asset
     */
    initializeForUser(from: Address, fee: FeeInitializationArguments): import("../../..").Transaction<import("web3-core").TransactionReceipt>;
    /**
     * Updates the state for a fee
     */
    updateState(from: Address): import("../../..").Transaction<import("web3-core").TransactionReceipt>;
}
