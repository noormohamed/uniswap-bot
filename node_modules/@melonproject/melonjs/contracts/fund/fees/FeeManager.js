"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Contract_1 = require("../../../Contract");
const FeeManager_abi_1 = require("../../../abis/FeeManager.abi");
const Spoke_1 = require("../hub/Spoke");
const applyMixins_1 = require("../../../utils/applyMixins");
const toBigNumber_1 = require("../../../utils/toBigNumber");
const ManagementFee_1 = require("./ManagementFee");
const PerformanceFee_1 = require("./PerformanceFee");
const ValidationError_1 = require("../../../errors/ValidationError");
class ManagementFeeMustBeAtIndexZeroError extends ValidationError_1.ValidationError {
    constructor(address, message = 'Management fee must be at index 0.') {
        super(message);
        this.address = address;
        this.name = 'ManagementFeeMustBeAtIndexZeroError';
    }
}
exports.ManagementFeeMustBeAtIndexZeroError = ManagementFeeMustBeAtIndexZeroError;
class PerformanceFeeMustBeAtIndexOneError extends ValidationError_1.ValidationError {
    constructor(address, message = 'Performance fee must be at index 1.') {
        super(message);
        this.address = address;
        this.name = 'PerformanceFeeMustBeAtIndexOneError';
    }
}
exports.PerformanceFeeMustBeAtIndexOneError = PerformanceFeeMustBeAtIndexOneError;
class FeeManager extends Contract_1.Contract {
    static deploy(environment, bytecode, from, args) {
        return super.createDeployment(environment, bytecode, from, [
            args.hub,
            args.denominationAsset,
            args.fees,
            args.rates.map((fee) => fee.toFixed(0)),
            args.periods,
            args.registry,
        ]);
    }
    /**
     * Gets the address of the management fee contract.
     *
     * @param block The block number to execute the call on.
     */
    getManagementFeeAddress(block) {
        return this.makeCall('fees', [0], block);
    }
    /**
     * Gets the management fee information (rate).
     *
     * @param block The block number to execute the call on.
     */
    getManagementFeeInformation(block) {
        return __awaiter(this, void 0, void 0, function* () {
            const mgmtFeeAddress = yield this.getManagementFeeAddress(block);
            const mgmtFeeContract = new ManagementFee_1.ManagementFee(this.environment, mgmtFeeAddress);
            const rate = yield mgmtFeeContract.getManagementFeeRate(this.contract.address);
            return {
                rate: toBigNumber_1.toBigNumber(rate),
            };
        });
    }
    /**
     * Gets the amount of accrued and unpaid management fee.
     *
     * @param block The block number to execute the call on.
     */
    getManagementFeeAmount(block) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.makeCall('managementFeeAmount', undefined, block);
            return toBigNumber_1.toBigNumber(result);
        });
    }
    /**
     * Gets the address of the performance fee contract.
     *
     * @param block The block number to execute the call on.
     */
    getPerformanceFeeAddress(block) {
        return this.makeCall('fees', [1], block);
    }
    /**
     * Gets the performance fee information (rate).
     *
     * @param block The block number to execute the call on.
     */
    getPerformanceFeeInformation(block) {
        return __awaiter(this, void 0, void 0, function* () {
            const perfFeeAddress = yield this.getPerformanceFeeAddress(block);
            const perfFeeContract = new PerformanceFee_1.PerformanceFee(this.environment, perfFeeAddress);
            const [rate, period] = yield Promise.all([
                perfFeeContract.getPerformanceFeeRate(this.contract.address),
                perfFeeContract.getPerformanceFeePeriod(this.contract.address),
            ]);
            return {
                rate: toBigNumber_1.toBigNumber(rate),
                period,
            };
        });
    }
    /**
     * Gets the amount of accrued and unpaid performance fee.
     *
     * @param block The block number to execute the call on.
     */
    getPerformanceFeeAmount(block) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.makeCall('performanceFeeAmount', undefined, block);
            return toBigNumber_1.toBigNumber(result);
        });
    }
    /**
     * Rewards the management fee
     *
     * @param from The address of the sender
     */
    rewardManagementFee(from) {
        return this.createTransaction({ from, method: 'rewardManagementFee' });
    }
    getFee(identifier, block) {
        return this.makeCall('fees', [identifier], block);
    }
}
exports.FeeManager = FeeManager;
FeeManager.abi = FeeManager_abi_1.FeeManagerAbi;
applyMixins_1.applyMixins(FeeManager, [Spoke_1.Spoke]);
