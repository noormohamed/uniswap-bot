"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const createTestEnvironment_1 = require("../../../utils/tests/createTestEnvironment");
const randomAddress_1 = require("../../../utils/tests/randomAddress");
const deployHub_1 = require("../../../utils/tests/deployHub");
const deployWeth_1 = require("../../../utils/tests/deployWeth");
const FeeManagerFactory_1 = require("./FeeManagerFactory");
const FeeManagerFactory_bin_1 = require("../../../abis/FeeManagerFactory.bin");
const deployManagementFee_1 = require("../../../utils/tests/deployManagementFee");
const deployPerformanceFee_1 = require("../../../utils/tests/deployPerformanceFee");
const deployRegistry_1 = require("../../../utils/tests/deployRegistry");
const bignumber_js_1 = __importDefault(require("bignumber.js"));
describe('FeeManagerFactory', () => {
    let environment;
    let feeManagerFactory;
    beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
        environment = yield createTestEnvironment_1.createTestEnvironment();
        const deploy = FeeManagerFactory_1.FeeManagerFactory.deploy(environment, FeeManagerFactory_bin_1.FeeManagerFactoryBytecode, environment.accounts[0]);
        feeManagerFactory = yield deploy.send(yield deploy.prepare());
    }));
    it('should check if a contract is an instance of the FeeManagerFactory', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield feeManagerFactory.isInstance(randomAddress_1.randomAddress());
        expect(typeof result).toBe('boolean');
    }));
    it('should create an instance of a FeeManager contract', () => __awaiter(void 0, void 0, void 0, function* () {
        const hub = yield deployHub_1.deployHub(environment, environment.accounts[0], {
            name: 'feemanager-test-fund',
            manager: environment.accounts[0],
        });
        const weth = yield deployWeth_1.deployWeth(environment, environment.accounts[0]);
        const managementFee = yield deployManagementFee_1.deployManagementFee(environment, environment.accounts[0]);
        const performanceFee = yield deployPerformanceFee_1.deployPerformanceFee(environment, environment.accounts[0]);
        const registry = yield deployRegistry_1.deployRegistry(environment, environment.accounts[0], environment.accounts[0]);
        const txRegisterFees = registry.registerFees(environment.accounts[0], [
            managementFee.contract.address,
            performanceFee.contract.address,
        ]);
        yield txRegisterFees.send(yield txRegisterFees.prepare());
        const tx = feeManagerFactory.createInstance(environment.accounts[0], {
            hub: hub.contract.address,
            denominationAsset: weth.contract.address,
            fees: [managementFee.contract.address, performanceFee.contract.address],
            rates: [new bignumber_js_1.default('100000'), new bignumber_js_1.default('2000000')],
            periods: [1000, 2000],
            registry: registry.contract.address,
        });
        const txResult = yield tx.send(yield tx.prepare());
        expect(txResult.gasUsed).toBeGreaterThanOrEqual(0);
        expect(txResult.status).toBe(true);
    }));
});
