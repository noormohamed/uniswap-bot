import BigNumber from 'bignumber.js';
import { Contract } from '../../../Contract';
import { Environment } from '../../../Environment';
import { Address } from '../../../Address';
import { Spoke } from '../hub/Spoke';
import { ValidationError } from '../../../errors/ValidationError';
export declare class ManagementFeeMustBeAtIndexZeroError extends ValidationError {
    readonly address: Address;
    readonly name = "ManagementFeeMustBeAtIndexZeroError";
    constructor(address: Address, message?: string);
}
export declare class PerformanceFeeMustBeAtIndexOneError extends ValidationError {
    readonly address: Address;
    readonly name = "PerformanceFeeMustBeAtIndexOneError";
    constructor(address: Address, message?: string);
}
export declare type ManagementFeeInformation = {
    rate: BigNumber;
};
export declare type PerformanceFeeInformation = {
    rate: BigNumber;
    period: number;
};
export interface FeeManagerDeployArguments {
    hub: Address;
    denominationAsset: Address;
    fees: Address[];
    rates: BigNumber[];
    periods: number[];
    registry: Address;
}
export declare class FeeManager extends Contract {
    static readonly abi: import("web3-utils").AbiItem[];
    static deploy(environment: Environment, bytecode: string, from: Address, args: FeeManagerDeployArguments): import("../../..").Deployment<FeeManager>;
    /**
     * Gets the address of the management fee contract.
     *
     * @param block The block number to execute the call on.
     */
    getManagementFeeAddress(block?: number): Promise<string>;
    /**
     * Gets the management fee information (rate).
     *
     * @param block The block number to execute the call on.
     */
    getManagementFeeInformation(block?: number): Promise<ManagementFeeInformation>;
    /**
     * Gets the amount of accrued and unpaid management fee.
     *
     * @param block The block number to execute the call on.
     */
    getManagementFeeAmount(block?: number): Promise<BigNumber>;
    /**
     * Gets the address of the performance fee contract.
     *
     * @param block The block number to execute the call on.
     */
    getPerformanceFeeAddress(block?: number): Promise<string>;
    /**
     * Gets the performance fee information (rate).
     *
     * @param block The block number to execute the call on.
     */
    getPerformanceFeeInformation(block?: number): Promise<PerformanceFeeInformation>;
    /**
     * Gets the amount of accrued and unpaid performance fee.
     *
     * @param block The block number to execute the call on.
     */
    getPerformanceFeeAmount(block?: number): Promise<BigNumber>;
    /**
     * Rewards the management fee
     *
     * @param from The address of the sender
     */
    rewardManagementFee(from: Address): import("../../..").Transaction<import("web3-core").TransactionReceipt>;
    getFee(identifier: number, block?: number): Promise<any>;
}
export interface FeeManager extends Spoke {
}
