import { Contract } from '../../../Contract';
import { Environment } from '../../../Environment';
import { Address } from '../../../Address';
import { Factory } from '../../factory/Factory';
import { FeeManagerDeployArguments } from './FeeManager';
export declare class FeeManagerFactory extends Contract {
    static readonly abi: import("web3-utils").AbiItem[];
    static deploy(environment: Environment, bytecode: string, from: Address): import("../../..").Deployment<FeeManagerFactory>;
    /**
     * Creates a FeeManager instance.
     *
     * @param from The sender address.
     * @param args The FeeManager deploy arguments as [[FeeManagerDeployArguments]].
     */
    createInstance(from: Address, deployArgs: FeeManagerDeployArguments): import("../../..").Transaction<import("web3-core").TransactionReceipt>;
}
export interface FeeManagerFactory extends Factory {
}
