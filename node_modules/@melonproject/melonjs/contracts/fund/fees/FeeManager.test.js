"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const deployManagementFee_1 = require("../../../utils/tests/deployManagementFee");
const createTestEnvironment_1 = require("../../../utils/tests/createTestEnvironment");
const deployPerformanceFee_1 = require("../../../utils/tests/deployPerformanceFee");
const deployHub_1 = require("../../../utils/tests/deployHub");
const deployFeeManager_1 = require("../../../utils/tests/deployFeeManager");
const deployWeth_1 = require("../../../utils/tests/deployWeth");
const deployRegistry_1 = require("../../../utils/tests/deployRegistry");
describe('FeeManager', () => {
    let environment;
    let feeManager;
    let registry;
    let hub;
    let weth;
    let managementFee;
    let performanceFee;
    beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
        environment = yield createTestEnvironment_1.createTestEnvironment();
        hub = yield deployHub_1.deployHub(environment, environment.accounts[0], {
            name: 'feemanager-test-fund',
            manager: environment.accounts[0],
        });
        weth = yield deployWeth_1.deployWeth(environment, environment.accounts[0]);
        managementFee = yield deployManagementFee_1.deployManagementFee(environment, environment.accounts[0]);
        performanceFee = yield deployPerformanceFee_1.deployPerformanceFee(environment, environment.accounts[0]);
        registry = yield deployRegistry_1.deployRegistry(environment, environment.accounts[0], environment.accounts[0]);
        const tx = registry.registerFees(environment.accounts[0], [
            managementFee.contract.address,
            performanceFee.contract.address,
        ]);
        yield tx.send(yield tx.prepare());
        feeManager = yield deployFeeManager_1.deployFeeManager(environment, environment.accounts[0], {
            hub: hub.contract.address,
            denominationAsset: weth.contract.address,
            fees: [managementFee.contract.address, performanceFee.contract.address],
            rates: [new bignumber_js_1.default('100000'), new bignumber_js_1.default('2000000')],
            periods: [1000, 2000],
            registry: registry.contract.address,
        });
    }));
    it('should return management fee contract address', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield feeManager.getManagementFeeAddress();
        expect(result).toBe(managementFee.contract.address);
    }));
    it('should return management fee information', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield feeManager.getManagementFeeInformation();
        expect(result).toMatchObject({
            rate: expect.any(bignumber_js_1.default),
        });
    }));
    it('should return management fee amount', () => __awaiter(void 0, void 0, void 0, function* () {
        jest.spyOn(feeManager, 'getManagementFeeAmount').mockResolvedValue(new bignumber_js_1.default('100000000'));
        const result = yield feeManager.getManagementFeeAmount();
        expect(result.isGreaterThanOrEqualTo(0)).toBe(true);
    }));
    it('should return performance fee contract address', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield feeManager.getPerformanceFeeAddress();
        expect(result.startsWith('0x')).toBe(true);
    }));
    it('should return performance fee information', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield feeManager.getPerformanceFeeInformation();
        expect(result).toMatchObject({
            rate: expect.any(bignumber_js_1.default),
            period: expect.any(Number),
        });
    }));
    it('should get the high watermark', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield performanceFee.getHighWaterMark(feeManager.contract.address);
        expect(result.isGreaterThanOrEqualTo(0)).toBe(true);
    }));
    it('should get the initialize time', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield performanceFee.getInitializeTime(feeManager.contract.address);
        expect(result).toBeInstanceOf(Date);
        expect(result.getTime()).toBeLessThan(Date.now());
    }));
    it('should check whether the performance fee can be updated', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield performanceFee.canUpdate(feeManager.contract.address);
        expect(result === false || result === true).toBe(true);
    }));
});
