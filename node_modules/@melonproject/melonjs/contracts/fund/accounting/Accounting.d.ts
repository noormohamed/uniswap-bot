import BigNumber from 'bignumber.js';
import { Contract } from '../../../Contract';
import { Environment } from '../../../Environment';
import { Address } from '../../../Address';
import { Spoke } from '../hub/Spoke';
import { AmguConsumer } from '../../engine/AmguConsumer';
import { ValidationError } from '../../../errors/ValidationError';
export declare class PerformanceFeeCannotBePaidError extends ValidationError {
    readonly name = "PerformanceFeeCannotBePaidError";
    constructor(message?: string);
}
export interface FundCalculations {
    sharePrice: BigNumber;
    gav: BigNumber;
    nav: BigNumber;
    feesInDenominationAsset: BigNumber;
    feesInShares: BigNumber;
    gavPerShareNetManagementFee: BigNumber;
}
export declare type FundHolding = {
    address: Address;
    amount: BigNumber;
};
export interface AccountingDeployArguments {
    hub: Address;
    denominationAsset: Address;
    nativeAsset: Address;
}
export declare class Accounting extends Contract {
    static readonly abi: import("web3-utils").AbiItem[];
    static deploy(environment: Environment, bytecode: string, from: Address, args: AccountingDeployArguments): import("../../..").Deployment<Accounting>;
    /**
     * Gets the max number of owned assets.
     *
     * @param block The block number to execute the call on.
     */
    getMaxOwnedAssets(block?: number): Promise<number>;
    /**
     * Gets the length of the owned assets array.
     *
     * @param block The block number to execute the call on.
     */
    getOwnedAssetsLength(block?: number): Promise<number>;
    /**
     * Gets the address of an owned asset by its index.
     *
     * @param index The index in the ownedAssets array.
     * @param block The block number to execute the call on.
     */
    getOwnedAsset(index: number, block?: number): Promise<string>;
    /**
     * Gets a list of all owned assets.
     *
     * @param block The block number to execute the call on.
     */
    getOwnedAssets(block?: number): Promise<string[]>;
    /**
     * Gets the holding of a specific asset.
     *
     * @param asset The address of the asset.
     * @param block The block number to execute the call on.
     */
    getAssetHolding(asset: Address, block?: number): Promise<BigNumber>;
    /**
     * Gets the holdings of all owned assets.
     *
     * @param block The block number to execute the call on.
     */
    getFundHoldings(block?: number): Promise<FundHolding[]>;
    /**
     * Gets the default share price.
     *
     * @param block The block number to execute the call on.
     */
    getDefaultSharePrice(block?: number): Promise<BigNumber>;
    /**
     * Gets the address of the denomination asset.
     *
     * @param block The block number to execute the call on.
     */
    getDenominationAsset(block?: number): Promise<string>;
    /**
     * Gets the address of the native asset (address only).
     *
     * @param block The block number to execute the call on.
     */
    getNativeAsset(block?: number): Promise<string>;
    /**
     * Gets the GAV.
     *
     * @param block The block number to execute the call on.
     */
    getGAV(block?: number): Promise<BigNumber>;
    /**
     * Performs accounting calculations (GAV, NAV, share price, etc).
     *
     * @param block The block number to execute the call on.
     */
    getCalculationResults(block?: number): Promise<FundCalculations>;
    /**
     * Manually performs accounting calculations (GAV, NAV, share price, etc).
     *
     * @param block The block number to execute the call on.
     */
    getManualCalculationResults(block?: number): Promise<FundCalculations>;
    /**
     * Gets the asset GAV manually.
     *
     * @param block The block number to execute the call on.
     */
    getGavFromAssets(block?: number): Promise<BigNumber>;
    /**
     * Gets the share costs in a certain asset.
     *
     * @param numShares The number of shares.
     * @param asset The requested asset.
     * @param block The block number to execute the call on.
     */
    getShareCostInAsset(numShares: BigNumber, asset: Address, block?: number): Promise<BigNumber>;
    /**
     * Triggers the reward all fees function (and performs some accounting updates)
     *
     * @param from The address of the sender.
     */
    triggerRewardAllFees(from: Address): import("../../..").Transaction<import("web3-core").TransactionReceipt>;
    /**
     * Gets the value per share.
     *
     * @param totalValue The total asset value
     * @param numShares The number of shares.
     * @param block The block number to execute the call on.
     */
    getValuePerShare(totalValue: BigNumber, numShares: BigNumber, block?: number): Promise<BigNumber>;
}
export interface Accounting extends Spoke, AmguConsumer {
}
