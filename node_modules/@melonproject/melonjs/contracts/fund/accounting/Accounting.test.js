"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const createTestEnvironment_1 = require("../../../utils/tests/createTestEnvironment");
const deployWeth_1 = require("../../../utils/tests/deployWeth");
const deployHub_1 = require("../../../utils/tests/deployHub");
const deployAccounting_1 = require("../../../utils/tests/deployAccounting");
describe('Accounting', () => {
    let environment;
    let accounting;
    beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
        environment = yield createTestEnvironment_1.createTestEnvironment();
        const hub = yield deployHub_1.deployHub(environment, environment.accounts[0], {
            manager: environment.accounts[1],
            name: 'accounting-test-fund',
        });
        const weth = yield deployWeth_1.deployWeth(environment, environment.accounts[0]);
        accounting = yield deployAccounting_1.deployAccounting(environment, environment.accounts[0], {
            hub: hub.contract.address,
            denominationAsset: weth.contract.address,
            nativeAsset: weth.contract.address,
        });
    }));
    it('should return an empty array of fund assets', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield accounting.getOwnedAssets();
        expect(result.length).toEqual(0);
    }));
    it('should return the default share price', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield accounting.getDefaultSharePrice();
        expect(result.isEqualTo(new bignumber_js_1.default('1000000000000000000'))).toBe(true);
    }));
    it('should get the version address', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield accounting.getVersion();
        expect(result.startsWith('0x')).toBe(true);
    }));
    it('should return the native asset', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield accounting.getNativeAsset();
        expect(result.startsWith('0x')).toBe(true);
    }));
    it('should return the denomination asset', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield accounting.getDenominationAsset();
        expect(result.startsWith('0x')).toBe(true);
    }));
    it('should return the address of the engine', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield accounting.getEngine();
        expect(result.startsWith('0x')).toBe(true);
    }));
    it('should return the calculations for a fund', () => __awaiter(void 0, void 0, void 0, function* () {
        jest.spyOn(accounting, 'getCalculationResults').mockResolvedValue({
            sharePrice: new bignumber_js_1.default('1000000'),
            gav: new bignumber_js_1.default('1000000'),
            nav: new bignumber_js_1.default('1000000'),
            feesInDenominationAsset: new bignumber_js_1.default('1000000'),
            feesInShares: new bignumber_js_1.default('1000000'),
            gavPerShareNetManagementFee: new bignumber_js_1.default('1000000'),
        });
        const result = yield accounting.getCalculationResults();
        expect(result).toMatchObject({
            sharePrice: expect.any(bignumber_js_1.default),
            gav: expect.any(bignumber_js_1.default),
            nav: expect.any(bignumber_js_1.default),
            feesInDenominationAsset: expect.any(bignumber_js_1.default),
            feesInShares: expect.any(bignumber_js_1.default),
            gavPerShareNetManagementFee: expect.any(bignumber_js_1.default),
        });
    }));
    it('should return the GAV of a fund', () => __awaiter(void 0, void 0, void 0, function* () {
        jest.spyOn(accounting, 'getGAV').mockResolvedValue(new bignumber_js_1.default('100000000'));
        const result = yield accounting.getGAV();
        expect(yield result.isGreaterThanOrEqualTo(0)).toBe(true);
    }));
    it('should return the asset holding of a fund', () => __awaiter(void 0, void 0, void 0, function* () {
        jest.spyOn(accounting, 'getAssetHolding').mockResolvedValue(new bignumber_js_1.default('100000000'));
        const result = yield accounting.getAssetHolding('0x');
        expect(result.isGreaterThanOrEqualTo(0)).toBe(true);
    }));
    it('should return the share cost in a certain asset', () => __awaiter(void 0, void 0, void 0, function* () {
        jest.spyOn(accounting, 'getShareCostInAsset').mockResolvedValue(new bignumber_js_1.default('100000000'));
        const result = yield accounting.getShareCostInAsset(new bignumber_js_1.default('100000000'), '0x');
        expect(result.isGreaterThanOrEqualTo(0)).toBe(true);
    }));
    it('should return an array of fund asset holding', () => __awaiter(void 0, void 0, void 0, function* () {
        jest.spyOn(accounting, 'getFundHoldings').mockResolvedValue([
            {
                address: '0x0',
                amount: new bignumber_js_1.default('10'),
            },
            {
                address: '0x1',
                amount: new bignumber_js_1.default('11'),
            },
        ]);
        const result = yield accounting.getFundHoldings();
        expect(result.length).toBeGreaterThan(0);
        result.forEach((item) => {
            expect(item.address.startsWith('0x')).toBe(true);
            expect(item.amount).toBeInstanceOf(bignumber_js_1.default);
            expect(item.amount.isGreaterThanOrEqualTo(0)).toBe(true);
        });
    }));
});
