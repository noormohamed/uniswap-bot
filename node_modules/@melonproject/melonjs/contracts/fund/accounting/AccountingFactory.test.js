"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const createTestEnvironment_1 = require("../../../utils/tests/createTestEnvironment");
const AccountingFactory_1 = require("./AccountingFactory");
const randomAddress_1 = require("../../../utils/tests/randomAddress");
const AccountingFactory_bin_1 = require("../../../abis/AccountingFactory.bin");
const deployHub_1 = require("../../../utils/tests/deployHub");
const deployWeth_1 = require("../../../utils/tests/deployWeth");
describe('AccountingFactory', () => {
    let environment;
    let accountingFactory;
    beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
        environment = yield createTestEnvironment_1.createTestEnvironment();
        const deploy = AccountingFactory_1.AccountingFactory.deploy(environment, AccountingFactory_bin_1.AccountingFactoryBytecode, environment.accounts[0]);
        accountingFactory = yield deploy.send(yield deploy.prepare());
    }));
    it('should check if a contract is an instance of AccountingFactory', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield accountingFactory.isInstance(randomAddress_1.randomAddress());
        expect(typeof result).toBe('boolean');
    }));
    it('should create an instance of an accounting contract', () => __awaiter(void 0, void 0, void 0, function* () {
        const hub = yield deployHub_1.deployHub(environment, environment.accounts[0], {
            manager: environment.accounts[1],
            name: 'accounting-test-fund',
        });
        const weth = yield deployWeth_1.deployWeth(environment, environment.accounts[0]);
        const tx = accountingFactory.createInstance(environment.accounts[0], {
            hub: hub.contract.address,
            denominationAsset: weth.contract.address,
            nativeAsset: weth.contract.address,
        });
        const txResult = yield tx.send(yield tx.prepare());
        expect(txResult.gasUsed).toBeGreaterThanOrEqual(0);
        expect(txResult.status).toBe(true);
    }));
});
