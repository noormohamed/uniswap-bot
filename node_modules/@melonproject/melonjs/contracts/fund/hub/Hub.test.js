"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const sameAddress_1 = require("../../../utils/sameAddress");
const createTestEnvironment_1 = require("../../../utils/tests/createTestEnvironment");
const deployHub_1 = require("../../../utils/tests/deployHub");
describe('Hub', () => {
    let hub;
    let environment;
    beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
        environment = yield createTestEnvironment_1.createTestEnvironment();
        hub = yield deployHub_1.deployHub(environment, environment.accounts[0], {
            manager: environment.accounts[1],
            name: 'hub-test-fund',
        });
    }));
    it('should return the correct fund name', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield hub.getName();
        expect(result).toBe('hub-test-fund');
    }));
    it('should return the correct manager address', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield hub.getManager();
        expect(sameAddress_1.sameAddress(result, environment.accounts[1])).toBe(true);
    }));
    it('should return the creation time', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield hub.getCreationTime();
        expect(result).toBeInstanceOf(Date);
        expect(result.getTime()).toBeLessThan(Date.now());
    }));
    it('should return the address of the creator', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield hub.getCreator();
        expect(sameAddress_1.sameAddress(result, environment.accounts[0])).toBe(true);
    }));
    it('should return whether or not a fund is shutdown', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield hub.isShutDown();
        expect(result === true || result === false).toBe(true);
    }));
});
