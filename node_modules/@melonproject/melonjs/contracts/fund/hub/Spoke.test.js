"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const createTestEnvironment_1 = require("../../../utils/tests/createTestEnvironment");
const deploySpoke_1 = require("../../../utils/tests/deploySpoke");
const deployHub_1 = require("../../../utils/tests/deployHub");
const sameAddress_1 = require("../../../utils/sameAddress");
describe('Spoke', () => {
    let environment;
    let spoke;
    let hub;
    beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
        environment = yield createTestEnvironment_1.createTestEnvironment();
        hub = yield deployHub_1.deployHub(environment, environment.accounts[0], {
            name: 'spoke-test-fund',
            manager: environment.accounts[1],
        });
        spoke = yield deploySpoke_1.deploySpoke(environment, environment.accounts[0], hub.contract.address);
    }));
    it('should return the address of the engine', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield spoke.getEngine();
        expect(result.startsWith('0x')).toBe(true);
    }));
    it('should return the address of the MLN token', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield spoke.getMlnToken();
        expect(result.startsWith('0x')).toBe(true);
    }));
    it('should return the address of the version', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield spoke.getVersion();
        expect(result.startsWith('0x')).toBe(true);
    }));
    it('should return the address of the registry', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield spoke.getRegistry();
        expect(result.startsWith('0x')).toBe(true);
    }));
    it('should return the address of the hub', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield spoke.getHub();
        expect(sameAddress_1.sameAddress(result, hub.contract.address)).toBe(true);
    }));
});
