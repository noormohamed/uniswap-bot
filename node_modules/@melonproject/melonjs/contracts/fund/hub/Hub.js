"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const web3_utils_1 = require("web3-utils");
const Hub_abi_1 = require("../../../abis/Hub.abi");
const Contract_1 = require("../../../Contract");
const toDate_1 = require("../../../utils/toDate");
const DSGuard_1 = require("../../dependencies/authorization/DSGuard");
const applyMixins_1 = require("../../../utils/applyMixins");
const isZeroAddress_1 = require("../../../utils/isZeroAddress");
class Hub extends Contract_1.Contract {
    static deploy(environment, bytecode, from, args) {
        return super.createDeployment(environment, bytecode, from, [args.manager, web3_utils_1.toHex(args.name)]);
    }
    /**
     * Gets the creation time .
     *
     * @param block The block number to execute the call on.
     */
    getCreationTime(block) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.makeCall('creationTime', undefined, block);
            return toDate_1.toDate(result);
        });
    }
    /**
     * Gets the creator (i.e. the version contract address).
     *
     * @param block The block number to execute the call on.
     */
    getCreator(block) {
        return this.makeCall('creator', undefined, block);
    }
    /**
     * Gets the fund manager.
     *
     * @param block The block number to execute the call on.
     */
    getManager(block) {
        return this.makeCall('manager', undefined, block);
    }
    /**
     * Gets the fund name.
     *
     * @param block The block number to execute the call on.
     */
    getName(block) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.makeCall('name', undefined, block);
            if (result && web3_utils_1.isHexStrict(result)) {
                return web3_utils_1.toUtf8(result);
            }
            return result;
        });
    }
    /**
     * Gets the fund routes object as [[HubRoutes]].
     *
     * @param block The block number to execute the call on.
     */
    getRoutes(block) {
        return __awaiter(this, void 0, void 0, function* () {
            const routes = yield this.makeCall('routes', undefined, block);
            const output = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, ((routes === null || routes === void 0 ? void 0 : routes.accounting) && !isZeroAddress_1.isZeroAddress(routes.accounting) && { accounting: routes.accounting })), ((routes === null || routes === void 0 ? void 0 : routes.participation) && !isZeroAddress_1.isZeroAddress(routes.participation) && { participation: routes.participation })), ((routes === null || routes === void 0 ? void 0 : routes.shares) && !isZeroAddress_1.isZeroAddress(routes.shares) && { shares: routes.shares })), ((routes === null || routes === void 0 ? void 0 : routes.trading) && !isZeroAddress_1.isZeroAddress(routes.trading) && { trading: routes.trading })), ((routes === null || routes === void 0 ? void 0 : routes.vault) && !isZeroAddress_1.isZeroAddress(routes.vault) && { vault: routes.vault })), ((routes === null || routes === void 0 ? void 0 : routes.feeManager) && !isZeroAddress_1.isZeroAddress(routes.feeManager) && { feeManager: routes.feeManager })), ((routes === null || routes === void 0 ? void 0 : routes.policyManager) && !isZeroAddress_1.isZeroAddress(routes.policyManager) && { policyManager: routes.policyManager }));
            return output;
        });
    }
    /**
     * Checks if a fund is shut down.
     *
     * @param block The block number to execute the call on.
     */
    isShutDown(block) {
        return this.makeCall('isShutDown', undefined, block);
    }
    /**
     * Checks if a fund is initialized.
     *
     * @param block The block number to execute the call on.
     */
    isInitialized(block) {
        return this.makeCall('fundInitialized', undefined, block);
    }
    /**
     * Get the fund version
     *
     * @param block The block number to execute the call on.
     */
    getVersion(block) {
        return this.makeCall('version', undefined, block);
    }
    getRegistry(block) {
        return this.makeCall('registry', undefined, block);
    }
    getVault(block) {
        return this.makeCall('vault', undefined, block);
    }
    getAccounting(block) {
        return this.makeCall('accounting', undefined, block);
    }
    getPriceSource(block) {
        return this.makeCall('priceSource', undefined, block);
    }
    getParticipation(block) {
        return this.makeCall('participation', undefined, block);
    }
    getTrading(block) {
        return this.makeCall('trading', undefined, block);
    }
    getShares(block) {
        return this.makeCall('shares', undefined, block);
    }
    getPolicyManager(block) {
        return this.makeCall('policyManager', undefined, block);
    }
}
exports.Hub = Hub;
Hub.abi = Hub_abi_1.HubAbi;
applyMixins_1.applyMixins(Hub, [DSGuard_1.DSGuard]);
