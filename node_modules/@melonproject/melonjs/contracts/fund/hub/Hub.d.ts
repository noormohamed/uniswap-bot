import { Contract } from '../../../Contract';
import { Environment } from '../../../Environment';
import { Address } from '../../../Address';
import { DSGuard } from '../../dependencies/authorization/DSGuard';
export interface HubRoutes {
    accounting?: Address;
    participation?: Address;
    shares?: Address;
    trading?: Address;
    vault?: Address;
    feeManager?: Address;
    policyManager?: Address;
}
export interface HubDeployArguments {
    name: string;
    manager: string;
}
export declare class Hub extends Contract {
    static readonly abi: import("web3-utils").AbiItem[];
    static deploy(environment: Environment, bytecode: string, from: Address, args: HubDeployArguments): import("../../..").Deployment<Hub>;
    /**
     * Gets the creation time .
     *
     * @param block The block number to execute the call on.
     */
    getCreationTime(block?: number): Promise<Date>;
    /**
     * Gets the creator (i.e. the version contract address).
     *
     * @param block The block number to execute the call on.
     */
    getCreator(block?: number): Promise<string>;
    /**
     * Gets the fund manager.
     *
     * @param block The block number to execute the call on.
     */
    getManager(block?: number): Promise<string>;
    /**
     * Gets the fund name.
     *
     * @param block The block number to execute the call on.
     */
    getName(block?: number): Promise<string>;
    /**
     * Gets the fund routes object as [[HubRoutes]].
     *
     * @param block The block number to execute the call on.
     */
    getRoutes(block?: number): Promise<HubRoutes>;
    /**
     * Checks if a fund is shut down.
     *
     * @param block The block number to execute the call on.
     */
    isShutDown(block?: number): Promise<boolean>;
    /**
     * Checks if a fund is initialized.
     *
     * @param block The block number to execute the call on.
     */
    isInitialized(block?: number): Promise<boolean>;
    /**
     * Get the fund version
     *
     * @param block The block number to execute the call on.
     */
    getVersion(block?: number): Promise<string>;
    getRegistry(block?: number): Promise<string>;
    getVault(block?: number): Promise<string>;
    getAccounting(block?: number): Promise<string>;
    getPriceSource(block?: number): Promise<string>;
    getParticipation(block?: number): Promise<string>;
    getTrading(block?: number): Promise<string>;
    getShares(block?: number): Promise<string>;
    getPolicyManager(block?: number): Promise<string>;
}
export interface Hub extends DSGuard {
}
