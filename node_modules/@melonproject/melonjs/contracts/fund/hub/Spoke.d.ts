import { Contract } from '../../../Contract';
import { Environment } from '../../../Environment';
import { Address } from '../../../Address';
import { HubRoutes } from './Hub';
export declare class Spoke extends Contract {
    static readonly abi: import("web3-utils").AbiItem[];
    static deploy(environment: Environment, bytecode: string, from: Address, hub: Address): import("../../..").Deployment<Spoke>;
    /**
     * Gets the address of the engine contract.
     *
     * @param block The block number to execute the call on.
     */
    getEngine(block?: number): Promise<string>;
    /**
     * Gets the address of the MLN token contract.
     *
     * @param block The block number to execute the call on.
     */
    getMlnToken(block?: number): Promise<string>;
    /**
     * Gets the address of the version contract.
     *
     * @param block The block number to execute the call on.
     */
    getVersion(block?: number): Promise<string>;
    /**
     * Gets the address of the registry contract.
     *
     * @param block The block number to execute the call on.
     */
    getRegistry(block?: number): Promise<string>;
    /**
     * Gets the address of the pricesource contract.
     *
     * @param block The block number to execute the call on.
     */
    getPriceSource(block?: number): Promise<string>;
    /**
     * Gets the address of the hub.
     *
     * @param block The block number to execute the call on.
     */
    getHub(block?: number): Promise<string>;
    /**
     * Checks if the contract is initialized.
     *
     * @param block The block number to execute the call on.
     * @returns A boolean where True indicates the spoke has been initialized.
     */
    isInitialized(block?: number): Promise<boolean>;
    /**
     * Gets the routes of the hub
     *
     * @param block The block number to execute the call on.
     */
    getRoutes(block?: number): Promise<HubRoutes>;
}
