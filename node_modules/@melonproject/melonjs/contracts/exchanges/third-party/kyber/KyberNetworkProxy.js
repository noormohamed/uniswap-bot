"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const Contract_1 = require("../../../../Contract");
const KyberNetworkProxy_abi_1 = require("../../../../abis/KyberNetworkProxy.abi");
class KyberNetworkProxy extends Contract_1.Contract {
    static deploy(environment, bytecode, from) {
        return super.createDeployment(environment, bytecode, from);
    }
    /**
     * Gets the expected rate for a given asset pair.
     *
     * @param srcToken The maker asset address.
     * @param destToken The taker asset address.
     * @param srcQty The maker asset amount.
     * @param block The block number to execute the call on.
     */
    getExpectedRate(srcToken, destToken, srcQty, block) {
        return __awaiter(this, void 0, void 0, function* () {
            const { '0': expectedRate, '1': slippageRate } = yield this.makeCall('getExpectedRate', [srcToken, destToken, srcQty.toFixed(0)], block);
            return {
                expectedRate: new bignumber_js_1.default(expectedRate),
                slippageRate: new bignumber_js_1.default(slippageRate),
            };
        });
    }
}
exports.KyberNetworkProxy = KyberNetworkProxy;
KyberNetworkProxy.abi = KyberNetworkProxy_abi_1.KyberNetworkProxyAbi;
