"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Contract_1 = require("../../../../Contract");
const toBigNumber_1 = require("../../../../utils/toBigNumber");
const toDate_1 = require("../../../../utils/toDate");
const OasisDexExchange_abi_1 = require("../../../../abis/OasisDexExchange.abi");
class OasisDexExchange extends Contract_1.Contract {
    static deploy(environment, bytecode, from, closetime) {
        return super.createDeployment(environment, bytecode, from, [closetime.toFixed(0)]);
    }
    /**
     * Gets the details of an offer
     *
     * @param id The id of the offer
     * @param block The block number to execute the call on.
     */
    getOffer(id, block) {
        return __awaiter(this, void 0, void 0, function* () {
            const { '0': makerQuantity, '1': makerAsset, '2': takerQuantity, '3': takerAsset, '4': owner, '5': timestamp, } = yield this.makeCall('offers', [id.toFixed(0)], block);
            return {
                makerQuantity: toBigNumber_1.toBigNumber(makerQuantity),
                makerAsset,
                takerQuantity: toBigNumber_1.toBigNumber(takerQuantity),
                takerAsset,
                owner,
                timestamp: toDate_1.toDate(timestamp),
            };
        });
    }
    /**
     * Checks whether an offer is active
     *
     * @param id The id of the offer
     * @param block The block number to execute the call on.
     */
    isActive(id, block) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.makeCall('isActive', [id.toFixed(0)], block);
        });
    }
    /**
     * Gets the owner of an offer
     *
     * @param id The id of the offer
     * @param block The block number to execute the call on.
     */
    getOwner(id, block) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.makeCall('getOwner', [id.toFixed(0)], block);
        });
    }
    /**
     * Checks whether an offer is closed
     *
     * @param block The block number to execute the call on.
     */
    isClosed(block) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.makeCall('isClosed', undefined, block);
        });
    }
}
exports.OasisDexExchange = OasisDexExchange;
OasisDexExchange.abi = OasisDexExchange_abi_1.OasisDexExchangeAbi;
