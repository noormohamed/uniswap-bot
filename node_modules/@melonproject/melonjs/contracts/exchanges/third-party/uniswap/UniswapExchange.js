"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Contract_1 = require("../../../../Contract");
const UniswapExchange_abi_1 = require("../../../../abis/UniswapExchange.abi");
const toBigNumber_1 = require("../../../../utils/toBigNumber");
class UniswapExchange extends Contract_1.Contract {
    static deploy(environment, bytecode, from) {
        return super.createDeployment(environment, bytecode, from);
    }
    /**
     * Gets the input price for a swap from ETH to token
     *
     * @param ethSold The amount of ETH sold (in wei)
     * @param block The block number to execute the call on.
     */
    getEthToTokenInputPrice(ethSold, block) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.makeCall('getEthToTokenInputPrice', [ethSold.toFixed(0)], block);
            return toBigNumber_1.toBigNumber(result);
        });
    }
    /**
     * Gets the input price for a swap from token to ETH
     *
     * @param tokensSold The amount of token sold (in base unit)
     * @param block The block number to execute the call on.
     */
    getTokenToEthInputPrice(tokensBought, block) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.makeCall('getTokenToEthInputPrice', [tokensBought.toFixed(0)], block);
            return toBigNumber_1.toBigNumber(result);
        });
    }
}
exports.UniswapExchange = UniswapExchange;
UniswapExchange.abi = UniswapExchange_abi_1.UniswapExchangeAbi;
