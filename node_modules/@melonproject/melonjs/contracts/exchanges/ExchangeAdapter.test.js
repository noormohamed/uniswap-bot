"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const createTestEnvironment_1 = require("../../utils/tests/createTestEnvironment");
const ExchangeAdapter_1 = require("./ExchangeAdapter");
const ExchangeAdapter_bin_1 = require("../../abis/ExchangeAdapter.bin");
describe('ExchangeAdapter', () => {
    let environment;
    let exchangeAdapter;
    beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
        environment = yield createTestEnvironment_1.createTestEnvironment();
        const deploy = ExchangeAdapter_1.ExchangeAdapter.deploy(environment, ExchangeAdapter_bin_1.ExchangeAdapterBytecode, environment.accounts[0]);
        exchangeAdapter = yield deploy.send(yield deploy.prepare());
    }));
    it('should check if the exchange adapter has an address', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = exchangeAdapter.contract.address;
        expect(result.startsWith('0x')).toBe(true);
    }));
});
