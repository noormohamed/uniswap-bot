"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const sameAddress_1 = require("../../utils/sameAddress");
const createTestEnvironment_1 = require("../../utils/tests/createTestEnvironment");
const deployRegistry_1 = require("../../utils/tests/deployRegistry");
const deployEngine_1 = require("../../utils/tests/deployEngine");
const bignumber_js_1 = __importDefault(require("bignumber.js"));
describe('Engine', () => {
    let environment;
    let engine;
    let registry;
    beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
        environment = yield createTestEnvironment_1.createTestEnvironment();
        registry = yield deployRegistry_1.deployRegistry(environment, environment.accounts[0], environment.accounts[0]);
        engine = yield deployEngine_1.deployEngine(environment, environment.accounts[0], {
            delay: new bignumber_js_1.default(1000000),
            registry: registry.contract.address,
        });
    }));
    it('should return the amgu price', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield engine.getAmguPrice();
        expect(result.isGreaterThanOrEqualTo(0)).toBe(true);
    }));
    // needs price source, so skipping for the moment
    // it('should set and return the engine price', async () => {
    //   const result = await engine.getEnginePrice();
    //   console.log(result);
    //   expect(result.isGreaterThanOrEqualTo(0)).toBe(true);
    // });
    it('should return the frozen ether', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield engine.getFrozenEther();
        expect(result.isGreaterThanOrEqualTo(0)).toBe(true);
    }));
    it('should return the liquid ether', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield engine.getLiquidEther();
        expect(result.isGreaterThanOrEqualTo(0)).toBe(true);
    }));
    it('should return the percentage premium', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield engine.getPremiumPercent();
        expect(result.isGreaterThanOrEqualTo(0)).toBe(true);
    }));
    it('should return the address of the registry', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield engine.getRegistry();
        expect(sameAddress_1.sameAddress(result, registry.contract.address)).toBe(true);
    }));
    it('should return the total ether consumed', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield engine.getTotalEtherConsumed();
        expect(result.isGreaterThanOrEqualTo(0)).toBe(true);
    }));
    it('should return the total amgu consumed', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield engine.getTotalAmguConsumed();
        expect(result.isGreaterThanOrEqualTo(0)).toBe(true);
    }));
    it('should return the total MLN burned', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield engine.getTotalMlnBurned();
        expect(result.isGreaterThanOrEqualTo(0)).toBe(true);
    }));
});
