"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Engine_abi_1 = require("../../abis/Engine.abi");
const Contract_1 = require("../../Contract");
const toBigNumber_1 = require("../../utils/toBigNumber");
class Engine extends Contract_1.Contract {
    static deploy(environment, bytecode, from, args) {
        return super.createDeployment(environment, bytecode, from, [args.delay.toFixed(0), args.registry]);
    }
    /**
     * Gets the amgu price.
     *
     * @param block The block number to execute the call on.
     */
    getAmguPrice(block) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.makeCall('amguPrice', undefined, block);
            return toBigNumber_1.toBigNumber(result);
        });
    }
    /**
     * Gets the current engine price.
     *
     * @param block The block number to execute the call on.
     */
    getEnginePrice(block) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.makeCall('enginePrice', undefined, block);
            return toBigNumber_1.toBigNumber(result);
        });
    }
    /**
     * Gets the frozen ether.
     *
     * @param block The block number to execute the call on.
     */
    getFrozenEther(block) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.makeCall('frozenEther', undefined, block);
            return toBigNumber_1.toBigNumber(result);
        });
    }
    /**
     * Gets the liquid ether.
     *
     * @param block The block number to execute the call on.
     */
    getLiquidEther(block) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.makeCall('liquidEther', undefined, block);
            return toBigNumber_1.toBigNumber(result);
        });
    }
    /**
     * Gets the percentage premium.
     *
     * @param block The block number to execute the call on.
     */
    getPremiumPercent(block) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.makeCall('premiumPercent', undefined, block);
            return toBigNumber_1.toBigNumber(result);
        });
    }
    /**
     * Gets the address of the registry.
     *
     * @param block The block number to execute the call on.
     */
    getRegistry(block) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.makeCall('registry', undefined, block);
        });
    }
    /**
     * Gets the total ether consumed.
     *
     * @param block The block number to execute the call on.
     */
    getTotalEtherConsumed(block) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.makeCall('totalEtherConsumed', undefined, block);
            return toBigNumber_1.toBigNumber(result);
        });
    }
    /**
     * Gets the total amgu consumed.
     *
     * @param block The block number to execute the call on.
     */
    getTotalAmguConsumed(block) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.makeCall('totalAmguConsumed', undefined, block);
            return toBigNumber_1.toBigNumber(result);
        });
    }
    /**
     * Gets the total MLN burned.
     *
     * @param block The block number to execute the call on.
     */
    getTotalMlnBurned(block) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.makeCall('totalMlnBurned', undefined, block);
            return toBigNumber_1.toBigNumber(result);
        });
    }
}
exports.Engine = Engine;
Engine.abi = Engine_abi_1.EngineAbi;
