import { Contract } from '../../Contract';
import { Address } from '../../Address';
import { Environment } from '../../Environment';
import BigNumber from 'bignumber.js';
export interface EngineDeployArguments {
    delay: BigNumber;
    registry: Address;
}
export declare class Engine extends Contract {
    static readonly abi: import("web3-utils").AbiItem[];
    static deploy(environment: Environment, bytecode: string, from: Address, args: EngineDeployArguments): import("../..").Deployment<Engine>;
    /**
     * Gets the amgu price.
     *
     * @param block The block number to execute the call on.
     */
    getAmguPrice(block?: number): Promise<BigNumber>;
    /**
     * Gets the current engine price.
     *
     * @param block The block number to execute the call on.
     */
    getEnginePrice(block?: number): Promise<BigNumber>;
    /**
     * Gets the frozen ether.
     *
     * @param block The block number to execute the call on.
     */
    getFrozenEther(block?: number): Promise<BigNumber>;
    /**
     * Gets the liquid ether.
     *
     * @param block The block number to execute the call on.
     */
    getLiquidEther(block?: number): Promise<BigNumber>;
    /**
     * Gets the percentage premium.
     *
     * @param block The block number to execute the call on.
     */
    getPremiumPercent(block?: number): Promise<BigNumber>;
    /**
     * Gets the address of the registry.
     *
     * @param block The block number to execute the call on.
     */
    getRegistry(block?: number): Promise<string>;
    /**
     * Gets the total ether consumed.
     *
     * @param block The block number to execute the call on.
     */
    getTotalEtherConsumed(block?: number): Promise<BigNumber>;
    /**
     * Gets the total amgu consumed.
     *
     * @param block The block number to execute the call on.
     */
    getTotalAmguConsumed(block?: number): Promise<BigNumber>;
    /**
     * Gets the total MLN burned.
     *
     * @param block The block number to execute the call on.
     */
    getTotalMlnBurned(block?: number): Promise<BigNumber>;
}
