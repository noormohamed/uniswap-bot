"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const web3_utils_1 = require("web3-utils");
const Weth_1 = require("./Weth");
const WETH_bin_1 = require("../../../abis/WETH.bin");
const createTestEnvironment_1 = require("../../../utils/tests/createTestEnvironment");
const OutOfBalanceError_1 = require("../../../errors/OutOfBalanceError");
const randomAddress_1 = require("../../../utils/tests/randomAddress");
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const toBigNumber_1 = require("../../../utils/toBigNumber");
describe('Weth', () => {
    let environment;
    let weth;
    beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
        environment = yield createTestEnvironment_1.createTestEnvironment();
        const contract = Weth_1.Weth.deploy(environment, WETH_bin_1.WETHBytecode, environment.accounts[0]);
        weth = yield contract.send(yield contract.prepare());
    }));
    it('should allow deposit and withdrawal', () => __awaiter(void 0, void 0, void 0, function* () {
        const before = yield weth.getBalanceOf(environment.accounts[1]);
        expect(web3_utils_1.fromWei(before.toFixed(0))).toBe('0');
        {
            const tx = weth.deposit(environment.accounts[1], toBigNumber_1.toBigNumber(web3_utils_1.toWei('1')));
            yield tx.send(yield tx.prepare());
        }
        const after = yield weth.getBalanceOf(environment.accounts[1]);
        expect(web3_utils_1.fromWei(after.toFixed(0))).toBe('1');
        {
            const tx = weth.withdraw(environment.accounts[1], toBigNumber_1.toBigNumber(web3_utils_1.toWei('1')));
            yield tx.send(yield tx.prepare());
        }
        const final = yield weth.getBalanceOf(environment.accounts[1]);
        expect(web3_utils_1.fromWei(final.toFixed(0))).toBe('0');
    }));
    xit('should return the total supply of the token', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield weth.getTotalSupply();
        expect(web3_utils_1.fromWei(result.toFixed(0))).toBe('0');
    }));
    it('should throw OutOfBalanceError', () => __awaiter(void 0, void 0, void 0, function* () {
        const tx = weth.withdraw(randomAddress_1.randomAddress(), new bignumber_js_1.default(2));
        jest.spyOn(weth, 'getBalanceOf').mockReturnValue(new Promise((resolve) => resolve(new bignumber_js_1.default(1))));
        const rejects = expect(tx.validate()).rejects;
        yield rejects.toThrowError(OutOfBalanceError_1.OutOfBalanceError);
        yield rejects.toMatchObject({
            amount: expect.any(bignumber_js_1.default),
            balance: expect.any(bignumber_js_1.default),
        });
    }));
});
