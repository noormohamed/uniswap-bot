"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ERC20WithFields_abi_1 = require("../../../abis/ERC20WithFields.abi");
const toBigNumber_1 = require("../../../utils/toBigNumber");
const Contract_1 = require("../../../Contract");
class ERC20WithFields extends Contract_1.Contract {
    static deploy(environment, bytecode, from) {
        return super.createDeployment(environment, bytecode, from);
    }
    /**
     * Gets the balance of an owner.
     *
     * @param who The address of the one we want to check the balance of.
     * @param block The block number to execute the call on.
     */
    getBalanceOf(who, block) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.makeCall('balanceOf', [who], block);
            return toBigNumber_1.toBigNumber(result);
        });
    }
    /**
     * Gets the ammount of token that an owner allows a spender to use.
     *
     * @param owner The owner address.
     * @param spender The spender address.
     * @param block The block number to execute the call on.
     */
    getAllowance(owner, spender, block) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.makeCall('allowance', [owner, spender], block);
            return toBigNumber_1.toBigNumber(result);
        });
    }
    /**
     * Gets the total supply of the token.
     *
     * @param block The block number to execute the call on.
     */
    getTotalSupply(block) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.makeCall('totalSupply', undefined, block);
            return toBigNumber_1.toBigNumber(result);
        });
    }
    /**
     * Gets the name of the token.
     *
     * @param block The block number to execute the call on.
     */
    getName(block) {
        return this.makeCall('name', undefined, block);
    }
    /**
     * Gets the symbol of the token.
     *
     * @param block The block number to execute the call on.
     */
    getSymbol(block) {
        return this.makeCall('symbol', undefined, block);
    }
    /**
     * Gets the decimals of the token.
     *
     * @param block The block number to execute the call on.
     */
    getDecimals(block) {
        return this.makeCall('decimals', undefined, block);
    }
}
exports.ERC20WithFields = ERC20WithFields;
ERC20WithFields.abi = ERC20WithFields_abi_1.ERC20WithFieldsAbi;
