"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const WETH_abi_1 = require("../../../abis/WETH.abi");
const ERC20WithFields_1 = require("./ERC20WithFields");
const Contract_1 = require("../../../Contract");
const applyMixins_1 = require("../../../utils/applyMixins");
const OutOfBalanceError_1 = require("../../../errors/OutOfBalanceError");
class Weth extends Contract_1.Contract {
    static deploy(environment, bytecode, from) {
        return super.createDeployment(environment, bytecode, from);
    }
    /**
     * Deposit WETH in the senders account
     *
     * @param from The address of the sender
     * @param amount The amount to deposit
     */
    deposit(from, amount) {
        return this.createTransaction({ from, method: 'deposit', args: undefined, value: amount });
    }
    /**
     * Withdraw WETH from the senders account
     *
     * @param from The address of the sender
     * @param amount The amount to withdraw
     */
    withdraw(from, amount) {
        const args = [amount.toFixed(0)];
        const validate = () => __awaiter(this, void 0, void 0, function* () {
            const balance = yield this.getBalanceOf(from);
            if (balance.isLessThan(amount)) {
                throw new OutOfBalanceError_1.OutOfBalanceError(amount, balance);
            }
        });
        return this.createTransaction({ from, method: 'withdraw', args, validate });
    }
}
exports.Weth = Weth;
Weth.abi = WETH_abi_1.WETHAbi;
applyMixins_1.applyMixins(Weth, [ERC20WithFields_1.ERC20WithFields]);
