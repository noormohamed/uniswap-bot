"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const toBigNumber_1 = require("../../../utils/toBigNumber");
const Contract_1 = require("../../../Contract");
const StandardToken_abi_1 = require("../../../abis/StandardToken.abi");
const ERC20WithFields_1 = require("./ERC20WithFields");
const applyMixins_1 = require("../../../utils/applyMixins");
const OutOfBalanceError_1 = require("../../../errors/OutOfBalanceError");
const isZeroAddress_1 = require("../../../utils/isZeroAddress");
const ZeroAddressError_1 = require("../../../errors/ZeroAddressError");
class StandardToken extends Contract_1.Contract {
    static deploy(environment, bytecode, from) {
        return super.createDeployment(environment, bytecode, from);
    }
    /**
     * Gets the total supply of the token.
     *
     * @param block The block number to execute the call on.
     */
    getTotalSupply(block) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.makeCall('totalSupply', undefined, block);
            return toBigNumber_1.toBigNumber(result);
        });
    }
    /**
     * Gets the balance of the specified address.
     *
     * @param owner The address of the owner
     * @param block The block number to execute the call on.
     */
    getBalanceOf(owner, block) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.makeCall('balanceOf', [owner], block);
            return toBigNumber_1.toBigNumber(result);
        });
    }
    /**
     * Gets the amount of tokens that an owner allowed to a spender.
     *
     * @param owner The address of the owner
     * @param spender The address of the spender
     * @param block The block number to execute the call on.
     */
    getAllowance(owner, spender, block) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.makeCall('allowance', [owner, spender], block);
            return toBigNumber_1.toBigNumber(result);
        });
    }
    /**
     * Transfer tokens to a specified address
     *
     * @param from The address to transfer from
     * @param to The address to transfer to
     * @param amount The amount to transfer
     */
    transfer(from, to, amount) {
        const method = 'transfer';
        const args = [to, amount.toFixed(0)];
        const validate = () => __awaiter(this, void 0, void 0, function* () {
            const balance = yield this.getBalanceOf(from);
            if (balance.isLessThan(amount)) {
                throw new OutOfBalanceError_1.OutOfBalanceError(amount, balance);
            }
            if (isZeroAddress_1.isZeroAddress(to)) {
                throw new ZeroAddressError_1.ZeroAddressError();
            }
        });
        return this.createTransaction({ from, method, args, validate });
    }
    /**
     * Approve the spender address to spend the specified amount of tokens on behalf of the owner address
     *
     * @param from The address to transfer from
     * @param spender The address to transfer to
     * @param amount The amount to transfer
     */
    approve(from, spender, amount) {
        const args = [spender, amount.toFixed(0)];
        return this.createTransaction({ from, method: 'approve', args });
    }
    /**
     * Increase the approved amount of tokens that a spender can spend
     *
     * @param from The address to transfer from
     * @param spender The address to transfer to
     * @param amount The amount to transfer
     */
    increaseApproval(from, spender, amount) {
        const args = [spender, amount.toFixed(0)];
        return this.createTransaction({ from, method: 'increaseApproval', args });
    }
    /**
     * Decrease the approved amount of tokens that a spender can spend
     *
     * @param from The address to transfer from
     * @param spender The address to transfer to
     * @param amount The amount to transfer
     */
    decreaseApproval(from, spender, amount) {
        const args = [spender, amount.toFixed(0)];
        return this.createTransaction({ from, method: 'decreaseApproval', args });
    }
}
exports.StandardToken = StandardToken;
StandardToken.abi = StandardToken_abi_1.StandardTokenAbi;
applyMixins_1.applyMixins(StandardToken, [ERC20WithFields_1.ERC20WithFields]);
