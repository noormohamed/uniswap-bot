"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const createTestEnvironment_1 = require("../../../utils/tests/createTestEnvironment");
const StandardToken_1 = require("./StandardToken");
const StandardToken_bin_1 = require("../../../abis/StandardToken.bin");
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const randomAddress_1 = require("../../../utils/tests/randomAddress");
const OutOfBalanceError_1 = require("../../../errors/OutOfBalanceError");
const ZeroAddressError_1 = require("../../../errors/ZeroAddressError");
describe('StandardToken', () => {
    let environment;
    let standardToken;
    beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
        environment = yield createTestEnvironment_1.createTestEnvironment();
        const deploy = StandardToken_1.StandardToken.deploy(environment, StandardToken_bin_1.StandardTokenBytecode, environment.accounts[0]);
        standardToken = yield deploy.send(yield deploy.prepare());
    }));
    it('should return balance of the token', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield standardToken.getTotalSupply();
        expect(result.isGreaterThanOrEqualTo(0)).toBe(true);
    }));
    it('should throw OutOfBalanceError', () => __awaiter(void 0, void 0, void 0, function* () {
        const amount = new bignumber_js_1.default(2);
        const tx = standardToken.transfer(randomAddress_1.randomAddress(), randomAddress_1.randomAddress(), amount);
        jest.spyOn(standardToken, 'getBalanceOf').mockReturnValue(new Promise((resolve) => resolve(new bignumber_js_1.default(1))));
        const rejects = expect(tx.validate()).rejects;
        yield rejects.toThrowError(OutOfBalanceError_1.OutOfBalanceError);
        yield rejects.toMatchObject({
            amount: expect.any(bignumber_js_1.default),
            balance: expect.any(bignumber_js_1.default),
        });
    }));
    it('should throw ZeroAddressError', () => __awaiter(void 0, void 0, void 0, function* () {
        const amount = new bignumber_js_1.default(1);
        const from = randomAddress_1.randomAddress();
        const to = '0x0000000000000000000000000000000000000000';
        const tx = standardToken.transfer(from, to, amount);
        jest.spyOn(standardToken, 'getBalanceOf').mockReturnValue(new Promise((resolve) => resolve(new bignumber_js_1.default(2))));
        yield expect(tx.validate()).rejects.toThrowError(ZeroAddressError_1.ZeroAddressError);
    }));
    it('should increase the approval for an account', () => __awaiter(void 0, void 0, void 0, function* () {
        const amount = new bignumber_js_1.default(1);
        const spender = randomAddress_1.randomAddress();
        const tx = standardToken.increaseApproval(environment.accounts[0], spender, amount);
        const result = yield tx.send(yield tx.prepare());
        expect(result.status).toBe(true);
    }));
});
