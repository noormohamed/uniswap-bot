"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const createTestEnvironment_1 = require("../../utils/tests/createTestEnvironment");
const randomAddress_1 = require("../../utils/tests/randomAddress");
const Factory_1 = require("./Factory");
const Factory_bin_1 = require("../../abis/Factory.bin");
describe('Factory', () => {
    let environment;
    let factory;
    beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
        environment = yield createTestEnvironment_1.createTestEnvironment();
        const deploy = Factory_1.Factory.deploy(environment, Factory_bin_1.FactoryBytecode, environment.accounts[0]);
        factory = yield deploy.send(yield deploy.prepare());
    }));
    it('should check if a contract is an instance of a factory', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield factory.isInstance(randomAddress_1.randomAddress());
        expect(typeof result).toBe('boolean');
    }));
});
