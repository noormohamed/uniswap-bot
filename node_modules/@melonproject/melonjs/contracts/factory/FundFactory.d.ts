import { Contract } from '../../Contract';
import { Environment } from '../../Environment';
import { Address } from '../../Address';
import { Factory } from './Factory';
import { BigNumber } from 'bignumber.js';
import { HubRoutes } from '../fund/hub/Hub';
import { AmguConsumer } from '../engine/AmguConsumer';
export interface FundFactoryDeployArguments {
    accountingFactory: Address;
    feeManagerFactory: Address;
    participationFactory: Address;
    sharesFactory: Address;
    tradingFactory: Address;
    vaultFactory: Address;
    policyManagerFactory: Address;
    version: Address;
}
export interface Settings {
    name: string;
    fees: Address[];
    feeRates: BigNumber[];
    feePeriods: BigNumber[];
    exchanges: Address[];
    adapters: Address[];
    denominationAsset: Address;
    defaultAssets: Address[];
}
export declare class FundFactory extends Contract {
    static readonly abi: import("web3-utils").AbiItem[];
    static deploy(environment: Environment, bytecode: string, from: Address, args: FundFactoryDeployArguments): import("../..").Deployment<FundFactory>;
    private validateComponentSet;
    private validateHubNotSet;
    private validateComponentNotSet;
    /**
     * Get the hub address for manager
     *
     * @param manager The address of the manager
     * @param block The block number to execute the call on.
     */
    getManagersToHubs(manager: Address, block?: number): Promise<string>;
    /**
     * Gets the routes for a manager
     *
     * @param manager The address of the manager
     * @param block The block number to execute the call on.
     */
    getManagersToRoutes(manager: Address, block?: number): Promise<HubRoutes>;
    /**
     * Begin fund setup transaction
     *
     * @param from The address of the sender
     * @param settings The fund settings
     */
    beginSetup(from: Address, settings: Settings): import("../..").Transaction<import("web3-core").TransactionReceipt>;
    /**
     * Create the Accounting contract for someone else
     *
     * @param from The address of the sender
     * @param manager The address of the manager
     */
    createAccountingFor(from: Address, manager: Address): import("../..").Transaction<import("web3-core").TransactionReceipt>;
    /**
     * Create the Accounting contract
     *
     * @param from The address of the sender
     */
    createAccounting(from: Address): import("../..").Transaction<import("web3-core").TransactionReceipt>;
    /**
     * Create the FeeManager contract for someone else
     *
     * @param from The address of the sender
     * @param manager The address of the manager
     */
    createFeeManagerFor(from: Address, manager: Address): import("../..").Transaction<import("web3-core").TransactionReceipt>;
    /**
     * Create the FeeManager contract
     *
     * @param from The address of the sender
     */
    createFeeManager(from: Address): import("../..").Transaction<import("web3-core").TransactionReceipt>;
    /**
     * Create the Participation contract for someone else
     *
     * @param from The address of the sender
     * @param manager The address of the manager
     */
    createParticipationFor(from: Address, manager: Address): import("../..").Transaction<import("web3-core").TransactionReceipt>;
    /**
     * Create the Participation contract
     *
     * @param from The address of the sender
     */
    createParticipation(from: Address): import("../..").Transaction<import("web3-core").TransactionReceipt>;
    /**
     * Create the PolicyManager contract for someone else
     *
     * @param from The address of the sender
     * @param manager The address of the manager
     */
    createPolicyManagerFor(from: Address, manager: Address): import("../..").Transaction<import("web3-core").TransactionReceipt>;
    /**
     * Create the PolicyManager contract
     *
     * @param from The address of the sender
     */
    createPolicyManager(from: Address): import("../..").Transaction<import("web3-core").TransactionReceipt>;
    /**
     * Create the Shares contract for someone else
     *
     * @param from The address of the sender
     * @param manager The address of the manager
     */
    createSharesFor(from: Address, manager: Address): import("../..").Transaction<import("web3-core").TransactionReceipt>;
    /**
     * Create the Shares contract
     *
     * @param from The address of the sender
     */
    createShares(from: Address): import("../..").Transaction<import("web3-core").TransactionReceipt>;
    /**
     * Create the Trading contract for someone else
     *
     * @param from The address of the sender
     * @param manager The address of the manager
     */
    createTradingFor(from: Address, manager: Address): import("../..").Transaction<import("web3-core").TransactionReceipt>;
    /**
     * Create the Trading contract
     *
     * @param from The address of the sender
     */
    createTrading(from: Address): import("../..").Transaction<import("web3-core").TransactionReceipt>;
    /**
     * Create the Vault contract for someone else
     *
     * @param from The address of the sender
     * @param manager The address of the manager
     */
    createVaultFor(from: Address, manager: Address): import("../..").Transaction<import("web3-core").TransactionReceipt>;
    /**
     * Create the Vault contract
     *
     * @param from The address of the sender
     */
    createVault(from: Address): import("../..").Transaction<import("web3-core").TransactionReceipt>;
    /**
     * Complete the fund setup for someone else
     *
     * @param from The address of the sender
     * @param manager The address of the manager
     */
    completeSetupFor(from: Address, manager: Address): import("../..").Transaction<import("web3-core").TransactionReceipt>;
    /**
     * Complete the fund setup
     *
     * @param from The address of the sender
     */
    completeSetup(from: Address): import("../..").Transaction<import("web3-core").TransactionReceipt>;
    /**
     * Gets the funds address based on the fund id (position in funds array)
     *
     * @param id The id of the fund
     * @param block The block number to execute the call on.
     */
    getFundById(id: number, block?: number): Promise<string>;
    /**
     * Gets the last fund id
     *
     * @param block The block number to execute the call on.
     */
    getLastFundId(block?: number): Promise<number>;
    /**
     * Gets the address of the MLN token
     *
     * @param block The block number to execute the call on.
     */
    getMlnToken(block?: number): Promise<string>;
    /**
     * Gets the address of the engine
     *
     * @param block The block number to execute the call on.
     */
    getEngine(block?: number): Promise<string>;
    /**
     * Gets the address of the price source contract
     *
     * @param block The block number to execute the call on.
     */
    getPriceSource(block?: number): Promise<string>;
    /**
     * Gets the address of the version contract
     *
     * @param block The block number to execute the call on.
     */
    getVersion(block?: number): Promise<string>;
    /**
     * Gets the address of the registry contract
     *
     * @param block The block number to execute the call on.
     */
    getRegistry(block?: number): Promise<string>;
}
export interface FundFactory extends Factory, AmguConsumer {
}
