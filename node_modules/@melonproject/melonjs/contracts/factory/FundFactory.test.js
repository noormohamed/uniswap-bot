"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const createTestEnvironment_1 = require("../../utils/tests/createTestEnvironment");
const randomAddress_1 = require("../../utils/tests/randomAddress");
const FundFactory_bin_1 = require("../../abis/FundFactory.bin");
const FundFactory_1 = require("./FundFactory");
describe('FundFactory', () => {
    let environment;
    let fundFactory;
    beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
        environment = yield createTestEnvironment_1.createTestEnvironment();
        const deploy = FundFactory_1.FundFactory.deploy(environment, FundFactory_bin_1.FundFactoryBytecode, environment.accounts[0], {
            accountingFactory: randomAddress_1.randomAddress(),
            feeManagerFactory: randomAddress_1.randomAddress(),
            participationFactory: randomAddress_1.randomAddress(),
            policyManagerFactory: randomAddress_1.randomAddress(),
            sharesFactory: randomAddress_1.randomAddress(),
            tradingFactory: randomAddress_1.randomAddress(),
            vaultFactory: randomAddress_1.randomAddress(),
            version: randomAddress_1.randomAddress(),
        });
        fundFactory = yield deploy.send(yield deploy.prepare());
    }));
    it('should check if a contract is an instance of a factory', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = fundFactory.contract.address;
        expect(result.startsWith('0x')).toBe(true);
    }));
    it('should return the address of the version', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield fundFactory.getVersion();
        expect(result.startsWith('0x')).toBe(true);
    }));
    it('should return the address of the registry', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield fundFactory.getRegistry();
        expect(result.startsWith('0x')).toBe(true);
    }));
});
