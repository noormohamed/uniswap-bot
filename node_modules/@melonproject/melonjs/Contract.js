"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Transaction_1 = require("./Transaction");
const toBigNumber_1 = require("./utils/toBigNumber");
class Contract {
    constructor(environment, address) {
        this.environment = environment;
        const abi = this.constructor.abi;
        this.contract = typeof address === 'string' ? new environment.client.Contract(abi, address) : address;
    }
    static createDeployment(environment, bytecode, from, args) {
        const contract = new environment.client.Contract(this.abi);
        const transaction = contract.deploy(Object.assign(Object.assign({}, (args && { arguments: args })), { data: bytecode }));
        return new Transaction_1.Deployment(this, environment, transaction, from, args);
    }
    createTransaction(args) {
        const fn = this.contract.methods[args.method];
        return new Transaction_1.Transaction(fn(...(args.args || [])), this.environment, args.from, this.contract, args.method, args.args, args.value, args.validate, args.amgu, args.incentive);
    }
    makeCall(method, args, block) {
        return __awaiter(this, void 0, void 0, function* () {
            const address = this.contract.address;
            const cache = block && this.environment.cache;
            try {
                const key = cache && `${address}:${block}:${method}${args ? `:${JSON.stringify(args)}` : ''}`;
                if (cache && cache.has(key)) {
                    return cache.get(key);
                }
                const promise = this.doMakeCall(method, args, block);
                cache && cache.set(key, promise);
                return yield promise;
            }
            catch (e) {
                throw new Error(`Failed to call ${method} at ${address}: ${e}`);
            }
        });
    }
    doMakeCall(method, args, block) {
        const fn = this.contract.methods[method];
        return fn(...(args || [])).call(undefined, block);
    }
    getEthBalance(block) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.environment.client.getBalance(this.contract.address, block);
            return toBigNumber_1.toBigNumber(result);
        });
    }
}
exports.Contract = Contract;
